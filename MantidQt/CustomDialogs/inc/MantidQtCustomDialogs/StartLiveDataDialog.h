#ifndef MANTIDQTCUSTOMDIALOGS_STARTLIVEDATADIALOG_H_
#define MANTIDQTCUSTOMDIALOGS_STARTLIVEDATADIALOG_H_

//----------------------
// Includes
//----------------------
#include "ui_StartLiveDataDialog.h"
#include "MantidQtAPI/AlgorithmDialog.h"
#include "MantidAPI/IAlgorithm.h"
#include "MantidAPI/Algorithm.h"
#include "MantidQtAPI/AlgorithmInputHistory.h"

namespace MantidQt
{
namespace CustomDialogs
{
class StartLiveDataDialog : public MantidQt::API::AlgorithmDialog
{
  Q_OBJECT

public:
  /// Default Constructor
  StartLiveDataDialog(QWidget *parent = 0);
  virtual ~StartLiveDataDialog();

public slots:
  void radioProcessClicked();
  void radioPostProcessClicked();
  void changeProcessingAlgorithm();
  void changePostProcessingAlgorithm();
  void radioTimeClicked();
  void chkPreserveEventsToggled();

private slots:
  void setDefaultAccumulationMethod(const QString&);
  void updateUiElements(const QString&);
  void accept();
  void initListenerPropLayout(const QString&);

private:
  /// Initialize the layout
  virtual void initLayout();

  /// Parse the input from the dialog when it has been accepted
  virtual void parseInput();

  Mantid::API::Algorithm_sptr changeAlgorithm(MantidQt::MantidWidgets::AlgorithmSelectorWidget * selector, MantidQt::API::AlgorithmPropertiesWidget * propWidget);

private:
  //The form generated by Qt Designer
  Ui::StartLiveDataDialog ui;

  bool m_useProcessAlgo;
  bool m_useProcessScript;
  bool m_usePostProcessAlgo;
  bool m_usePostProcessScript;

  /// The algorithm for processing chunks
  Mantid::API::Algorithm_sptr m_processingAlg;

  /// The algorithm for processing the accumulated workspace
  Mantid::API::Algorithm_sptr m_postProcessingAlg;

};

}
}

#endif //MANTIDQTCUSTOMDIALOGS_STARTLIVEDATADIALOG_H_
