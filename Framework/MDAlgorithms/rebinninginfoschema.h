#pragma once

#using < mscorlib.dll >
#using < System.dll >
#using < System.Data.dll >
#using < System.Xml.dll >

[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum,
                                      SkipVerification = false)];
//
// This source code was auto-generated by xsd, Version=4.0.30319.1.
//
ref class NewDataSet;

/// <summary>
/// Represents a strongly typed in-memory cache of data.
///</summary>
[
  System::Serializable,
  System::ComponentModel::DesignerCategoryAttribute(L"code"),
  System::ComponentModel::ToolboxItem(true),
  System::Xml::Serialization::XmlSchemaProviderAttribute(
      L"GetTypedDataSetSchema"),
  System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"),
  System::ComponentModel::Design::HelpKeywordAttribute(
      L"vs.data.DataSet")
] public ref class NewDataSet : public ::System::Data::DataSet {
public:
  ref class FunctionDataTable;

public:
  ref class ParameterListDataTable;

public:
  ref class ParameterDataTable;

public:
  ref class DimensionDataTable;

public:
  ref class IntegratedDataTable;

public:
  ref class CompositeInstructionDataTable;

public:
  ref class GeometryDataTable;

public:
  ref class XDimensionDataTable;

public:
  ref class YDimensionDataTable;

public:
  ref class ZDimensionDataTable;

public:
  ref class TDimensionDataTable;

public:
  ref class OperationDataTable;

public:
  ref class FunctionRow;

public:
  ref class ParameterListRow;

public:
  ref class ParameterRow;

public:
  ref class DimensionRow;

public:
  ref class IntegratedRow;

public:
  ref class CompositeInstructionRow;

public:
  ref class GeometryRow;

public:
  ref class XDimensionRow;

public:
  ref class YDimensionRow;

public:
  ref class ZDimensionRow;

public:
  ref class TDimensionRow;

public:
  ref class OperationRow;

public:
  ref class FunctionRowChangeEvent;

public:
  ref class ParameterListRowChangeEvent;

public:
  ref class ParameterRowChangeEvent;

public:
  ref class DimensionRowChangeEvent;

public:
  ref class IntegratedRowChangeEvent;

public:
  ref class CompositeInstructionRowChangeEvent;

public:
  ref class GeometryRowChangeEvent;

public:
  ref class XDimensionRowChangeEvent;

public:
  ref class YDimensionRowChangeEvent;

public:
  ref class ZDimensionRowChangeEvent;

public:
  ref class TDimensionRowChangeEvent;

public:
  ref class OperationRowChangeEvent;

private:
  NewDataSet::FunctionDataTable ^ tableFunction;

private:
  NewDataSet::ParameterListDataTable ^ tableParameterList;

private:
  NewDataSet::ParameterDataTable ^ tableParameter;

private:
  NewDataSet::DimensionDataTable ^ tableDimension;

private:
  NewDataSet::IntegratedDataTable ^ tableIntegrated;

private:
  NewDataSet::CompositeInstructionDataTable ^ tableCompositeInstruction;

private:
  NewDataSet::GeometryDataTable ^ tableGeometry;

private:
  NewDataSet::XDimensionDataTable ^ tableXDimension;

private:
  NewDataSet::YDimensionDataTable ^ tableYDimension;

private:
  NewDataSet::ZDimensionDataTable ^ tableZDimension;

private:
  NewDataSet::TDimensionDataTable ^ tableTDimension;

private:
  NewDataSet::OperationDataTable ^ tableOperation;

private:
  ::System::Data::DataRelation ^ relationFunction_Function;

private:
  ::System::Data::DataRelation ^ relationCompositeInstruction_Function;

private:
  ::System::Data::DataRelation ^ relationFunction_ParameterList;

private:
  ::System::Data::DataRelation ^ relationParameterList_Parameter;

private:
  ::System::Data::DataRelation ^ relationGeometry_Dimension;

private:
  ::System::Data::DataRelation ^ relationDimension_Integrated;

private:
  ::System::Data::DataRelation ^ relationCompositeInstruction_Geometry;

private:
  ::System::Data::DataRelation ^ relationGeometry_XDimension;

private:
  ::System::Data::DataRelation ^ relationGeometry_YDimension;

private:
  ::System::Data::DataRelation ^ relationGeometry_ZDimension;

private:
  ::System::Data::DataRelation ^ relationGeometry_TDimension;

private:
  ::System::Data::DataRelation ^ relationCompositeInstruction_Operation;

private:
  ::System::Data::SchemaSerializationMode _schemaSerializationMode;

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      FunctionRowChangeEventHandler(::System::Object ^ sender,
                                    NewDataSet::FunctionRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")] delegate
      System::Void ParameterListRowChangeEventHandler(
          ::System::Object ^ sender,
          NewDataSet::ParameterListRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      ParameterRowChangeEventHandler(::System::Object ^ sender,
                                     NewDataSet::ParameterRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      DimensionRowChangeEventHandler(::System::Object ^ sender,
                                     NewDataSet::DimensionRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      IntegratedRowChangeEventHandler(::System::Object ^ sender,
                                      NewDataSet::IntegratedRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")] delegate
      System::Void CompositeInstructionRowChangeEventHandler(
          ::System::Object ^ sender,
          NewDataSet::CompositeInstructionRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      GeometryRowChangeEventHandler(::System::Object ^ sender,
                                    NewDataSet::GeometryRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      XDimensionRowChangeEventHandler(::System::Object ^ sender,
                                      NewDataSet::XDimensionRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      YDimensionRowChangeEventHandler(::System::Object ^ sender,
                                      NewDataSet::YDimensionRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      ZDimensionRowChangeEventHandler(::System::Object ^ sender,
                                      NewDataSet::ZDimensionRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      TDimensionRowChangeEventHandler(::System::Object ^ sender,
                                      NewDataSet::TDimensionRowChangeEvent ^ e);

public:
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] delegate System::Void
      OperationRowChangeEventHandler(::System::Object ^ sender,
                                     NewDataSet::OperationRowChangeEvent ^ e);

public:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] NewDataSet();

protected:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] NewDataSet(::System::Runtime::Serialization::
                                          SerializationInfo ^
                                      info,
                                  ::System::Runtime::Serialization::
                                      StreamingContext context);

public:
  [
    System::Diagnostics::DebuggerNonUserCodeAttribute,
    System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
    System::ComponentModel::Browsable(false),
    System::ComponentModel::DesignerSerializationVisibility(
        ::System::ComponentModel::DesignerSerializationVisibility::Content)
  ] property NewDataSet::FunctionDataTable ^
      Function { NewDataSet::FunctionDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::ParameterListDataTable ^
      ParameterList { NewDataSet::ParameterListDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::ParameterDataTable ^
      Parameter { NewDataSet::ParameterDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::DimensionDataTable ^
      Dimension { NewDataSet::DimensionDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::IntegratedDataTable ^
      Integrated { NewDataSet::IntegratedDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::CompositeInstructionDataTable ^
      CompositeInstruction {
        NewDataSet::CompositeInstructionDataTable ^ get();
      }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::GeometryDataTable ^
      Geometry { NewDataSet::GeometryDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::XDimensionDataTable ^
      XDimension { NewDataSet::XDimensionDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design."
            L"TypedDataSetGenerator",
            L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::YDimensionDataTable ^
      YDimension { NewDataSet::YDimensionDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design."
            L"TypedDataSetGenerator",
            L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::ZDimensionDataTable ^
      ZDimension { NewDataSet::ZDimensionDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data."
                                                          L"Design."
                                                          L"TypedDataSetGenera"
                                                          L"tor",
                                                          L"4.0.0.0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::TDimensionDataTable ^
      TDimension { NewDataSet::TDimensionDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System"
                                                          L".Data."
                                                          L"Design"
                                                          L".Typed"
                                                          L"DataSe"
                                                          L"tGener"
                                                          L"ator",
                                                          L"4.0.0."
                                                          L"0"),
        System::ComponentModel::Browsable(false),
        System::ComponentModel::DesignerSerializationVisibility(
            ::System::ComponentModel::DesignerSerializationVisibility::Content)
      ] property NewDataSet::OperationDataTable ^
      Operation { NewDataSet::OperationDataTable ^ get(); }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"Sy"
                                                          L"st"
                                                          L"em"
                                                          L".D"
                                                          L"at"
                                                          L"a."
                                                          L"De"
                                                          L"si"
                                                          L"gn"
                                                          L".T"
                                                          L"yp"
                                                          L"ed"
                                                          L"Da"
                                                          L"ta"
                                                          L"Se"
                                                          L"tG"
                                                          L"en"
                                                          L"er"
                                                          L"at"
                                                          L"o"
                                                          L"r",
                                                          L"4."
                                                          L"0."
                                                          L"0."
                                                          L"0"),
        System::ComponentModel::BrowsableAttribute(true),
        System::ComponentModel::DesignerSerializationVisibilityAttribute(
            ::System::ComponentModel::DesignerSerializationVisibility::Visible)
      ] virtual property::System::Data::SchemaSerializationMode
          SchemaSerializationMode {
    ::System::Data::SchemaSerializationMode get() override;
    System::Void set(::System::Data::SchemaSerializationMode value) override;
  }

public:
  [
    System::Diagnostics::DebuggerNonUserCodeAttribute,
    System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
    System::ComponentModel::DesignerSerializationVisibilityAttribute(
        ::System::ComponentModel::DesignerSerializationVisibility::Hidden)
  ] property::System::Data::DataTableCollection ^
      Tables { ::System::Data::DataTableCollection ^ get() new; }

      public :
      [
        System::Diagnostics::DebuggerNonUserCodeAttribute,
        System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
        System::ComponentModel::DesignerSerializationVisibilityAttribute(
            ::System::ComponentModel::DesignerSerializationVisibility::Hidden)
      ] property::System::Data::DataRelationCollection ^
      Relations { ::System::Data::DataRelationCollection ^ get() new; }

      protected : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                      [System::CodeDom::Compiler::GeneratedCodeAttribute(
                          L"System.Data.Design.TypedDataSetGenerator",
                          L"4.0.0.0")] virtual ::System::Void
                      InitializeDerivedDataSet() override;

public:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
          [System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")] virtual ::System::Data::DataSet ^
      Clone() override;

protected:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] virtual ::System::Boolean
      ShouldSerializeTables() override;

protected:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] virtual ::System::Boolean
      ShouldSerializeRelations() override;

protected:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] virtual ::System::Void
          ReadXmlSerializable(::System::Xml::XmlReader ^ reader) override;

protected:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
          [System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")] virtual ::System::Xml::Schema::XmlSchema ^
      GetSchemaSerializable() override;

  internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                 [System::CodeDom::Compiler::GeneratedCodeAttribute(
                     L"System.Data.Design.TypedDataSetGenerator",
                     L"4.0.0.0")] ::System::Void
                 InitVars();

  internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                 [System::CodeDom::Compiler::GeneratedCodeAttribute(
                     L"System.Data.Design.TypedDataSetGenerator",
                     L"4.0.0.0")] ::System::Void
                 InitVars(::System::Boolean initTable);

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Void
      InitClass();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeFunction();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeParameterList();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeParameter();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeDimension();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeIntegrated();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeCompositeInstruction();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeGeometry();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeXDimension();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeYDimension();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeZDimension();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeTDimension();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Boolean
      ShouldSerializeOperation();

private:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
      [System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator",
          L"4.0.0.0")] ::System::Void
          SchemaChanged(::System::Object ^ sender,
                        ::System::ComponentModel::CollectionChangeEventArgs ^
                            e);

public:
  [System::Diagnostics::DebuggerNonUserCodeAttribute]
          [System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")] static ::System::Xml::Schema::XmlSchemaComplexType ^
      GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class FunctionDataTable : public ::System::Data::DataTable,
                                  public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnName;

  private:
    ::System::Data::DataColumn ^ columnFunction_Id;

  private:
    ::System::Data::DataColumn ^ columnFunction_Id_0;

  private:
    ::System::Data::DataColumn ^ columnCompositeInstruction_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::FunctionRowChangeEventHandler ^
        FunctionRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::FunctionRowChangeEventHandler ^
        FunctionRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::FunctionRowChangeEventHandler ^
        FunctionRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::FunctionRowChangeEventHandler ^
        FunctionRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] FunctionDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] FunctionDataTable(::System::Data::DataTable ^
                                               table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] FunctionDataTable(::System::Runtime::Serialization::
                                                   SerializationInfo ^
                                               info,
                                           ::System::Runtime::Serialization::
                                               StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        NameColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Function_IdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Function_Id_0Column { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        CompositeInstruction_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::FunctionRow ^
        default[::System::Int32 ] {
      NewDataSet::FunctionRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void AddFunctionRow(NewDataSet::FunctionRow ^
                                                       row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::FunctionRow ^
        AddFunctionRow(
            System::String ^ Name,
            NewDataSet::FunctionRow ^ parentFunctionRowByFunction_Function,
            NewDataSet::CompositeInstructionRow ^
                parentCompositeInstructionRowByCompositeInstruction_Function);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::FunctionRow ^
        NewFunctionRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveFunctionRow(NewDataSet::FunctionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class ParameterListDataTable
      : public ::System::Data::DataTable,
        public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnParameterList_Id;

  private:
    ::System::Data::DataColumn ^ columnFunction_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterListRowChangeEventHandler ^
        ParameterListRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterListRowChangeEventHandler ^
        ParameterListRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterListRowChangeEventHandler ^
        ParameterListRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterListRowChangeEventHandler ^
        ParameterListRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ParameterListDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] ParameterListDataTable(::System::Data::DataTable ^
                                                    table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ParameterListDataTable(::System::Runtime::
                                                        Serialization::
                                                            SerializationInfo ^
                                                    info,
                                                ::System::Runtime::
                                                    Serialization::
                                                        StreamingContext
                                                            context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        ParameterList_IdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Function_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::ParameterListRow ^
        default[::System::Int32 ] {
      NewDataSet::ParameterListRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddParameterListRow(NewDataSet::ParameterListRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::ParameterListRow ^
        AddParameterListRow(NewDataSet::FunctionRow ^
                            parentFunctionRowByFunction_ParameterList);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::ParameterListRow ^
        NewParameterListRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveParameterListRow(NewDataSet::ParameterListRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class ParameterDataTable : public ::System::Data::DataTable,
                                   public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnName;

  private:
    ::System::Data::DataColumn ^ columnType;

  private:
    ::System::Data::DataColumn ^ columnValue;

  private:
    ::System::Data::DataColumn ^ columnParameterList_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterRowChangeEventHandler ^
        ParameterRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterRowChangeEventHandler ^
        ParameterRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterRowChangeEventHandler ^
        ParameterRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ParameterRowChangeEventHandler ^
        ParameterRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ParameterDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] ParameterDataTable(::System::Data::DataTable ^
                                                table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ParameterDataTable(::System::Runtime::Serialization::
                                                    SerializationInfo ^
                                                info,
                                            ::System::Runtime::Serialization::
                                                StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        NameColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        TypeColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        ValueColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        ParameterList_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::ParameterRow ^
        default[::System::Int32 ] {
      NewDataSet::ParameterRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddParameterRow(NewDataSet::ParameterRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::ParameterRow ^
        AddParameterRow(System::String ^ Name, System::String ^ Type,
                        System::String ^ Value,
                        NewDataSet::ParameterListRow ^
                            parentParameterListRowByParameterList_Parameter);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::ParameterRow ^
        NewParameterRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveParameterRow(NewDataSet::ParameterRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class DimensionDataTable : public ::System::Data::DataTable,
                                   public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnID;

  private:
    ::System::Data::DataColumn ^ columnName;

  private:
    ::System::Data::DataColumn ^ columnUpperBounds;

  private:
    ::System::Data::DataColumn ^ columnLowerBounds;

  private:
    ::System::Data::DataColumn ^ columnDimension_Id;

  private:
    ::System::Data::DataColumn ^ columnGeometry_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::DimensionRowChangeEventHandler ^
        DimensionRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::DimensionRowChangeEventHandler ^
        DimensionRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::DimensionRowChangeEventHandler ^
        DimensionRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::DimensionRowChangeEventHandler ^
        DimensionRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] DimensionDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] DimensionDataTable(::System::Data::DataTable ^
                                                table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] DimensionDataTable(::System::Runtime::Serialization::
                                                    SerializationInfo ^
                                                info,
                                            ::System::Runtime::Serialization::
                                                StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        IDColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        NameColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        UpperBoundsColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        LowerBoundsColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Dimension_IdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Geometry_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::DimensionRow ^
        default[::System::Int32 ] {
      NewDataSet::DimensionRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddDimensionRow(NewDataSet::DimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::DimensionRow ^
        AddDimensionRow(System::Int64 ID, System::String ^ Name,
                        System::Int64 UpperBounds, System::Int64 LowerBounds,
                        NewDataSet::GeometryRow ^
                            parentGeometryRowByGeometry_Dimension);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::DimensionRow ^
        NewDimensionRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveDimensionRow(NewDataSet::DimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class IntegratedDataTable : public ::System::Data::DataTable,
                                    public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnUpperLimit;

  private:
    ::System::Data::DataColumn ^ columnLowerLimit;

  private:
    ::System::Data::DataColumn ^ columnDimension_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::IntegratedRowChangeEventHandler ^
        IntegratedRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::IntegratedRowChangeEventHandler ^
        IntegratedRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::IntegratedRowChangeEventHandler ^
        IntegratedRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::IntegratedRowChangeEventHandler ^
        IntegratedRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] IntegratedDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] IntegratedDataTable(::System::Data::DataTable ^
                                                 table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] IntegratedDataTable(::System::Runtime::Serialization::
                                                     SerializationInfo ^
                                                 info,
                                             ::System::Runtime::Serialization::
                                                 StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        UpperLimitColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        LowerLimitColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Dimension_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::IntegratedRow ^
        default[::System::Int32 ] {
      NewDataSet::IntegratedRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddIntegratedRow(NewDataSet::IntegratedRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::IntegratedRow ^
        AddIntegratedRow(System::Int64 UpperLimit, System::Int64 LowerLimit,
                         NewDataSet::DimensionRow ^
                             parentDimensionRowByDimension_Integrated);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::IntegratedRow ^
        NewIntegratedRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveIntegratedRow(NewDataSet::IntegratedRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class CompositeInstructionDataTable
      : public ::System::Data::DataTable,
        public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnMDWorkspaceName;

  private:
    ::System::Data::DataColumn ^ columnMDWorkspaceLocation;

  private:
    ::System::Data::DataColumn ^ columnCompositeInstruction_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")] event
            NewDataSet::CompositeInstructionRowChangeEventHandler ^
        CompositeInstructionRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")] event
            NewDataSet::CompositeInstructionRowChangeEventHandler ^
        CompositeInstructionRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")] event
            NewDataSet::CompositeInstructionRowChangeEventHandler ^
        CompositeInstructionRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")] event
            NewDataSet::CompositeInstructionRowChangeEventHandler ^
        CompositeInstructionRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] CompositeInstructionDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] CompositeInstructionDataTable(::System::Data::
                                                               DataTable ^
                                                           table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] CompositeInstructionDataTable(::System::Runtime::
                                                               Serialization::
                                                                   SerializationInfo ^
                                                           info,
                                                       ::System::Runtime::
                                                           Serialization::
                                                               StreamingContext
                                                                   context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        MDWorkspaceNameColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        MDWorkspaceLocationColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        CompositeInstruction_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::CompositeInstructionRow ^
        default[::System::Int32 ] {
      NewDataSet::CompositeInstructionRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddCompositeInstructionRow(NewDataSet::CompositeInstructionRow ^
                                       row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::CompositeInstructionRow ^
        AddCompositeInstructionRow(System::String ^ MDWorkspaceName,
                                   System::String ^ MDWorkspaceLocation);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::CompositeInstructionRow ^
        NewCompositeInstructionRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveCompositeInstructionRow(NewDataSet::CompositeInstructionRow ^
                                          row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class GeometryDataTable : public ::System::Data::DataTable,
                                  public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnGeometry_Id;

  private:
    ::System::Data::DataColumn ^ columnCompositeInstruction_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::GeometryRowChangeEventHandler ^
        GeometryRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::GeometryRowChangeEventHandler ^
        GeometryRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::GeometryRowChangeEventHandler ^
        GeometryRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::GeometryRowChangeEventHandler ^
        GeometryRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] GeometryDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] GeometryDataTable(::System::Data::DataTable ^
                                               table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] GeometryDataTable(::System::Runtime::Serialization::
                                                   SerializationInfo ^
                                               info,
                                           ::System::Runtime::Serialization::
                                               StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        Geometry_IdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        CompositeInstruction_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::GeometryRow ^
        default[::System::Int32 ] {
      NewDataSet::GeometryRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void AddGeometryRow(NewDataSet::GeometryRow ^
                                                       row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::GeometryRow ^
        AddGeometryRow(
            NewDataSet::CompositeInstructionRow ^
            parentCompositeInstructionRowByCompositeInstruction_Geometry);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::GeometryRow ^
        NewGeometryRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveGeometryRow(NewDataSet::GeometryRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class XDimensionDataTable : public ::System::Data::DataTable,
                                    public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnRefDimensionId;

  private:
    ::System::Data::DataColumn ^ columnGeometry_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::XDimensionRowChangeEventHandler ^
        XDimensionRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::XDimensionRowChangeEventHandler ^
        XDimensionRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::XDimensionRowChangeEventHandler ^
        XDimensionRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::XDimensionRowChangeEventHandler ^
        XDimensionRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] XDimensionDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] XDimensionDataTable(::System::Data::DataTable ^
                                                 table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] XDimensionDataTable(::System::Runtime::Serialization::
                                                     SerializationInfo ^
                                                 info,
                                             ::System::Runtime::Serialization::
                                                 StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        RefDimensionIdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Geometry_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::XDimensionRow ^
        default[::System::Int32 ] {
      NewDataSet::XDimensionRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddXDimensionRow(NewDataSet::XDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::XDimensionRow ^
        AddXDimensionRow(System::Int64 RefDimensionId,
                         NewDataSet::GeometryRow ^
                             parentGeometryRowByGeometry_XDimension);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::XDimensionRow ^
        NewXDimensionRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveXDimensionRow(NewDataSet::XDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class YDimensionDataTable : public ::System::Data::DataTable,
                                    public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnRefDimensionId;

  private:
    ::System::Data::DataColumn ^ columnGeometry_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::YDimensionRowChangeEventHandler ^
        YDimensionRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::YDimensionRowChangeEventHandler ^
        YDimensionRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::YDimensionRowChangeEventHandler ^
        YDimensionRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::YDimensionRowChangeEventHandler ^
        YDimensionRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] YDimensionDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] YDimensionDataTable(::System::Data::DataTable ^
                                                 table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] YDimensionDataTable(::System::Runtime::Serialization::
                                                     SerializationInfo ^
                                                 info,
                                             ::System::Runtime::Serialization::
                                                 StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        RefDimensionIdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Geometry_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::YDimensionRow ^
        default[::System::Int32 ] {
      NewDataSet::YDimensionRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddYDimensionRow(NewDataSet::YDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::YDimensionRow ^
        AddYDimensionRow(System::Int64 RefDimensionId,
                         NewDataSet::GeometryRow ^
                             parentGeometryRowByGeometry_YDimension);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::YDimensionRow ^
        NewYDimensionRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveYDimensionRow(NewDataSet::YDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class ZDimensionDataTable : public ::System::Data::DataTable,
                                    public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnRefDimensionId;

  private:
    ::System::Data::DataColumn ^ columnGeometry_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ZDimensionRowChangeEventHandler ^
        ZDimensionRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ZDimensionRowChangeEventHandler ^
        ZDimensionRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ZDimensionRowChangeEventHandler ^
        ZDimensionRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::ZDimensionRowChangeEventHandler ^
        ZDimensionRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ZDimensionDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] ZDimensionDataTable(::System::Data::DataTable ^
                                                 table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ZDimensionDataTable(::System::Runtime::Serialization::
                                                     SerializationInfo ^
                                                 info,
                                             ::System::Runtime::Serialization::
                                                 StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        RefDimensionIdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Geometry_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::ZDimensionRow ^
        default[::System::Int32 ] {
      NewDataSet::ZDimensionRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddZDimensionRow(NewDataSet::ZDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::ZDimensionRow ^
        AddZDimensionRow(System::Int64 RefDimensionId,
                         NewDataSet::GeometryRow ^
                             parentGeometryRowByGeometry_ZDimension);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::ZDimensionRow ^
        NewZDimensionRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveZDimensionRow(NewDataSet::ZDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class TDimensionDataTable : public ::System::Data::DataTable,
                                    public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnRefDimensionId;

  private:
    ::System::Data::DataColumn ^ columnGeometry_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::TDimensionRowChangeEventHandler ^
        TDimensionRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::TDimensionRowChangeEventHandler ^
        TDimensionRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::TDimensionRowChangeEventHandler ^
        TDimensionRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::TDimensionRowChangeEventHandler ^
        TDimensionRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] TDimensionDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] TDimensionDataTable(::System::Data::DataTable ^
                                                 table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] TDimensionDataTable(::System::Runtime::Serialization::
                                                     SerializationInfo ^
                                                 info,
                                             ::System::Runtime::Serialization::
                                                 StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        RefDimensionIdColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        Geometry_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::TDimensionRow ^
        default[::System::Int32 ] {
      NewDataSet::TDimensionRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddTDimensionRow(NewDataSet::TDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::TDimensionRow ^
        AddTDimensionRow(System::Int64 RefDimensionId,
                         NewDataSet::GeometryRow ^
                             parentGeometryRowByGeometry_TDimension);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::TDimensionRow ^
        NewTDimensionRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveTDimensionRow(NewDataSet::TDimensionRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents the strongly named DataTable class.
  ///</summary>
  [
    System::Serializable,
    System::Xml::Serialization::XmlSchemaProviderAttribute(
        L"GetTypedTableSchema")
  ] ref class OperationDataTable : public ::System::Data::DataTable,
                                   public ::System::Collections::IEnumerable {

  private:
    ::System::Data::DataColumn ^ columnType;

  private:
    ::System::Data::DataColumn ^ columnCompositeInstruction_Id;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::OperationRowChangeEventHandler ^
        OperationRowChanging;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::OperationRowChangeEventHandler ^
        OperationRowChanged;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::OperationRowChangeEventHandler ^
        OperationRowDeleting;

  public:
    [System::CodeDom::Compiler::GeneratedCodeAttribute(
        L"System.Data.Design.TypedDataSetGenerator",
        L"4.0.0.0")] event NewDataSet::OperationRowChangeEventHandler ^
        OperationRowDeleted;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] OperationDataTable();
    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] OperationDataTable(::System::Data::DataTable ^
                                                table);

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] OperationDataTable(::System::Runtime::Serialization::
                                                    SerializationInfo ^
                                                info,
                                            ::System::Runtime::Serialization::
                                                StreamingContext context);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property::System::Data::DataColumn ^
        TypeColumn { ::System::Data::DataColumn ^ get(); }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataColumn ^
        CompositeInstruction_IdColumn { ::System::Data::DataColumn ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"),
          System::ComponentModel::Browsable(false)
        ] property::System::Int32 Count {
      ::System::Int32 get();
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::OperationRow ^
        default[::System::Int32 ] {
      NewDataSet::OperationRow ^ get(::System::Int32 index);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            AddOperationRow(NewDataSet::OperationRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::OperationRow ^
        AddOperationRow(
            System::String ^ Type,
            NewDataSet::CompositeInstructionRow ^
                parentCompositeInstructionRowByCompositeInstruction_Operation);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Collections::IEnumerator ^
        GetEnumerator();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        Clone() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataTable ^
        CreateInstance() override;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] ::System::Void
                   InitVars();

  private:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        InitClass();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] NewDataSet::OperationRow ^
        NewOperationRow();

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Data::DataRow ^
        NewRowFromBuilder(::System::Data::DataRowBuilder ^ builder) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] virtual ::System::Type ^
        GetRowType() override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanged(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowChanging(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleted(::System::Data::DataRowChangeEventArgs ^ e) override;

  protected:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] virtual ::System::Void
            OnRowDeleting(::System::Data::DataRowChangeEventArgs ^ e) override;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
            RemoveOperationRow(NewDataSet::OperationRow ^ row);

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] static ::System::Xml::Schema::
                XmlSchemaComplexType ^
        GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet ^ xs);
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class FunctionRow : public ::System::Data::DataRow {

  private:
    NewDataSet::FunctionDataTable ^ tableFunction;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] FunctionRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::String ^
        Name {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::Int32 Function_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Function_Id_0 {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 CompositeInstruction_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::FunctionRow ^
        FunctionRowParent {
          NewDataSet::FunctionRow ^ get();
          System::Void set(NewDataSet::FunctionRow ^ value);
        }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property NewDataSet::CompositeInstructionRow ^
        CompositeInstructionRow {
          NewDataSet::CompositeInstructionRow ^ get();
          System::Void set(NewDataSet::CompositeInstructionRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsFunction_Id_0Null();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetFunction_Id_0Null();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Boolean
        IsCompositeInstruction_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetCompositeInstruction_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::ParameterListRow ^> ^
        GetParameterListRows();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::FunctionRow ^> ^
        GetFunctionRows();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class ParameterListRow : public ::System::Data::DataRow {

  private:
    NewDataSet::ParameterListDataTable ^ tableParameterList;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] ParameterListRow(::System::Data::DataRowBuilder ^
                                              rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 ParameterList_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Function_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::FunctionRow ^
        FunctionRow {
          NewDataSet::FunctionRow ^ get();
          System::Void set(NewDataSet::FunctionRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsFunction_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetFunction_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::ParameterRow ^> ^
        GetParameterRows();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class ParameterRow : public ::System::Data::DataRow {

  private:
    NewDataSet::ParameterDataTable ^ tableParameter;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] ParameterRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::String ^
        Name {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::String ^
        Type {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::String ^
        Value {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::Int32 ParameterList_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::ParameterListRow ^
        ParameterListRow {
          NewDataSet::ParameterListRow ^ get();
          System::Void set(NewDataSet::ParameterListRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsParameterList_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetParameterList_IdNull();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class DimensionRow : public ::System::Data::DataRow {

  private:
    NewDataSet::DimensionDataTable ^ tableDimension;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] DimensionRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 ID {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::String ^
        Name {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::Int64 UpperBounds {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 LowerBounds {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Dimension_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Geometry_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::GeometryRow ^
        GeometryRow {
          NewDataSet::GeometryRow ^ get();
          System::Void set(NewDataSet::GeometryRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsGeometry_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetGeometry_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::IntegratedRow ^> ^
        GetIntegratedRows();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class IntegratedRow : public ::System::Data::DataRow {

  private:
    NewDataSet::IntegratedDataTable ^ tableIntegrated;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] IntegratedRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 UpperLimit {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 LowerLimit {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Dimension_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::DimensionRow ^
        DimensionRow {
          NewDataSet::DimensionRow ^ get();
          System::Void set(NewDataSet::DimensionRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsDimension_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetDimension_IdNull();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class CompositeInstructionRow : public ::System::Data::DataRow {

  private:
    NewDataSet::CompositeInstructionDataTable ^ tableCompositeInstruction;

    internal : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                   [System::CodeDom::Compiler::GeneratedCodeAttribute(
                       L"System.Data.Design.TypedDataSetGenerator",
                       L"4.0.0.0")] CompositeInstructionRow(::System::Data::
                                                                DataRowBuilder ^
                                                            rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::String ^
        MDWorkspaceName {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public :
        [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::String ^
        MDWorkspaceLocation {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::Int32 CompositeInstruction_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::GeometryRow ^> ^
        GetGeometryRows();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::OperationRow ^> ^
        GetOperationRows();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::FunctionRow ^> ^
        GetFunctionRows();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class GeometryRow : public ::System::Data::DataRow {

  private:
    NewDataSet::GeometryDataTable ^ tableGeometry;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] GeometryRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Geometry_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 CompositeInstruction_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::CompositeInstructionRow ^
        CompositeInstructionRow {
          NewDataSet::CompositeInstructionRow ^ get();
          System::Void set(NewDataSet::CompositeInstructionRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsCompositeInstruction_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetCompositeInstruction_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::DimensionRow ^> ^
        GetDimensionRows();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::XDimensionRow ^> ^
        GetXDimensionRows();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::YDimensionRow ^> ^
        GetYDimensionRows();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::ZDimensionRow ^> ^
        GetZDimensionRows();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] cli::array<NewDataSet::TDimensionRow ^> ^
        GetTDimensionRows();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class XDimensionRow : public ::System::Data::DataRow {

  private:
    NewDataSet::XDimensionDataTable ^ tableXDimension;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] XDimensionRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 RefDimensionId {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Geometry_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::GeometryRow ^
        GeometryRow {
          NewDataSet::GeometryRow ^ get();
          System::Void set(NewDataSet::GeometryRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Boolean
        IsGeometry_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetGeometry_IdNull();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class YDimensionRow : public ::System::Data::DataRow {

  private:
    NewDataSet::YDimensionDataTable ^ tableYDimension;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] YDimensionRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 RefDimensionId {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Geometry_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::GeometryRow ^
        GeometryRow {
          NewDataSet::GeometryRow ^ get();
          System::Void set(NewDataSet::GeometryRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Boolean
        IsGeometry_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetGeometry_IdNull();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class ZDimensionRow : public ::System::Data::DataRow {

  private:
    NewDataSet::ZDimensionDataTable ^ tableZDimension;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] ZDimensionRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 RefDimensionId {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Geometry_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::GeometryRow ^
        GeometryRow {
          NewDataSet::GeometryRow ^ get();
          System::Void set(NewDataSet::GeometryRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Boolean
        IsGeometry_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetGeometry_IdNull();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class TDimensionRow : public ::System::Data::DataRow {

  private:
    NewDataSet::TDimensionDataTable ^ tableTDimension;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] TDimensionRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int64 RefDimensionId {
      System::Int64 get();
      System::Void set(System::Int64 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::Int32 Geometry_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::GeometryRow ^
        GeometryRow {
          NewDataSet::GeometryRow ^ get();
          System::Void set(NewDataSet::GeometryRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetRefDimensionIdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Boolean
        IsGeometry_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetGeometry_IdNull();
  };

public: /// <summary>
  /// Represents strongly named DataRow class.
  ///</summary>
  ref class OperationRow : public ::System::Data::DataRow {

  private:
    NewDataSet::OperationDataTable ^ tableOperation;

    internal :
        [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(
                L"System.Data.Design.TypedDataSetGenerator",
                L"4.0.0.0")] OperationRow(::System::Data::DataRowBuilder ^ rb);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property System::String ^
        Type {
          System::String ^ get();
          System::Void set(System::String ^ value);
        }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property System::Int32 CompositeInstruction_Id {
      System::Int32 get();
      System::Void set(System::Int32 value);
    }

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::CompositeInstructionRow ^
        CompositeInstructionRow {
          NewDataSet::CompositeInstructionRow ^ get();
          System::Void set(NewDataSet::CompositeInstructionRow ^ value);
        }

        public : [System::Diagnostics::DebuggerNonUserCodeAttribute]
                     [System::CodeDom::Compiler::GeneratedCodeAttribute(
                         L"System.Data.Design.TypedDataSetGenerator",
                         L"4.0.0.0")] ::System::Boolean
                     IsCompositeInstruction_IdNull();

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ::System::Void
        SetCompositeInstruction_IdNull();
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class FunctionRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::FunctionRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] FunctionRowChangeEvent(NewDataSet::FunctionRow ^ row,
                                                ::System::Data::DataRowAction
                                                    action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::FunctionRow ^
        Row { NewDataSet::FunctionRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class ParameterListRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::ParameterListRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ParameterListRowChangeEvent(NewDataSet::
                                                             ParameterListRow ^
                                                         row,
                                                     ::System::Data::
                                                         DataRowAction action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::ParameterListRow ^
        Row { NewDataSet::ParameterListRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class ParameterRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::ParameterRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ParameterRowChangeEvent(NewDataSet::ParameterRow ^ row,
                                                 ::System::Data::DataRowAction
                                                     action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::ParameterRow ^
        Row { NewDataSet::ParameterRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class DimensionRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::DimensionRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] DimensionRowChangeEvent(NewDataSet::DimensionRow ^ row,
                                                 ::System::Data::DataRowAction
                                                     action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::DimensionRow ^
        Row { NewDataSet::DimensionRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class IntegratedRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::IntegratedRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] IntegratedRowChangeEvent(NewDataSet::IntegratedRow ^
                                                      row,
                                                  ::System::Data::DataRowAction
                                                      action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::IntegratedRow ^
        Row { NewDataSet::IntegratedRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class CompositeInstructionRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::CompositeInstructionRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] CompositeInstructionRowChangeEvent(NewDataSet::
                                                                    CompositeInstructionRow ^
                                                                row,
                                                            ::System::Data::
                                                                DataRowAction
                                                                    action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::CompositeInstructionRow ^
        Row { NewDataSet::CompositeInstructionRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class GeometryRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::GeometryRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] GeometryRowChangeEvent(NewDataSet::GeometryRow ^ row,
                                                ::System::Data::DataRowAction
                                                    action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::GeometryRow ^
        Row { NewDataSet::GeometryRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class XDimensionRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::XDimensionRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] XDimensionRowChangeEvent(NewDataSet::XDimensionRow ^
                                                      row,
                                                  ::System::Data::DataRowAction
                                                      action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::XDimensionRow ^
        Row { NewDataSet::XDimensionRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class YDimensionRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::YDimensionRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] YDimensionRowChangeEvent(NewDataSet::YDimensionRow ^
                                                      row,
                                                  ::System::Data::DataRowAction
                                                      action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::YDimensionRow ^
        Row { NewDataSet::YDimensionRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class ZDimensionRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::ZDimensionRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] ZDimensionRowChangeEvent(NewDataSet::ZDimensionRow ^
                                                      row,
                                                  ::System::Data::DataRowAction
                                                      action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::ZDimensionRow ^
        Row { NewDataSet::ZDimensionRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class TDimensionRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::TDimensionRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] TDimensionRowChangeEvent(NewDataSet::TDimensionRow ^
                                                      row,
                                                  ::System::Data::DataRowAction
                                                      action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::TDimensionRow ^
        Row { NewDataSet::TDimensionRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };

public: /// <summary>
  /// Row event argument class
  ///</summary>
  [System::CodeDom::Compiler::GeneratedCodeAttribute(
      L"System.Data.Design.TypedDataSetGenerator",
      L"4.0.0.0")] ref class OperationRowChangeEvent
      : public ::System::EventArgs {

  private:
    NewDataSet::OperationRow ^ eventRow;

  private:
    ::System::Data::DataRowAction eventAction;

  public:
    [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(
            L"System.Data.Design.TypedDataSetGenerator",
            L"4.0.0.0")] OperationRowChangeEvent(NewDataSet::OperationRow ^ row,
                                                 ::System::Data::DataRowAction
                                                     action);

  public:
    [
      System::Diagnostics::DebuggerNonUserCodeAttribute,
      System::CodeDom::Compiler::GeneratedCodeAttribute(
          L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")
    ] property NewDataSet::OperationRow ^
        Row { NewDataSet::OperationRow ^ get(); }

        public : [
          System::Diagnostics::DebuggerNonUserCodeAttribute,
          System::CodeDom::Compiler::GeneratedCodeAttribute(
              L"System.Data.Design.TypedDataSetGenerator",
              L"4.0.0.0")
        ] property::System::Data::DataRowAction Action {
      ::System::Data::DataRowAction get();
    }
  };
};

inline NewDataSet::NewDataSet() {
  this->BeginInit();
  this->InitClass();
  ::System::ComponentModel::CollectionChangeEventHandler ^
      schemaChangedHandler =
      gcnew::System::ComponentModel::CollectionChangeEventHandler(
          this, &NewDataSet::SchemaChanged);
  __super::Tables->CollectionChanged += schemaChangedHandler;
  __super::Relations->CollectionChanged += schemaChangedHandler;
  this->EndInit();
}

inline NewDataSet::NewDataSet(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataSet(info, context, false) {
  if (this->IsBinarySerialized(info, context) == true) {
    this->InitVars(false);
    ::System::ComponentModel::CollectionChangeEventHandler ^
        schemaChangedHandler1 =
        gcnew::System::ComponentModel::CollectionChangeEventHandler(
            this, &NewDataSet::SchemaChanged);
    this->Tables->CollectionChanged += schemaChangedHandler1;
    this->Relations->CollectionChanged += schemaChangedHandler1;
    return;
  }
  ::System::String ^ strSchema = (cli::safe_cast<::System::String ^>(
      info->GetValue(L"XmlSchema", ::System::String::typeid)));
  if (this->DetermineSchemaSerializationMode(info, context) ==
      ::System::Data::SchemaSerializationMode::IncludeSchema) {
    ::System::Data::DataSet ^ ds = (gcnew::System::Data::DataSet());
    ds->ReadXmlSchema((gcnew::System::Xml::XmlTextReader(
        (gcnew::System::IO::StringReader(strSchema)))));
    if (ds->Tables[L"Function"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::FunctionDataTable(ds->Tables[L"Function"])));
    }
    if (ds->Tables[L"ParameterList"] != nullptr) {
      __super::Tables->Add((gcnew NewDataSet::ParameterListDataTable(
          ds->Tables[L"ParameterList"])));
    }
    if (ds->Tables[L"Parameter"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::ParameterDataTable(ds->Tables[L"Parameter"])));
    }
    if (ds->Tables[L"Dimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::DimensionDataTable(ds->Tables[L"Dimension"])));
    }
    if (ds->Tables[L"Integrated"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::IntegratedDataTable(ds->Tables[L"Integrated"])));
    }
    if (ds->Tables[L"CompositeInstruction"] != nullptr) {
      __super::Tables->Add((gcnew NewDataSet::CompositeInstructionDataTable(
          ds->Tables[L"CompositeInstruction"])));
    }
    if (ds->Tables[L"Geometry"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::GeometryDataTable(ds->Tables[L"Geometry"])));
    }
    if (ds->Tables[L"XDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::XDimensionDataTable(ds->Tables[L"XDimension"])));
    }
    if (ds->Tables[L"YDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::YDimensionDataTable(ds->Tables[L"YDimension"])));
    }
    if (ds->Tables[L"ZDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::ZDimensionDataTable(ds->Tables[L"ZDimension"])));
    }
    if (ds->Tables[L"TDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::TDimensionDataTable(ds->Tables[L"TDimension"])));
    }
    if (ds->Tables[L"Operation"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::OperationDataTable(ds->Tables[L"Operation"])));
    }
    this->DataSetName = ds->DataSetName;
    this->Prefix = ds->Prefix;
    this->Namespace = ds->Namespace;
    this->Locale = ds->Locale;
    this->CaseSensitive = ds->CaseSensitive;
    this->EnforceConstraints = ds->EnforceConstraints;
    this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
    this->InitVars();
  } else {
    this->ReadXmlSchema((gcnew::System::Xml::XmlTextReader(
        (gcnew::System::IO::StringReader(strSchema)))));
  }
  this->GetSerializationData(info, context);
  ::System::ComponentModel::CollectionChangeEventHandler ^
      schemaChangedHandler =
      gcnew::System::ComponentModel::CollectionChangeEventHandler(
          this, &NewDataSet::SchemaChanged);
  __super::Tables->CollectionChanged += schemaChangedHandler;
  this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::FunctionDataTable ^ NewDataSet::Function::get() {
  return this->tableFunction;
}

inline NewDataSet::ParameterListDataTable ^ NewDataSet::ParameterList::get() {
  return this->tableParameterList;
}

inline NewDataSet::ParameterDataTable ^ NewDataSet::Parameter::get() {
  return this->tableParameter;
}

inline NewDataSet::DimensionDataTable ^ NewDataSet::Dimension::get() {
  return this->tableDimension;
}

inline NewDataSet::IntegratedDataTable ^ NewDataSet::Integrated::get() {
  return this->tableIntegrated;
}

inline NewDataSet::CompositeInstructionDataTable ^
    NewDataSet::CompositeInstruction::get() {
  return this->tableCompositeInstruction;
}

inline NewDataSet::GeometryDataTable ^ NewDataSet::Geometry::get() {
  return this->tableGeometry;
}

inline NewDataSet::XDimensionDataTable ^ NewDataSet::XDimension::get() {
  return this->tableXDimension;
}

inline NewDataSet::YDimensionDataTable ^ NewDataSet::YDimension::get() {
  return this->tableYDimension;
}

inline NewDataSet::ZDimensionDataTable ^ NewDataSet::ZDimension::get() {
  return this->tableZDimension;
}

inline NewDataSet::TDimensionDataTable ^ NewDataSet::TDimension::get() {
  return this->tableTDimension;
}

inline NewDataSet::OperationDataTable ^ NewDataSet::Operation::get() {
  return this->tableOperation;
}

inline ::System::Data::SchemaSerializationMode
NewDataSet::SchemaSerializationMode::get() {
  return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(
    ::System::Data::SchemaSerializationMode value) {
  this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection ^ NewDataSet::Tables::get() {
  return __super::Tables;
}

inline ::System::Data::DataRelationCollection ^ NewDataSet::Relations::get() {
  return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline ::System::Data::DataSet ^ NewDataSet::Clone() {
  NewDataSet ^ cln = (cli::safe_cast<NewDataSet ^>(__super::Clone()));
  cln->InitVars();
  cln->SchemaSerializationMode = this->SchemaSerializationMode;
  return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() { return false; }

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
  return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader ^
                                                      reader) {
  if (this->DetermineSchemaSerializationMode(reader) ==
      ::System::Data::SchemaSerializationMode::IncludeSchema) {
    this->Reset();
    ::System::Data::DataSet ^ ds = (gcnew::System::Data::DataSet());
    ds->ReadXml(reader);
    if (ds->Tables[L"Function"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::FunctionDataTable(ds->Tables[L"Function"])));
    }
    if (ds->Tables[L"ParameterList"] != nullptr) {
      __super::Tables->Add((gcnew NewDataSet::ParameterListDataTable(
          ds->Tables[L"ParameterList"])));
    }
    if (ds->Tables[L"Parameter"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::ParameterDataTable(ds->Tables[L"Parameter"])));
    }
    if (ds->Tables[L"Dimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::DimensionDataTable(ds->Tables[L"Dimension"])));
    }
    if (ds->Tables[L"Integrated"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::IntegratedDataTable(ds->Tables[L"Integrated"])));
    }
    if (ds->Tables[L"CompositeInstruction"] != nullptr) {
      __super::Tables->Add((gcnew NewDataSet::CompositeInstructionDataTable(
          ds->Tables[L"CompositeInstruction"])));
    }
    if (ds->Tables[L"Geometry"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::GeometryDataTable(ds->Tables[L"Geometry"])));
    }
    if (ds->Tables[L"XDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::XDimensionDataTable(ds->Tables[L"XDimension"])));
    }
    if (ds->Tables[L"YDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::YDimensionDataTable(ds->Tables[L"YDimension"])));
    }
    if (ds->Tables[L"ZDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::ZDimensionDataTable(ds->Tables[L"ZDimension"])));
    }
    if (ds->Tables[L"TDimension"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::TDimensionDataTable(ds->Tables[L"TDimension"])));
    }
    if (ds->Tables[L"Operation"] != nullptr) {
      __super::Tables->Add(
          (gcnew NewDataSet::OperationDataTable(ds->Tables[L"Operation"])));
    }
    this->DataSetName = ds->DataSetName;
    this->Prefix = ds->Prefix;
    this->Namespace = ds->Namespace;
    this->Locale = ds->Locale;
    this->CaseSensitive = ds->CaseSensitive;
    this->EnforceConstraints = ds->EnforceConstraints;
    this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
    this->InitVars();
  } else {
    this->ReadXml(reader);
    this->InitVars();
  }
}

inline ::System::Xml::Schema::XmlSchema ^ NewDataSet::GetSchemaSerializable() {
  ::System::IO::MemoryStream ^ stream = (gcnew::System::IO::MemoryStream());
  this->WriteXmlSchema((gcnew::System::Xml::XmlTextWriter(stream, nullptr)));
  stream->Position = 0;
  return ::System::Xml::Schema::XmlSchema::Read(
      (gcnew::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() { this->InitVars(true); }

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
  this->tableFunction = (cli::safe_cast<NewDataSet::FunctionDataTable ^>(
      __super::Tables[L"Function"]));
  if (initTable == true) {
    if (this->tableFunction != nullptr) {
      this->tableFunction->InitVars();
    }
  }
  this->tableParameterList =
      (cli::safe_cast<NewDataSet::ParameterListDataTable ^>(
          __super::Tables[L"ParameterList"]));
  if (initTable == true) {
    if (this->tableParameterList != nullptr) {
      this->tableParameterList->InitVars();
    }
  }
  this->tableParameter = (cli::safe_cast<NewDataSet::ParameterDataTable ^>(
      __super::Tables[L"Parameter"]));
  if (initTable == true) {
    if (this->tableParameter != nullptr) {
      this->tableParameter->InitVars();
    }
  }
  this->tableDimension = (cli::safe_cast<NewDataSet::DimensionDataTable ^>(
      __super::Tables[L"Dimension"]));
  if (initTable == true) {
    if (this->tableDimension != nullptr) {
      this->tableDimension->InitVars();
    }
  }
  this->tableIntegrated = (cli::safe_cast<NewDataSet::IntegratedDataTable ^>(
      __super::Tables[L"Integrated"]));
  if (initTable == true) {
    if (this->tableIntegrated != nullptr) {
      this->tableIntegrated->InitVars();
    }
  }
  this->tableCompositeInstruction =
      (cli::safe_cast<NewDataSet::CompositeInstructionDataTable ^>(
          __super::Tables[L"CompositeInstruction"]));
  if (initTable == true) {
    if (this->tableCompositeInstruction != nullptr) {
      this->tableCompositeInstruction->InitVars();
    }
  }
  this->tableGeometry = (cli::safe_cast<NewDataSet::GeometryDataTable ^>(
      __super::Tables[L"Geometry"]));
  if (initTable == true) {
    if (this->tableGeometry != nullptr) {
      this->tableGeometry->InitVars();
    }
  }
  this->tableXDimension = (cli::safe_cast<NewDataSet::XDimensionDataTable ^>(
      __super::Tables[L"XDimension"]));
  if (initTable == true) {
    if (this->tableXDimension != nullptr) {
      this->tableXDimension->InitVars();
    }
  }
  this->tableYDimension = (cli::safe_cast<NewDataSet::YDimensionDataTable ^>(
      __super::Tables[L"YDimension"]));
  if (initTable == true) {
    if (this->tableYDimension != nullptr) {
      this->tableYDimension->InitVars();
    }
  }
  this->tableZDimension = (cli::safe_cast<NewDataSet::ZDimensionDataTable ^>(
      __super::Tables[L"ZDimension"]));
  if (initTable == true) {
    if (this->tableZDimension != nullptr) {
      this->tableZDimension->InitVars();
    }
  }
  this->tableTDimension = (cli::safe_cast<NewDataSet::TDimensionDataTable ^>(
      __super::Tables[L"TDimension"]));
  if (initTable == true) {
    if (this->tableTDimension != nullptr) {
      this->tableTDimension->InitVars();
    }
  }
  this->tableOperation = (cli::safe_cast<NewDataSet::OperationDataTable ^>(
      __super::Tables[L"Operation"]));
  if (initTable == true) {
    if (this->tableOperation != nullptr) {
      this->tableOperation->InitVars();
    }
  }
  this->relationFunction_Function = this->Relations[L"Function_Function"];
  this->relationCompositeInstruction_Function =
      this->Relations[L"CompositeInstruction_Function"];
  this->relationFunction_ParameterList =
      this->Relations[L"Function_ParameterList"];
  this->relationParameterList_Parameter =
      this->Relations[L"ParameterList_Parameter"];
  this->relationGeometry_Dimension = this->Relations[L"Geometry_Dimension"];
  this->relationDimension_Integrated = this->Relations[L"Dimension_Integrated"];
  this->relationCompositeInstruction_Geometry =
      this->Relations[L"CompositeInstruction_Geometry"];
  this->relationGeometry_XDimension = this->Relations[L"Geometry_XDimension"];
  this->relationGeometry_YDimension = this->Relations[L"Geometry_YDimension"];
  this->relationGeometry_ZDimension = this->Relations[L"Geometry_ZDimension"];
  this->relationGeometry_TDimension = this->Relations[L"Geometry_TDimension"];
  this->relationCompositeInstruction_Operation =
      this->Relations[L"CompositeInstruction_Operation"];
}

inline ::System::Void NewDataSet::InitClass() {
  this->DataSetName = L"NewDataSet";
  this->Prefix = L"";
  this->Locale = (gcnew::System::Globalization::CultureInfo(L""));
  this->EnforceConstraints = true;
  this->SchemaSerializationMode =
      ::System::Data::SchemaSerializationMode::IncludeSchema;
  this->tableFunction = (gcnew NewDataSet::FunctionDataTable());
  __super::Tables->Add(this->tableFunction);
  this->tableParameterList = (gcnew NewDataSet::ParameterListDataTable());
  __super::Tables->Add(this->tableParameterList);
  this->tableParameter = (gcnew NewDataSet::ParameterDataTable());
  __super::Tables->Add(this->tableParameter);
  this->tableDimension = (gcnew NewDataSet::DimensionDataTable());
  __super::Tables->Add(this->tableDimension);
  this->tableIntegrated = (gcnew NewDataSet::IntegratedDataTable());
  __super::Tables->Add(this->tableIntegrated);
  this->tableCompositeInstruction =
      (gcnew NewDataSet::CompositeInstructionDataTable());
  __super::Tables->Add(this->tableCompositeInstruction);
  this->tableGeometry = (gcnew NewDataSet::GeometryDataTable());
  __super::Tables->Add(this->tableGeometry);
  this->tableXDimension = (gcnew NewDataSet::XDimensionDataTable());
  __super::Tables->Add(this->tableXDimension);
  this->tableYDimension = (gcnew NewDataSet::YDimensionDataTable());
  __super::Tables->Add(this->tableYDimension);
  this->tableZDimension = (gcnew NewDataSet::ZDimensionDataTable());
  __super::Tables->Add(this->tableZDimension);
  this->tableTDimension = (gcnew NewDataSet::TDimensionDataTable());
  __super::Tables->Add(this->tableTDimension);
  this->tableOperation = (gcnew NewDataSet::OperationDataTable());
  __super::Tables->Add(this->tableOperation);
  ::System::Data::ForeignKeyConstraint ^ fkc;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Function_Function",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableFunction->Function_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableFunction->Function_Id_0Column}));
  this->tableFunction->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"CompositeInstruction_Function",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableCompositeInstruction->CompositeInstruction_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableFunction->CompositeInstruction_IdColumn}));
  this->tableFunction->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Function_ParameterList",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableFunction->Function_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableParameterList->Function_IdColumn}));
  this->tableParameterList->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"ParameterList_Parameter",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableParameterList->ParameterList_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableParameter->ParameterList_IdColumn}));
  this->tableParameter->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Geometry_Dimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableDimension->Geometry_IdColumn}));
  this->tableDimension->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Dimension_Integrated",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableDimension->Dimension_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableIntegrated->Dimension_IdColumn}));
  this->tableIntegrated->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"CompositeInstruction_Geometry",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableCompositeInstruction->CompositeInstruction_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->CompositeInstruction_IdColumn}));
  this->tableGeometry->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Geometry_XDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableXDimension->Geometry_IdColumn}));
  this->tableXDimension->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Geometry_YDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableYDimension->Geometry_IdColumn}));
  this->tableYDimension->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Geometry_ZDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableZDimension->Geometry_IdColumn}));
  this->tableZDimension->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"Geometry_TDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableTDimension->Geometry_IdColumn}));
  this->tableTDimension->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  fkc = (gcnew::System::Data::ForeignKeyConstraint(
      L"CompositeInstruction_Operation",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableCompositeInstruction->CompositeInstruction_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableOperation->CompositeInstruction_IdColumn}));
  this->tableOperation->Constraints->Add(fkc);
  fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
  fkc->DeleteRule = ::System::Data::Rule::Cascade;
  fkc->UpdateRule = ::System::Data::Rule::Cascade;
  this->relationFunction_Function = (gcnew::System::Data::DataRelation(
      L"Function_Function",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableFunction->Function_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableFunction->Function_Id_0Column},
      false));
  this->relationFunction_Function->Nested = true;
  this->Relations->Add(this->relationFunction_Function);
  this->relationCompositeInstruction_Function =
      (gcnew::System::Data::DataRelation(
          L"CompositeInstruction_Function",
          gcnew cli::array<::System::Data::DataColumn ^>(1){
              this->tableCompositeInstruction->CompositeInstruction_IdColumn},
          gcnew cli::array<::System::Data::DataColumn ^>(1){
              this->tableFunction->CompositeInstruction_IdColumn},
          false));
  this->relationCompositeInstruction_Function->Nested = true;
  this->Relations->Add(this->relationCompositeInstruction_Function);
  this->relationFunction_ParameterList = (gcnew::System::Data::DataRelation(
      L"Function_ParameterList",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableFunction->Function_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableParameterList->Function_IdColumn},
      false));
  this->relationFunction_ParameterList->Nested = true;
  this->Relations->Add(this->relationFunction_ParameterList);
  this->relationParameterList_Parameter = (gcnew::System::Data::DataRelation(
      L"ParameterList_Parameter",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableParameterList->ParameterList_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableParameter->ParameterList_IdColumn},
      false));
  this->relationParameterList_Parameter->Nested = true;
  this->Relations->Add(this->relationParameterList_Parameter);
  this->relationGeometry_Dimension = (gcnew::System::Data::DataRelation(
      L"Geometry_Dimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableDimension->Geometry_IdColumn},
      false));
  this->relationGeometry_Dimension->Nested = true;
  this->Relations->Add(this->relationGeometry_Dimension);
  this->relationDimension_Integrated = (gcnew::System::Data::DataRelation(
      L"Dimension_Integrated",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableDimension->Dimension_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableIntegrated->Dimension_IdColumn},
      false));
  this->relationDimension_Integrated->Nested = true;
  this->Relations->Add(this->relationDimension_Integrated);
  this->relationCompositeInstruction_Geometry =
      (gcnew::System::Data::DataRelation(
          L"CompositeInstruction_Geometry",
          gcnew cli::array<::System::Data::DataColumn ^>(1){
              this->tableCompositeInstruction->CompositeInstruction_IdColumn},
          gcnew cli::array<::System::Data::DataColumn ^>(1){
              this->tableGeometry->CompositeInstruction_IdColumn},
          false));
  this->relationCompositeInstruction_Geometry->Nested = true;
  this->Relations->Add(this->relationCompositeInstruction_Geometry);
  this->relationGeometry_XDimension = (gcnew::System::Data::DataRelation(
      L"Geometry_XDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableXDimension->Geometry_IdColumn},
      false));
  this->relationGeometry_XDimension->Nested = true;
  this->Relations->Add(this->relationGeometry_XDimension);
  this->relationGeometry_YDimension = (gcnew::System::Data::DataRelation(
      L"Geometry_YDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableYDimension->Geometry_IdColumn},
      false));
  this->relationGeometry_YDimension->Nested = true;
  this->Relations->Add(this->relationGeometry_YDimension);
  this->relationGeometry_ZDimension = (gcnew::System::Data::DataRelation(
      L"Geometry_ZDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableZDimension->Geometry_IdColumn},
      false));
  this->relationGeometry_ZDimension->Nested = true;
  this->Relations->Add(this->relationGeometry_ZDimension);
  this->relationGeometry_TDimension = (gcnew::System::Data::DataRelation(
      L"Geometry_TDimension",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableGeometry->Geometry_IdColumn},
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->tableTDimension->Geometry_IdColumn},
      false));
  this->relationGeometry_TDimension->Nested = true;
  this->Relations->Add(this->relationGeometry_TDimension);
  this->relationCompositeInstruction_Operation =
      (gcnew::System::Data::DataRelation(
          L"CompositeInstruction_Operation",
          gcnew cli::array<::System::Data::DataColumn ^>(1){
              this->tableCompositeInstruction->CompositeInstruction_IdColumn},
          gcnew cli::array<::System::Data::DataColumn ^>(1){
              this->tableOperation->CompositeInstruction_IdColumn},
          false));
  this->relationCompositeInstruction_Operation->Nested = true;
  this->Relations->Add(this->relationCompositeInstruction_Operation);
}

inline ::System::Boolean NewDataSet::ShouldSerializeFunction() { return false; }

inline ::System::Boolean NewDataSet::ShouldSerializeParameterList() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeParameter() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeDimension() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeIntegrated() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeCompositeInstruction() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeGeometry() { return false; }

inline ::System::Boolean NewDataSet::ShouldSerializeXDimension() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeYDimension() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeZDimension() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTDimension() {
  return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeOperation() {
  return false;
}

inline ::System::Void NewDataSet::SchemaChanged(
    ::System::Object ^ sender,
    ::System::ComponentModel::CollectionChangeEventArgs ^ e) {
  if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
    this->InitVars();
  }
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet ^
                                      xs) {
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  ::System::Xml::Schema::XmlSchemaAny ^ any =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any->Namespace = ds->Namespace;
  sequence->Items->Add(any);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::FunctionDataTable::FunctionDataTable() {
  this->TableName = L"Function";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::FunctionDataTable::FunctionDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::FunctionDataTable::FunctionDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::FunctionDataTable::NameColumn::get() {
  return this->columnName;
}

inline ::System::Data::DataColumn ^
    NewDataSet::FunctionDataTable::Function_IdColumn::get() {
  return this->columnFunction_Id;
}

inline ::System::Data::DataColumn ^
    NewDataSet::FunctionDataTable::Function_Id_0Column::get() {
  return this->columnFunction_Id_0;
}

inline ::System::Data::DataColumn ^
    NewDataSet::FunctionDataTable::CompositeInstruction_IdColumn::get() {
  return this->columnCompositeInstruction_Id;
}

inline ::System::Int32 NewDataSet::FunctionDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::FunctionRow ^
    NewDataSet::FunctionDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::FunctionRow ^>(this->Rows[index]));
}

inline ::System::Void
NewDataSet::FunctionDataTable::AddFunctionRow(NewDataSet::FunctionRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::FunctionRow ^
    NewDataSet::FunctionDataTable::AddFunctionRow(
        System::String ^ Name,
        NewDataSet::FunctionRow ^ parentFunctionRowByFunction_Function,
        NewDataSet::CompositeInstructionRow ^
            parentCompositeInstructionRowByCompositeInstruction_Function) {
  NewDataSet::FunctionRow ^ rowFunctionRow =
      (cli::safe_cast<NewDataSet::FunctionRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(4){Name, nullptr, nullptr, nullptr};
  if (parentFunctionRowByFunction_Function != nullptr) {
    columnValuesArray[2] = parentFunctionRowByFunction_Function[1];
  }
  if (parentCompositeInstructionRowByCompositeInstruction_Function != nullptr) {
    columnValuesArray[3] =
        parentCompositeInstructionRowByCompositeInstruction_Function[2];
  }
  rowFunctionRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowFunctionRow);
  return rowFunctionRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::FunctionDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::FunctionDataTable::Clone() {
  NewDataSet::FunctionDataTable ^ cln =
      (cli::safe_cast<NewDataSet::FunctionDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::FunctionDataTable::CreateInstance() {
  return (gcnew NewDataSet::FunctionDataTable());
}

inline ::System::Void NewDataSet::FunctionDataTable::InitVars() {
  this->columnName = __super::Columns[L"Name"];
  this->columnFunction_Id = __super::Columns[L"Function_Id"];
  this->columnFunction_Id_0 = __super::Columns[L"Function_Id_0"];
  this->columnCompositeInstruction_Id =
      __super::Columns[L"CompositeInstruction_Id"];
}

inline ::System::Void NewDataSet::FunctionDataTable::InitClass() {
  this->columnName = (gcnew::System::Data::DataColumn(
      L"Name", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnName);
  this->columnFunction_Id = (gcnew::System::Data::DataColumn(
      L"Function_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnFunction_Id);
  this->columnFunction_Id_0 = (gcnew::System::Data::DataColumn(
      L"Function_Id_0", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnFunction_Id_0);
  this->columnCompositeInstruction_Id = (gcnew::System::Data::DataColumn(
      L"CompositeInstruction_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnCompositeInstruction_Id);
  this->Constraints->Add((gcnew::System::Data::UniqueConstraint(
      L"Constraint1",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->columnFunction_Id},
      true)));
  this->columnName->AllowDBNull = false;
  this->columnFunction_Id->AutoIncrement = true;
  this->columnFunction_Id->AllowDBNull = false;
  this->columnFunction_Id->Unique = true;
}

inline NewDataSet::FunctionRow ^
    NewDataSet::FunctionDataTable::NewFunctionRow() {
  return (cli::safe_cast<NewDataSet::FunctionRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::FunctionDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::FunctionRow(builder));
}

inline ::System::Type ^ NewDataSet::FunctionDataTable::GetRowType() {
  return NewDataSet::FunctionRow::typeid;
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->FunctionRowChanged(
        this,
        (gcnew NewDataSet::FunctionRowChangeEvent(
            (cli::safe_cast<NewDataSet::FunctionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->FunctionRowChanging(
        this,
        (gcnew NewDataSet::FunctionRowChangeEvent(
            (cli::safe_cast<NewDataSet::FunctionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->FunctionRowDeleted(
        this,
        (gcnew NewDataSet::FunctionRowChangeEvent(
            (cli::safe_cast<NewDataSet::FunctionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->FunctionRowDeleting(
        this,
        (gcnew NewDataSet::FunctionRowChangeEvent(
            (cli::safe_cast<NewDataSet::FunctionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::FunctionDataTable::RemoveFunctionRow(
    NewDataSet::FunctionRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::FunctionDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"FunctionDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::ParameterListDataTable::ParameterListDataTable() {
  this->TableName = L"ParameterList";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::ParameterListDataTable::ParameterListDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::ParameterListDataTable::ParameterListDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::ParameterListDataTable::ParameterList_IdColumn::get() {
  return this->columnParameterList_Id;
}

inline ::System::Data::DataColumn ^
    NewDataSet::ParameterListDataTable::Function_IdColumn::get() {
  return this->columnFunction_Id;
}

inline ::System::Int32 NewDataSet::ParameterListDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::ParameterListRow ^
    NewDataSet::ParameterListDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::ParameterListRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::ParameterListDataTable::AddParameterListRow(
    NewDataSet::ParameterListRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::ParameterListRow ^
    NewDataSet::ParameterListDataTable::AddParameterListRow(
        NewDataSet::FunctionRow ^ parentFunctionRowByFunction_ParameterList) {
  NewDataSet::ParameterListRow ^ rowParameterListRow =
      (cli::safe_cast<NewDataSet::ParameterListRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(2){nullptr, nullptr};
  if (parentFunctionRowByFunction_ParameterList != nullptr) {
    columnValuesArray[1] = parentFunctionRowByFunction_ParameterList[1];
  }
  rowParameterListRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowParameterListRow);
  return rowParameterListRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::ParameterListDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::ParameterListDataTable::Clone() {
  NewDataSet::ParameterListDataTable ^ cln =
      (cli::safe_cast<NewDataSet::ParameterListDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::ParameterListDataTable::CreateInstance() {
  return (gcnew NewDataSet::ParameterListDataTable());
}

inline ::System::Void NewDataSet::ParameterListDataTable::InitVars() {
  this->columnParameterList_Id = __super::Columns[L"ParameterList_Id"];
  this->columnFunction_Id = __super::Columns[L"Function_Id"];
}

inline ::System::Void NewDataSet::ParameterListDataTable::InitClass() {
  this->columnParameterList_Id = (gcnew::System::Data::DataColumn(
      L"ParameterList_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnParameterList_Id);
  this->columnFunction_Id = (gcnew::System::Data::DataColumn(
      L"Function_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnFunction_Id);
  this->Constraints->Add((gcnew::System::Data::UniqueConstraint(
      L"Constraint1",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->columnParameterList_Id},
      true)));
  this->columnParameterList_Id->AutoIncrement = true;
  this->columnParameterList_Id->AllowDBNull = false;
  this->columnParameterList_Id->Unique = true;
}

inline NewDataSet::ParameterListRow ^
    NewDataSet::ParameterListDataTable::NewParameterListRow() {
  return (cli::safe_cast<NewDataSet::ParameterListRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::ParameterListDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::ParameterListRow(builder));
}

inline ::System::Type ^ NewDataSet::ParameterListDataTable::GetRowType() {
  return NewDataSet::ParameterListRow::typeid;
}

inline ::System::Void NewDataSet::ParameterListDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->ParameterListRowChanged(
        this, (gcnew NewDataSet::ParameterListRowChangeEvent(
                  (cli::safe_cast<NewDataSet::ParameterListRow ^>(e->Row)),
                  e->Action)));
  }
}

inline ::System::Void NewDataSet::ParameterListDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->ParameterListRowChanging(
        this, (gcnew NewDataSet::ParameterListRowChangeEvent(
                  (cli::safe_cast<NewDataSet::ParameterListRow ^>(e->Row)),
                  e->Action)));
  }
}

inline ::System::Void NewDataSet::ParameterListDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->ParameterListRowDeleted(
        this, (gcnew NewDataSet::ParameterListRowChangeEvent(
                  (cli::safe_cast<NewDataSet::ParameterListRow ^>(e->Row)),
                  e->Action)));
  }
}

inline ::System::Void NewDataSet::ParameterListDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->ParameterListRowDeleting(
        this, (gcnew NewDataSet::ParameterListRowChangeEvent(
                  (cli::safe_cast<NewDataSet::ParameterListRow ^>(e->Row)),
                  e->Action)));
  }
}

inline ::System::Void
NewDataSet::ParameterListDataTable::RemoveParameterListRow(
    NewDataSet::ParameterListRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::ParameterListDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"ParameterListDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::ParameterDataTable::ParameterDataTable() {
  this->TableName = L"Parameter";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::ParameterDataTable::ParameterDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::ParameterDataTable::ParameterDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::ParameterDataTable::NameColumn::get() {
  return this->columnName;
}

inline ::System::Data::DataColumn ^
    NewDataSet::ParameterDataTable::TypeColumn::get() {
  return this->columnType;
}

inline ::System::Data::DataColumn ^
    NewDataSet::ParameterDataTable::ValueColumn::get() {
  return this->columnValue;
}

inline ::System::Data::DataColumn ^
    NewDataSet::ParameterDataTable::ParameterList_IdColumn::get() {
  return this->columnParameterList_Id;
}

inline ::System::Int32 NewDataSet::ParameterDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::ParameterRow ^
    NewDataSet::ParameterDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::ParameterRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::ParameterDataTable::AddParameterRow(
    NewDataSet::ParameterRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::ParameterRow ^
    NewDataSet::ParameterDataTable::AddParameterRow(
        System::String ^ Name, System::String ^ Type, System::String ^ Value,
        NewDataSet::ParameterListRow ^
            parentParameterListRowByParameterList_Parameter) {
  NewDataSet::ParameterRow ^ rowParameterRow =
      (cli::safe_cast<NewDataSet::ParameterRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(4){Name, Type, Value, nullptr};
  if (parentParameterListRowByParameterList_Parameter != nullptr) {
    columnValuesArray[3] = parentParameterListRowByParameterList_Parameter[0];
  }
  rowParameterRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowParameterRow);
  return rowParameterRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::ParameterDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::ParameterDataTable::Clone() {
  NewDataSet::ParameterDataTable ^ cln =
      (cli::safe_cast<NewDataSet::ParameterDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::ParameterDataTable::CreateInstance() {
  return (gcnew NewDataSet::ParameterDataTable());
}

inline ::System::Void NewDataSet::ParameterDataTable::InitVars() {
  this->columnName = __super::Columns[L"Name"];
  this->columnType = __super::Columns[L"Type"];
  this->columnValue = __super::Columns[L"Value"];
  this->columnParameterList_Id = __super::Columns[L"ParameterList_Id"];
}

inline ::System::Void NewDataSet::ParameterDataTable::InitClass() {
  this->columnName = (gcnew::System::Data::DataColumn(
      L"Name", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnName);
  this->columnType = (gcnew::System::Data::DataColumn(
      L"Type", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnType);
  this->columnValue = (gcnew::System::Data::DataColumn(
      L"Value", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnValue);
  this->columnParameterList_Id = (gcnew::System::Data::DataColumn(
      L"ParameterList_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnParameterList_Id);
  this->columnName->AllowDBNull = false;
  this->columnType->AllowDBNull = false;
  this->columnValue->AllowDBNull = false;
}

inline NewDataSet::ParameterRow ^
    NewDataSet::ParameterDataTable::NewParameterRow() {
  return (cli::safe_cast<NewDataSet::ParameterRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::ParameterDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::ParameterRow(builder));
}

inline ::System::Type ^ NewDataSet::ParameterDataTable::GetRowType() {
  return NewDataSet::ParameterRow::typeid;
}

inline ::System::Void NewDataSet::ParameterDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->ParameterRowChanged(
        this,
        (gcnew NewDataSet::ParameterRowChangeEvent(
            (cli::safe_cast<NewDataSet::ParameterRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ParameterDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->ParameterRowChanging(
        this,
        (gcnew NewDataSet::ParameterRowChangeEvent(
            (cli::safe_cast<NewDataSet::ParameterRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ParameterDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->ParameterRowDeleted(
        this,
        (gcnew NewDataSet::ParameterRowChangeEvent(
            (cli::safe_cast<NewDataSet::ParameterRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ParameterDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->ParameterRowDeleting(
        this,
        (gcnew NewDataSet::ParameterRowChangeEvent(
            (cli::safe_cast<NewDataSet::ParameterRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ParameterDataTable::RemoveParameterRow(
    NewDataSet::ParameterRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::ParameterDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"ParameterDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::DimensionDataTable::DimensionDataTable() {
  this->TableName = L"Dimension";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::DimensionDataTable::DimensionDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::DimensionDataTable::DimensionDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::DimensionDataTable::IDColumn::get() {
  return this->columnID;
}

inline ::System::Data::DataColumn ^
    NewDataSet::DimensionDataTable::NameColumn::get() {
  return this->columnName;
}

inline ::System::Data::DataColumn ^
    NewDataSet::DimensionDataTable::UpperBoundsColumn::get() {
  return this->columnUpperBounds;
}

inline ::System::Data::DataColumn ^
    NewDataSet::DimensionDataTable::LowerBoundsColumn::get() {
  return this->columnLowerBounds;
}

inline ::System::Data::DataColumn ^
    NewDataSet::DimensionDataTable::Dimension_IdColumn::get() {
  return this->columnDimension_Id;
}

inline ::System::Data::DataColumn ^
    NewDataSet::DimensionDataTable::Geometry_IdColumn::get() {
  return this->columnGeometry_Id;
}

inline ::System::Int32 NewDataSet::DimensionDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::DimensionRow ^
    NewDataSet::DimensionDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::DimensionRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::DimensionDataTable::AddDimensionRow(
    NewDataSet::DimensionRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::DimensionRow ^
    NewDataSet::DimensionDataTable::AddDimensionRow(
        System::Int64 ID, System::String ^ Name, System::Int64 UpperBounds,
        System::Int64 LowerBounds,
        NewDataSet::GeometryRow ^ parentGeometryRowByGeometry_Dimension) {
  NewDataSet::DimensionRow ^ rowDimensionRow =
      (cli::safe_cast<NewDataSet::DimensionRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(6){ID,          Name,    UpperBounds,
                                              LowerBounds, nullptr, nullptr};
  if (parentGeometryRowByGeometry_Dimension != nullptr) {
    columnValuesArray[5] = parentGeometryRowByGeometry_Dimension[0];
  }
  rowDimensionRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowDimensionRow);
  return rowDimensionRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::DimensionDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::DimensionDataTable::Clone() {
  NewDataSet::DimensionDataTable ^ cln =
      (cli::safe_cast<NewDataSet::DimensionDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::DimensionDataTable::CreateInstance() {
  return (gcnew NewDataSet::DimensionDataTable());
}

inline ::System::Void NewDataSet::DimensionDataTable::InitVars() {
  this->columnID = __super::Columns[L"ID"];
  this->columnName = __super::Columns[L"Name"];
  this->columnUpperBounds = __super::Columns[L"UpperBounds"];
  this->columnLowerBounds = __super::Columns[L"LowerBounds"];
  this->columnDimension_Id = __super::Columns[L"Dimension_Id"];
  this->columnGeometry_Id = __super::Columns[L"Geometry_Id"];
}

inline ::System::Void NewDataSet::DimensionDataTable::InitClass() {
  this->columnID =
      (gcnew::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr,
                                       ::System::Data::MappingType::Attribute));
  __super::Columns->Add(this->columnID);
  this->columnName = (gcnew::System::Data::DataColumn(
      L"Name", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnName);
  this->columnUpperBounds = (gcnew::System::Data::DataColumn(
      L"UpperBounds", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnUpperBounds);
  this->columnLowerBounds = (gcnew::System::Data::DataColumn(
      L"LowerBounds", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnLowerBounds);
  this->columnDimension_Id = (gcnew::System::Data::DataColumn(
      L"Dimension_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnDimension_Id);
  this->columnGeometry_Id = (gcnew::System::Data::DataColumn(
      L"Geometry_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnGeometry_Id);
  this->Constraints->Add((gcnew::System::Data::UniqueConstraint(
      L"Constraint1",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->columnDimension_Id},
      true)));
  this->columnID->AllowDBNull = false;
  this->columnID->Namespace = L"";
  this->columnName->AllowDBNull = false;
  this->columnUpperBounds->AllowDBNull = false;
  this->columnLowerBounds->AllowDBNull = false;
  this->columnDimension_Id->AutoIncrement = true;
  this->columnDimension_Id->AllowDBNull = false;
  this->columnDimension_Id->Unique = true;
}

inline NewDataSet::DimensionRow ^
    NewDataSet::DimensionDataTable::NewDimensionRow() {
  return (cli::safe_cast<NewDataSet::DimensionRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::DimensionDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::DimensionRow(builder));
}

inline ::System::Type ^ NewDataSet::DimensionDataTable::GetRowType() {
  return NewDataSet::DimensionRow::typeid;
}

inline ::System::Void NewDataSet::DimensionDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->DimensionRowChanged(
        this,
        (gcnew NewDataSet::DimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::DimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::DimensionDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->DimensionRowChanging(
        this,
        (gcnew NewDataSet::DimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::DimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::DimensionDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->DimensionRowDeleted(
        this,
        (gcnew NewDataSet::DimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::DimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::DimensionDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->DimensionRowDeleting(
        this,
        (gcnew NewDataSet::DimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::DimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::DimensionDataTable::RemoveDimensionRow(
    NewDataSet::DimensionRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::DimensionDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"DimensionDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::IntegratedDataTable::IntegratedDataTable() {
  this->TableName = L"Integrated";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::IntegratedDataTable::IntegratedDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::IntegratedDataTable::IntegratedDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::IntegratedDataTable::UpperLimitColumn::get() {
  return this->columnUpperLimit;
}

inline ::System::Data::DataColumn ^
    NewDataSet::IntegratedDataTable::LowerLimitColumn::get() {
  return this->columnLowerLimit;
}

inline ::System::Data::DataColumn ^
    NewDataSet::IntegratedDataTable::Dimension_IdColumn::get() {
  return this->columnDimension_Id;
}

inline ::System::Int32 NewDataSet::IntegratedDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::IntegratedRow ^
    NewDataSet::IntegratedDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::IntegratedRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::IntegratedDataTable::AddIntegratedRow(
    NewDataSet::IntegratedRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::IntegratedRow ^
    NewDataSet::IntegratedDataTable::AddIntegratedRow(
        System::Int64 UpperLimit, System::Int64 LowerLimit,
        NewDataSet::DimensionRow ^ parentDimensionRowByDimension_Integrated) {
  NewDataSet::IntegratedRow ^ rowIntegratedRow =
      (cli::safe_cast<NewDataSet::IntegratedRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(3){UpperLimit, LowerLimit, nullptr};
  if (parentDimensionRowByDimension_Integrated != nullptr) {
    columnValuesArray[2] = parentDimensionRowByDimension_Integrated[4];
  }
  rowIntegratedRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowIntegratedRow);
  return rowIntegratedRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::IntegratedDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::IntegratedDataTable::Clone() {
  NewDataSet::IntegratedDataTable ^ cln =
      (cli::safe_cast<NewDataSet::IntegratedDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::IntegratedDataTable::CreateInstance() {
  return (gcnew NewDataSet::IntegratedDataTable());
}

inline ::System::Void NewDataSet::IntegratedDataTable::InitVars() {
  this->columnUpperLimit = __super::Columns[L"UpperLimit"];
  this->columnLowerLimit = __super::Columns[L"LowerLimit"];
  this->columnDimension_Id = __super::Columns[L"Dimension_Id"];
}

inline ::System::Void NewDataSet::IntegratedDataTable::InitClass() {
  this->columnUpperLimit = (gcnew::System::Data::DataColumn(
      L"UpperLimit", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnUpperLimit);
  this->columnLowerLimit = (gcnew::System::Data::DataColumn(
      L"LowerLimit", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnLowerLimit);
  this->columnDimension_Id = (gcnew::System::Data::DataColumn(
      L"Dimension_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnDimension_Id);
  this->columnUpperLimit->AllowDBNull = false;
  this->columnLowerLimit->AllowDBNull = false;
}

inline NewDataSet::IntegratedRow ^
    NewDataSet::IntegratedDataTable::NewIntegratedRow() {
  return (cli::safe_cast<NewDataSet::IntegratedRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::IntegratedDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::IntegratedRow(builder));
}

inline ::System::Type ^ NewDataSet::IntegratedDataTable::GetRowType() {
  return NewDataSet::IntegratedRow::typeid;
}

inline ::System::Void NewDataSet::IntegratedDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->IntegratedRowChanged(
        this,
        (gcnew NewDataSet::IntegratedRowChangeEvent(
            (cli::safe_cast<NewDataSet::IntegratedRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::IntegratedDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->IntegratedRowChanging(
        this,
        (gcnew NewDataSet::IntegratedRowChangeEvent(
            (cli::safe_cast<NewDataSet::IntegratedRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::IntegratedDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->IntegratedRowDeleted(
        this,
        (gcnew NewDataSet::IntegratedRowChangeEvent(
            (cli::safe_cast<NewDataSet::IntegratedRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::IntegratedDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->IntegratedRowDeleting(
        this,
        (gcnew NewDataSet::IntegratedRowChangeEvent(
            (cli::safe_cast<NewDataSet::IntegratedRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::IntegratedDataTable::RemoveIntegratedRow(
    NewDataSet::IntegratedRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::IntegratedDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"IntegratedDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::CompositeInstructionDataTable::
    CompositeInstructionDataTable() {
  this->TableName = L"CompositeInstruction";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::CompositeInstructionDataTable::CompositeInstructionDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::CompositeInstructionDataTable::CompositeInstructionDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::CompositeInstructionDataTable::MDWorkspaceNameColumn::get() {
  return this->columnMDWorkspaceName;
}

inline ::System::Data::DataColumn ^ NewDataSet::CompositeInstructionDataTable::
                                        MDWorkspaceLocationColumn::get() {
  return this->columnMDWorkspaceLocation;
}

inline ::System::Data::DataColumn ^ NewDataSet::CompositeInstructionDataTable::
                                        CompositeInstruction_IdColumn::get() {
  return this->columnCompositeInstruction_Id;
}

inline ::System::Int32 NewDataSet::CompositeInstructionDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::CompositeInstructionRow ^
    NewDataSet::CompositeInstructionDataTable::default ::get(
        ::System::Int32 index) {
  return (
      cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(this->Rows[index]));
}

inline ::System::Void
NewDataSet::CompositeInstructionDataTable::AddCompositeInstructionRow(
    NewDataSet::CompositeInstructionRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::CompositeInstructionRow ^
    NewDataSet::CompositeInstructionDataTable::AddCompositeInstructionRow(
        System::String ^ MDWorkspaceName,
        System::String ^ MDWorkspaceLocation) {
  NewDataSet::CompositeInstructionRow ^ rowCompositeInstructionRow =
      (cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(3){MDWorkspaceName,
                                              MDWorkspaceLocation, nullptr};
  rowCompositeInstructionRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowCompositeInstructionRow);
  return rowCompositeInstructionRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::CompositeInstructionDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^
    NewDataSet::CompositeInstructionDataTable::Clone() {
  NewDataSet::CompositeInstructionDataTable ^ cln =
      (cli::safe_cast<NewDataSet::CompositeInstructionDataTable ^>(
          __super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::CompositeInstructionDataTable::CreateInstance() {
  return (gcnew NewDataSet::CompositeInstructionDataTable());
}

inline ::System::Void NewDataSet::CompositeInstructionDataTable::InitVars() {
  this->columnMDWorkspaceName = __super::Columns[L"MDWorkspaceName"];
  this->columnMDWorkspaceLocation = __super::Columns[L"MDWorkspaceLocation"];
  this->columnCompositeInstruction_Id =
      __super::Columns[L"CompositeInstruction_Id"];
}

inline ::System::Void NewDataSet::CompositeInstructionDataTable::InitClass() {
  this->columnMDWorkspaceName = (gcnew::System::Data::DataColumn(
      L"MDWorkspaceName", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnMDWorkspaceName);
  this->columnMDWorkspaceLocation = (gcnew::System::Data::DataColumn(
      L"MDWorkspaceLocation", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnMDWorkspaceLocation);
  this->columnCompositeInstruction_Id = (gcnew::System::Data::DataColumn(
      L"CompositeInstruction_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnCompositeInstruction_Id);
  this->Constraints->Add((gcnew::System::Data::UniqueConstraint(
      L"Constraint1",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->columnCompositeInstruction_Id},
      true)));
  this->columnMDWorkspaceName->AllowDBNull = false;
  this->columnMDWorkspaceLocation->AllowDBNull = false;
  this->columnCompositeInstruction_Id->AutoIncrement = true;
  this->columnCompositeInstruction_Id->AllowDBNull = false;
  this->columnCompositeInstruction_Id->Unique = true;
}

inline NewDataSet::CompositeInstructionRow ^
    NewDataSet::CompositeInstructionDataTable::NewCompositeInstructionRow() {
  return (
      cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::CompositeInstructionDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::CompositeInstructionRow(builder));
}

inline ::System::Type ^
    NewDataSet::CompositeInstructionDataTable::GetRowType() {
  return NewDataSet::CompositeInstructionRow::typeid;
}

inline ::System::Void NewDataSet::CompositeInstructionDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->CompositeInstructionRowChanged(
        this,
        (gcnew NewDataSet::CompositeInstructionRowChangeEvent(
            (cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(e->Row)),
            e->Action)));
  }
}

inline ::System::Void NewDataSet::CompositeInstructionDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->CompositeInstructionRowChanging(
        this,
        (gcnew NewDataSet::CompositeInstructionRowChangeEvent(
            (cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(e->Row)),
            e->Action)));
  }
}

inline ::System::Void NewDataSet::CompositeInstructionDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->CompositeInstructionRowDeleted(
        this,
        (gcnew NewDataSet::CompositeInstructionRowChangeEvent(
            (cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(e->Row)),
            e->Action)));
  }
}

inline ::System::Void NewDataSet::CompositeInstructionDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->CompositeInstructionRowDeleting(
        this,
        (gcnew NewDataSet::CompositeInstructionRowChangeEvent(
            (cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(e->Row)),
            e->Action)));
  }
}

inline ::System::Void
NewDataSet::CompositeInstructionDataTable::RemoveCompositeInstructionRow(
    NewDataSet::CompositeInstructionRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::CompositeInstructionDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"CompositeInstructionDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::GeometryDataTable::GeometryDataTable() {
  this->TableName = L"Geometry";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::GeometryDataTable::GeometryDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::GeometryDataTable::GeometryDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::GeometryDataTable::Geometry_IdColumn::get() {
  return this->columnGeometry_Id;
}

inline ::System::Data::DataColumn ^
    NewDataSet::GeometryDataTable::CompositeInstruction_IdColumn::get() {
  return this->columnCompositeInstruction_Id;
}

inline ::System::Int32 NewDataSet::GeometryDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::GeometryRow ^
    NewDataSet::GeometryDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::GeometryRow ^>(this->Rows[index]));
}

inline ::System::Void
NewDataSet::GeometryDataTable::AddGeometryRow(NewDataSet::GeometryRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::GeometryRow ^
    NewDataSet::GeometryDataTable::AddGeometryRow(
        NewDataSet::CompositeInstructionRow ^
        parentCompositeInstructionRowByCompositeInstruction_Geometry) {
  NewDataSet::GeometryRow ^ rowGeometryRow =
      (cli::safe_cast<NewDataSet::GeometryRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(2){nullptr, nullptr};
  if (parentCompositeInstructionRowByCompositeInstruction_Geometry != nullptr) {
    columnValuesArray[1] =
        parentCompositeInstructionRowByCompositeInstruction_Geometry[2];
  }
  rowGeometryRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowGeometryRow);
  return rowGeometryRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::GeometryDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::GeometryDataTable::Clone() {
  NewDataSet::GeometryDataTable ^ cln =
      (cli::safe_cast<NewDataSet::GeometryDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::GeometryDataTable::CreateInstance() {
  return (gcnew NewDataSet::GeometryDataTable());
}

inline ::System::Void NewDataSet::GeometryDataTable::InitVars() {
  this->columnGeometry_Id = __super::Columns[L"Geometry_Id"];
  this->columnCompositeInstruction_Id =
      __super::Columns[L"CompositeInstruction_Id"];
}

inline ::System::Void NewDataSet::GeometryDataTable::InitClass() {
  this->columnGeometry_Id = (gcnew::System::Data::DataColumn(
      L"Geometry_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnGeometry_Id);
  this->columnCompositeInstruction_Id = (gcnew::System::Data::DataColumn(
      L"CompositeInstruction_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnCompositeInstruction_Id);
  this->Constraints->Add((gcnew::System::Data::UniqueConstraint(
      L"Constraint1",
      gcnew cli::array<::System::Data::DataColumn ^>(1){
          this->columnGeometry_Id},
      true)));
  this->columnGeometry_Id->AutoIncrement = true;
  this->columnGeometry_Id->AllowDBNull = false;
  this->columnGeometry_Id->Unique = true;
}

inline NewDataSet::GeometryRow ^
    NewDataSet::GeometryDataTable::NewGeometryRow() {
  return (cli::safe_cast<NewDataSet::GeometryRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::GeometryDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::GeometryRow(builder));
}

inline ::System::Type ^ NewDataSet::GeometryDataTable::GetRowType() {
  return NewDataSet::GeometryRow::typeid;
}

inline ::System::Void NewDataSet::GeometryDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->GeometryRowChanged(
        this,
        (gcnew NewDataSet::GeometryRowChangeEvent(
            (cli::safe_cast<NewDataSet::GeometryRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::GeometryDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->GeometryRowChanging(
        this,
        (gcnew NewDataSet::GeometryRowChangeEvent(
            (cli::safe_cast<NewDataSet::GeometryRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::GeometryDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->GeometryRowDeleted(
        this,
        (gcnew NewDataSet::GeometryRowChangeEvent(
            (cli::safe_cast<NewDataSet::GeometryRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::GeometryDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->GeometryRowDeleting(
        this,
        (gcnew NewDataSet::GeometryRowChangeEvent(
            (cli::safe_cast<NewDataSet::GeometryRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::GeometryDataTable::RemoveGeometryRow(
    NewDataSet::GeometryRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::GeometryDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"GeometryDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::XDimensionDataTable::XDimensionDataTable() {
  this->TableName = L"XDimension";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::XDimensionDataTable::XDimensionDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::XDimensionDataTable::XDimensionDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::XDimensionDataTable::RefDimensionIdColumn::get() {
  return this->columnRefDimensionId;
}

inline ::System::Data::DataColumn ^
    NewDataSet::XDimensionDataTable::Geometry_IdColumn::get() {
  return this->columnGeometry_Id;
}

inline ::System::Int32 NewDataSet::XDimensionDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::XDimensionRow ^
    NewDataSet::XDimensionDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::XDimensionRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::XDimensionDataTable::AddXDimensionRow(
    NewDataSet::XDimensionRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::XDimensionRow ^
    NewDataSet::XDimensionDataTable::AddXDimensionRow(
        System::Int64 RefDimensionId,
        NewDataSet::GeometryRow ^ parentGeometryRowByGeometry_XDimension) {
  NewDataSet::XDimensionRow ^ rowXDimensionRow =
      (cli::safe_cast<NewDataSet::XDimensionRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(2){RefDimensionId, nullptr};
  if (parentGeometryRowByGeometry_XDimension != nullptr) {
    columnValuesArray[1] = parentGeometryRowByGeometry_XDimension[0];
  }
  rowXDimensionRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowXDimensionRow);
  return rowXDimensionRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::XDimensionDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::XDimensionDataTable::Clone() {
  NewDataSet::XDimensionDataTable ^ cln =
      (cli::safe_cast<NewDataSet::XDimensionDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::XDimensionDataTable::CreateInstance() {
  return (gcnew NewDataSet::XDimensionDataTable());
}

inline ::System::Void NewDataSet::XDimensionDataTable::InitVars() {
  this->columnRefDimensionId = __super::Columns[L"RefDimensionId"];
  this->columnGeometry_Id = __super::Columns[L"Geometry_Id"];
}

inline ::System::Void NewDataSet::XDimensionDataTable::InitClass() {
  this->columnRefDimensionId = (gcnew::System::Data::DataColumn(
      L"RefDimensionId", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnRefDimensionId);
  this->columnGeometry_Id = (gcnew::System::Data::DataColumn(
      L"Geometry_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnGeometry_Id);
}

inline NewDataSet::XDimensionRow ^
    NewDataSet::XDimensionDataTable::NewXDimensionRow() {
  return (cli::safe_cast<NewDataSet::XDimensionRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::XDimensionDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::XDimensionRow(builder));
}

inline ::System::Type ^ NewDataSet::XDimensionDataTable::GetRowType() {
  return NewDataSet::XDimensionRow::typeid;
}

inline ::System::Void NewDataSet::XDimensionDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->XDimensionRowChanged(
        this,
        (gcnew NewDataSet::XDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::XDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::XDimensionDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->XDimensionRowChanging(
        this,
        (gcnew NewDataSet::XDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::XDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::XDimensionDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->XDimensionRowDeleted(
        this,
        (gcnew NewDataSet::XDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::XDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::XDimensionDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->XDimensionRowDeleting(
        this,
        (gcnew NewDataSet::XDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::XDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::XDimensionDataTable::RemoveXDimensionRow(
    NewDataSet::XDimensionRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::XDimensionDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"XDimensionDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::YDimensionDataTable::YDimensionDataTable() {
  this->TableName = L"YDimension";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::YDimensionDataTable::YDimensionDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::YDimensionDataTable::YDimensionDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::YDimensionDataTable::RefDimensionIdColumn::get() {
  return this->columnRefDimensionId;
}

inline ::System::Data::DataColumn ^
    NewDataSet::YDimensionDataTable::Geometry_IdColumn::get() {
  return this->columnGeometry_Id;
}

inline ::System::Int32 NewDataSet::YDimensionDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::YDimensionRow ^
    NewDataSet::YDimensionDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::YDimensionRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::YDimensionDataTable::AddYDimensionRow(
    NewDataSet::YDimensionRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::YDimensionRow ^
    NewDataSet::YDimensionDataTable::AddYDimensionRow(
        System::Int64 RefDimensionId,
        NewDataSet::GeometryRow ^ parentGeometryRowByGeometry_YDimension) {
  NewDataSet::YDimensionRow ^ rowYDimensionRow =
      (cli::safe_cast<NewDataSet::YDimensionRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(2){RefDimensionId, nullptr};
  if (parentGeometryRowByGeometry_YDimension != nullptr) {
    columnValuesArray[1] = parentGeometryRowByGeometry_YDimension[0];
  }
  rowYDimensionRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowYDimensionRow);
  return rowYDimensionRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::YDimensionDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::YDimensionDataTable::Clone() {
  NewDataSet::YDimensionDataTable ^ cln =
      (cli::safe_cast<NewDataSet::YDimensionDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::YDimensionDataTable::CreateInstance() {
  return (gcnew NewDataSet::YDimensionDataTable());
}

inline ::System::Void NewDataSet::YDimensionDataTable::InitVars() {
  this->columnRefDimensionId = __super::Columns[L"RefDimensionId"];
  this->columnGeometry_Id = __super::Columns[L"Geometry_Id"];
}

inline ::System::Void NewDataSet::YDimensionDataTable::InitClass() {
  this->columnRefDimensionId = (gcnew::System::Data::DataColumn(
      L"RefDimensionId", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnRefDimensionId);
  this->columnGeometry_Id = (gcnew::System::Data::DataColumn(
      L"Geometry_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnGeometry_Id);
}

inline NewDataSet::YDimensionRow ^
    NewDataSet::YDimensionDataTable::NewYDimensionRow() {
  return (cli::safe_cast<NewDataSet::YDimensionRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::YDimensionDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::YDimensionRow(builder));
}

inline ::System::Type ^ NewDataSet::YDimensionDataTable::GetRowType() {
  return NewDataSet::YDimensionRow::typeid;
}

inline ::System::Void NewDataSet::YDimensionDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->YDimensionRowChanged(
        this,
        (gcnew NewDataSet::YDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::YDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::YDimensionDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->YDimensionRowChanging(
        this,
        (gcnew NewDataSet::YDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::YDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::YDimensionDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->YDimensionRowDeleted(
        this,
        (gcnew NewDataSet::YDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::YDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::YDimensionDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->YDimensionRowDeleting(
        this,
        (gcnew NewDataSet::YDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::YDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::YDimensionDataTable::RemoveYDimensionRow(
    NewDataSet::YDimensionRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::YDimensionDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"YDimensionDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::ZDimensionDataTable::ZDimensionDataTable() {
  this->TableName = L"ZDimension";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::ZDimensionDataTable::ZDimensionDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::ZDimensionDataTable::ZDimensionDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::ZDimensionDataTable::RefDimensionIdColumn::get() {
  return this->columnRefDimensionId;
}

inline ::System::Data::DataColumn ^
    NewDataSet::ZDimensionDataTable::Geometry_IdColumn::get() {
  return this->columnGeometry_Id;
}

inline ::System::Int32 NewDataSet::ZDimensionDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::ZDimensionRow ^
    NewDataSet::ZDimensionDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::ZDimensionRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::ZDimensionDataTable::AddZDimensionRow(
    NewDataSet::ZDimensionRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::ZDimensionRow ^
    NewDataSet::ZDimensionDataTable::AddZDimensionRow(
        System::Int64 RefDimensionId,
        NewDataSet::GeometryRow ^ parentGeometryRowByGeometry_ZDimension) {
  NewDataSet::ZDimensionRow ^ rowZDimensionRow =
      (cli::safe_cast<NewDataSet::ZDimensionRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(2){RefDimensionId, nullptr};
  if (parentGeometryRowByGeometry_ZDimension != nullptr) {
    columnValuesArray[1] = parentGeometryRowByGeometry_ZDimension[0];
  }
  rowZDimensionRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowZDimensionRow);
  return rowZDimensionRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::ZDimensionDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::ZDimensionDataTable::Clone() {
  NewDataSet::ZDimensionDataTable ^ cln =
      (cli::safe_cast<NewDataSet::ZDimensionDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::ZDimensionDataTable::CreateInstance() {
  return (gcnew NewDataSet::ZDimensionDataTable());
}

inline ::System::Void NewDataSet::ZDimensionDataTable::InitVars() {
  this->columnRefDimensionId = __super::Columns[L"RefDimensionId"];
  this->columnGeometry_Id = __super::Columns[L"Geometry_Id"];
}

inline ::System::Void NewDataSet::ZDimensionDataTable::InitClass() {
  this->columnRefDimensionId = (gcnew::System::Data::DataColumn(
      L"RefDimensionId", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnRefDimensionId);
  this->columnGeometry_Id = (gcnew::System::Data::DataColumn(
      L"Geometry_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnGeometry_Id);
}

inline NewDataSet::ZDimensionRow ^
    NewDataSet::ZDimensionDataTable::NewZDimensionRow() {
  return (cli::safe_cast<NewDataSet::ZDimensionRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::ZDimensionDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::ZDimensionRow(builder));
}

inline ::System::Type ^ NewDataSet::ZDimensionDataTable::GetRowType() {
  return NewDataSet::ZDimensionRow::typeid;
}

inline ::System::Void NewDataSet::ZDimensionDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->ZDimensionRowChanged(
        this,
        (gcnew NewDataSet::ZDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::ZDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ZDimensionDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->ZDimensionRowChanging(
        this,
        (gcnew NewDataSet::ZDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::ZDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ZDimensionDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->ZDimensionRowDeleted(
        this,
        (gcnew NewDataSet::ZDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::ZDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ZDimensionDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->ZDimensionRowDeleting(
        this,
        (gcnew NewDataSet::ZDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::ZDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::ZDimensionDataTable::RemoveZDimensionRow(
    NewDataSet::ZDimensionRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::ZDimensionDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"ZDimensionDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::TDimensionDataTable::TDimensionDataTable() {
  this->TableName = L"TDimension";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::TDimensionDataTable::TDimensionDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::TDimensionDataTable::TDimensionDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::TDimensionDataTable::RefDimensionIdColumn::get() {
  return this->columnRefDimensionId;
}

inline ::System::Data::DataColumn ^
    NewDataSet::TDimensionDataTable::Geometry_IdColumn::get() {
  return this->columnGeometry_Id;
}

inline ::System::Int32 NewDataSet::TDimensionDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::TDimensionRow ^
    NewDataSet::TDimensionDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::TDimensionRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::TDimensionDataTable::AddTDimensionRow(
    NewDataSet::TDimensionRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::TDimensionRow ^
    NewDataSet::TDimensionDataTable::AddTDimensionRow(
        System::Int64 RefDimensionId,
        NewDataSet::GeometryRow ^ parentGeometryRowByGeometry_TDimension) {
  NewDataSet::TDimensionRow ^ rowTDimensionRow =
      (cli::safe_cast<NewDataSet::TDimensionRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(2){RefDimensionId, nullptr};
  if (parentGeometryRowByGeometry_TDimension != nullptr) {
    columnValuesArray[1] = parentGeometryRowByGeometry_TDimension[0];
  }
  rowTDimensionRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowTDimensionRow);
  return rowTDimensionRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::TDimensionDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::TDimensionDataTable::Clone() {
  NewDataSet::TDimensionDataTable ^ cln =
      (cli::safe_cast<NewDataSet::TDimensionDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::TDimensionDataTable::CreateInstance() {
  return (gcnew NewDataSet::TDimensionDataTable());
}

inline ::System::Void NewDataSet::TDimensionDataTable::InitVars() {
  this->columnRefDimensionId = __super::Columns[L"RefDimensionId"];
  this->columnGeometry_Id = __super::Columns[L"Geometry_Id"];
}

inline ::System::Void NewDataSet::TDimensionDataTable::InitClass() {
  this->columnRefDimensionId = (gcnew::System::Data::DataColumn(
      L"RefDimensionId", ::System::Int64::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnRefDimensionId);
  this->columnGeometry_Id = (gcnew::System::Data::DataColumn(
      L"Geometry_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnGeometry_Id);
}

inline NewDataSet::TDimensionRow ^
    NewDataSet::TDimensionDataTable::NewTDimensionRow() {
  return (cli::safe_cast<NewDataSet::TDimensionRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::TDimensionDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::TDimensionRow(builder));
}

inline ::System::Type ^ NewDataSet::TDimensionDataTable::GetRowType() {
  return NewDataSet::TDimensionRow::typeid;
}

inline ::System::Void NewDataSet::TDimensionDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->TDimensionRowChanged(
        this,
        (gcnew NewDataSet::TDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::TDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::TDimensionDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->TDimensionRowChanging(
        this,
        (gcnew NewDataSet::TDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::TDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::TDimensionDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->TDimensionRowDeleted(
        this,
        (gcnew NewDataSet::TDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::TDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::TDimensionDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->TDimensionRowDeleting(
        this,
        (gcnew NewDataSet::TDimensionRowChangeEvent(
            (cli::safe_cast<NewDataSet::TDimensionRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::TDimensionDataTable::RemoveTDimensionRow(
    NewDataSet::TDimensionRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::TDimensionDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"TDimensionDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::OperationDataTable::OperationDataTable() {
  this->TableName = L"Operation";
  this->BeginInit();
  this->InitClass();
  this->EndInit();
}

inline NewDataSet::OperationDataTable::OperationDataTable(
    ::System::Data::DataTable ^ table) {
  this->TableName = table->TableName;
  if (table->CaseSensitive != table->DataSet->CaseSensitive) {
    this->CaseSensitive = table->CaseSensitive;
  }
  if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
    this->Locale = table->Locale;
  }
  if (table->Namespace != table->DataSet->Namespace) {
    this->Namespace = table->Namespace;
  }
  this->Prefix = table->Prefix;
  this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::OperationDataTable::OperationDataTable(
    ::System::Runtime::Serialization::SerializationInfo ^ info,
    ::System::Runtime::Serialization::StreamingContext context)
    : ::System::Data::DataTable(info, context) {
  this->InitVars();
}

inline ::System::Data::DataColumn ^
    NewDataSet::OperationDataTable::TypeColumn::get() {
  return this->columnType;
}

inline ::System::Data::DataColumn ^
    NewDataSet::OperationDataTable::CompositeInstruction_IdColumn::get() {
  return this->columnCompositeInstruction_Id;
}

inline ::System::Int32 NewDataSet::OperationDataTable::Count::get() {
  return this->Rows->Count;
}

inline NewDataSet::OperationRow ^
    NewDataSet::OperationDataTable::default ::get(::System::Int32 index) {
  return (cli::safe_cast<NewDataSet::OperationRow ^>(this->Rows[index]));
}

inline ::System::Void NewDataSet::OperationDataTable::AddOperationRow(
    NewDataSet::OperationRow ^ row) {
  this->Rows->Add(row);
}

inline NewDataSet::OperationRow ^
    NewDataSet::OperationDataTable::AddOperationRow(
        System::String ^ Type,
        NewDataSet::CompositeInstructionRow ^
            parentCompositeInstructionRowByCompositeInstruction_Operation) {
  NewDataSet::OperationRow ^ rowOperationRow =
      (cli::safe_cast<NewDataSet::OperationRow ^>(this->NewRow()));
  cli::array<::System::Object ^> ^ columnValuesArray =
      gcnew cli::array<::System::Object ^>(2){Type, nullptr};
  if (parentCompositeInstructionRowByCompositeInstruction_Operation !=
      nullptr) {
    columnValuesArray[1] =
        parentCompositeInstructionRowByCompositeInstruction_Operation[2];
  }
  rowOperationRow->ItemArray = columnValuesArray;
  this->Rows->Add(rowOperationRow);
  return rowOperationRow;
}

inline ::System::Collections::IEnumerator ^
    NewDataSet::OperationDataTable::GetEnumerator() {
  return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable ^ NewDataSet::OperationDataTable::Clone() {
  NewDataSet::OperationDataTable ^ cln =
      (cli::safe_cast<NewDataSet::OperationDataTable ^>(__super::Clone()));
  cln->InitVars();
  return cln;
}

inline ::System::Data::DataTable ^
    NewDataSet::OperationDataTable::CreateInstance() {
  return (gcnew NewDataSet::OperationDataTable());
}

inline ::System::Void NewDataSet::OperationDataTable::InitVars() {
  this->columnType = __super::Columns[L"Type"];
  this->columnCompositeInstruction_Id =
      __super::Columns[L"CompositeInstruction_Id"];
}

inline ::System::Void NewDataSet::OperationDataTable::InitClass() {
  this->columnType = (gcnew::System::Data::DataColumn(
      L"Type", ::System::String::typeid, nullptr,
      ::System::Data::MappingType::Element));
  __super::Columns->Add(this->columnType);
  this->columnCompositeInstruction_Id = (gcnew::System::Data::DataColumn(
      L"CompositeInstruction_Id", ::System::Int32::typeid, nullptr,
      ::System::Data::MappingType::Hidden));
  __super::Columns->Add(this->columnCompositeInstruction_Id);
  this->columnType->AllowDBNull = false;
}

inline NewDataSet::OperationRow ^
    NewDataSet::OperationDataTable::NewOperationRow() {
  return (cli::safe_cast<NewDataSet::OperationRow ^>(this->NewRow()));
}

inline ::System::Data::DataRow ^
    NewDataSet::OperationDataTable::NewRowFromBuilder(
        ::System::Data::DataRowBuilder ^ builder) {
  return (gcnew NewDataSet::OperationRow(builder));
}

inline ::System::Type ^ NewDataSet::OperationDataTable::GetRowType() {
  return NewDataSet::OperationRow::typeid;
}

inline ::System::Void NewDataSet::OperationDataTable::OnRowChanged(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanged(e);
  {
    this->OperationRowChanged(
        this,
        (gcnew NewDataSet::OperationRowChangeEvent(
            (cli::safe_cast<NewDataSet::OperationRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::OperationDataTable::OnRowChanging(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowChanging(e);
  {
    this->OperationRowChanging(
        this,
        (gcnew NewDataSet::OperationRowChangeEvent(
            (cli::safe_cast<NewDataSet::OperationRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::OperationDataTable::OnRowDeleted(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleted(e);
  {
    this->OperationRowDeleted(
        this,
        (gcnew NewDataSet::OperationRowChangeEvent(
            (cli::safe_cast<NewDataSet::OperationRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::OperationDataTable::OnRowDeleting(
    ::System::Data::DataRowChangeEventArgs ^ e) {
  __super::OnRowDeleting(e);
  {
    this->OperationRowDeleting(
        this,
        (gcnew NewDataSet::OperationRowChangeEvent(
            (cli::safe_cast<NewDataSet::OperationRow ^>(e->Row)), e->Action)));
  }
}

inline ::System::Void NewDataSet::OperationDataTable::RemoveOperationRow(
    NewDataSet::OperationRow ^ row) {
  this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType ^
    NewDataSet::OperationDataTable::GetTypedTableSchema(
        ::System::Xml::Schema::XmlSchemaSet ^ xs) {
  ::System::Xml::Schema::XmlSchemaComplexType ^ type =
      (gcnew::System::Xml::Schema::XmlSchemaComplexType());
  ::System::Xml::Schema::XmlSchemaSequence ^ sequence =
      (gcnew::System::Xml::Schema::XmlSchemaSequence());
  NewDataSet ^ ds = (gcnew NewDataSet());
  ::System::Xml::Schema::XmlSchemaAny ^ any1 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
  any1->MinOccurs = ::System::Decimal(0);
  any1->MaxOccurs = ::System::Decimal::MaxValue;
  any1->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any1);
  ::System::Xml::Schema::XmlSchemaAny ^ any2 =
      (gcnew::System::Xml::Schema::XmlSchemaAny());
  any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
  any2->MinOccurs = ::System::Decimal(1);
  any2->ProcessContents =
      ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
  sequence->Items->Add(any2);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute1 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute1->Name = L"namespace";
  attribute1->FixedValue = ds->Namespace;
  type->Attributes->Add(attribute1);
  ::System::Xml::Schema::XmlSchemaAttribute ^ attribute2 =
      (gcnew::System::Xml::Schema::XmlSchemaAttribute());
  attribute2->Name = L"tableTypeName";
  attribute2->FixedValue = L"OperationDataTable";
  type->Attributes->Add(attribute2);
  type->Particle = sequence;
  ::System::Xml::Schema::XmlSchema ^ dsSchema = ds->GetSchemaSerializable();
  if (xs->Contains(dsSchema->TargetNamespace)) {
    ::System::IO::MemoryStream ^ s1 = (gcnew::System::IO::MemoryStream());
    ::System::IO::MemoryStream ^ s2 = (gcnew::System::IO::MemoryStream());
    try {
      ::System::Xml::Schema::XmlSchema ^ schema = nullptr;
      dsSchema->Write(s1);
      for (::System::Collections::IEnumerator ^ schemas =
               xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator();
           schemas->MoveNext();) {
        schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema ^>(
            schemas->Current));
        s2->SetLength(0);
        schema->Write(s2);
        if (s1->Length == s2->Length) {
          s1->Position = 0;
          s2->Position = 0;
          for (; ((s1->Position != s1->Length) &&
                  (s1->ReadByte() == s2->ReadByte()));) {
            ;
          }
          if (s1->Position == s1->Length) {
            return type;
          }
        }
      }
    } finally {
      if (s1 != nullptr) {
        s1->Close();
      }
      if (s2 != nullptr) {
        s2->Close();
      }
    }
  }
  xs->Add(dsSchema);
  return type;
}

inline NewDataSet::FunctionRow::FunctionRow(::System::Data::DataRowBuilder ^ rb)
    : ::System::Data::DataRow(rb) {
  this->tableFunction =
      (cli::safe_cast<NewDataSet::FunctionDataTable ^>(this->Table));
}

inline System::String ^ NewDataSet::FunctionRow::Name::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableFunction->NameColumn]));
}
inline System::Void NewDataSet::FunctionRow::Name::set(System::String ^ value) {
  this[this->tableFunction->NameColumn] = value;
}

inline System::Int32 NewDataSet::FunctionRow::Function_Id::get() {
  return (cli::safe_cast<::System::Int32>(
      this[this->tableFunction->Function_IdColumn]));
}
inline System::Void
NewDataSet::FunctionRow::Function_Id::set(System::Int32 value) {
  this[this->tableFunction->Function_IdColumn] = value;
}

inline System::Int32 NewDataSet::FunctionRow::Function_Id_0::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableFunction->Function_Id_0Column]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Function_Id_0\' in table \'Function\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::FunctionRow::Function_Id_0::set(System::Int32 value) {
  this[this->tableFunction->Function_Id_0Column] = value;
}

inline System::Int32 NewDataSet::FunctionRow::CompositeInstruction_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableFunction->CompositeInstruction_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'CompositeInstruction_Id\' in table "
        L"\'Function\' is DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::FunctionRow::CompositeInstruction_Id::set(System::Int32 value) {
  this[this->tableFunction->CompositeInstruction_IdColumn] = value;
}

inline NewDataSet::FunctionRow ^
    NewDataSet::FunctionRow::FunctionRowParent::get() {
  return (cli::safe_cast<NewDataSet::FunctionRow ^>(
      this->GetParentRow(this->Table->ParentRelations[L"Function_Function"])));
}
inline System::Void NewDataSet::FunctionRow::FunctionRowParent::set(
    NewDataSet::FunctionRow ^ value) {
  this->SetParentRow(value, this->Table->ParentRelations[L"Function_Function"]);
}

inline NewDataSet::CompositeInstructionRow ^
    NewDataSet::FunctionRow::CompositeInstructionRow::get() {
  return (
      cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(this->GetParentRow(
          this->Table->ParentRelations[L"CompositeInstruction_Function"])));
}
inline System::Void NewDataSet::FunctionRow::CompositeInstructionRow::set(
    NewDataSet::CompositeInstructionRow ^ value) {
  this->SetParentRow(
      value, this->Table->ParentRelations[L"CompositeInstruction_Function"]);
}

inline ::System::Boolean NewDataSet::FunctionRow::IsFunction_Id_0Null() {
  return this->IsNull(this->tableFunction->Function_Id_0Column);
}

inline ::System::Void NewDataSet::FunctionRow::SetFunction_Id_0Null() {
  this[this->tableFunction->Function_Id_0Column] = ::System::Convert::DBNull;
}

inline ::System::Boolean
NewDataSet::FunctionRow::IsCompositeInstruction_IdNull() {
  return this->IsNull(this->tableFunction->CompositeInstruction_IdColumn);
}

inline ::System::Void
NewDataSet::FunctionRow::SetCompositeInstruction_IdNull() {
  this[this->tableFunction->CompositeInstruction_IdColumn] =
      ::System::Convert::DBNull;
}

inline cli::array<NewDataSet::ParameterListRow ^> ^
    NewDataSet::FunctionRow::GetParameterListRows() {
  if (this->Table->ChildRelations[L"Function_ParameterList"] == nullptr) {
    return gcnew cli::array<NewDataSet::ParameterListRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::ParameterListRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Function_ParameterList"])));
  }
}

inline cli::array<NewDataSet::FunctionRow ^> ^
    NewDataSet::FunctionRow::GetFunctionRows() {
  if (this->Table->ChildRelations[L"Function_Function"] == nullptr) {
    return gcnew cli::array<NewDataSet::FunctionRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::FunctionRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Function_Function"])));
  }
}

inline NewDataSet::ParameterListRow::ParameterListRow(
    ::System::Data::DataRowBuilder ^ rb)
    : ::System::Data::DataRow(rb) {
  this->tableParameterList =
      (cli::safe_cast<NewDataSet::ParameterListDataTable ^>(this->Table));
}

inline System::Int32 NewDataSet::ParameterListRow::ParameterList_Id::get() {
  return (cli::safe_cast<::System::Int32>(
      this[this->tableParameterList->ParameterList_IdColumn]));
}
inline System::Void
NewDataSet::ParameterListRow::ParameterList_Id::set(System::Int32 value) {
  this[this->tableParameterList->ParameterList_IdColumn] = value;
}

inline System::Int32 NewDataSet::ParameterListRow::Function_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableParameterList->Function_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Function_Id\' in table \'ParameterList\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::ParameterListRow::Function_Id::set(System::Int32 value) {
  this[this->tableParameterList->Function_IdColumn] = value;
}

inline NewDataSet::FunctionRow ^
    NewDataSet::ParameterListRow::FunctionRow::get() {
  return (cli::safe_cast<NewDataSet::FunctionRow ^>(this->GetParentRow(
      this->Table->ParentRelations[L"Function_ParameterList"])));
}
inline System::Void NewDataSet::ParameterListRow::FunctionRow::set(
    NewDataSet::FunctionRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"Function_ParameterList"]);
}

inline ::System::Boolean NewDataSet::ParameterListRow::IsFunction_IdNull() {
  return this->IsNull(this->tableParameterList->Function_IdColumn);
}

inline ::System::Void NewDataSet::ParameterListRow::SetFunction_IdNull() {
  this[this->tableParameterList->Function_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array<NewDataSet::ParameterRow ^> ^
    NewDataSet::ParameterListRow::GetParameterRows() {
  if (this->Table->ChildRelations[L"ParameterList_Parameter"] == nullptr) {
    return gcnew cli::array<NewDataSet::ParameterRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::ParameterRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"ParameterList_Parameter"])));
  }
}

inline NewDataSet::ParameterRow::ParameterRow(::System::Data::DataRowBuilder ^
                                              rb)
    : ::System::Data::DataRow(rb) {
  this->tableParameter =
      (cli::safe_cast<NewDataSet::ParameterDataTable ^>(this->Table));
}

inline System::String ^ NewDataSet::ParameterRow::Name::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableParameter->NameColumn]));
}
inline System::Void NewDataSet::ParameterRow::Name::set(System::String ^
                                                        value) {
  this[this->tableParameter->NameColumn] = value;
}

inline System::String ^ NewDataSet::ParameterRow::Type::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableParameter->TypeColumn]));
}
inline System::Void NewDataSet::ParameterRow::Type::set(System::String ^
                                                        value) {
  this[this->tableParameter->TypeColumn] = value;
}

inline System::String ^ NewDataSet::ParameterRow::Value::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableParameter->ValueColumn]));
}
inline System::Void NewDataSet::ParameterRow::Value::set(System::String ^
                                                         value) {
  this[this->tableParameter->ValueColumn] = value;
}

inline System::Int32 NewDataSet::ParameterRow::ParameterList_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableParameter->ParameterList_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'ParameterList_Id\' in table \'Parameter\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::ParameterRow::ParameterList_Id::set(System::Int32 value) {
  this[this->tableParameter->ParameterList_IdColumn] = value;
}

inline NewDataSet::ParameterListRow ^
    NewDataSet::ParameterRow::ParameterListRow::get() {
  return (cli::safe_cast<NewDataSet::ParameterListRow ^>(this->GetParentRow(
      this->Table->ParentRelations[L"ParameterList_Parameter"])));
}
inline System::Void NewDataSet::ParameterRow::ParameterListRow::set(
    NewDataSet::ParameterListRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"ParameterList_Parameter"]);
}

inline ::System::Boolean NewDataSet::ParameterRow::IsParameterList_IdNull() {
  return this->IsNull(this->tableParameter->ParameterList_IdColumn);
}

inline ::System::Void NewDataSet::ParameterRow::SetParameterList_IdNull() {
  this[this->tableParameter->ParameterList_IdColumn] =
      ::System::Convert::DBNull;
}

inline NewDataSet::DimensionRow::DimensionRow(::System::Data::DataRowBuilder ^
                                              rb)
    : ::System::Data::DataRow(rb) {
  this->tableDimension =
      (cli::safe_cast<NewDataSet::DimensionDataTable ^>(this->Table));
}

inline System::Int64 NewDataSet::DimensionRow::ID::get() {
  return (
      cli::safe_cast<::System::Int64>(this[this->tableDimension->IDColumn]));
}
inline System::Void NewDataSet::DimensionRow::ID::set(System::Int64 value) {
  this[this->tableDimension->IDColumn] = value;
}

inline System::String ^ NewDataSet::DimensionRow::Name::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableDimension->NameColumn]));
}
inline System::Void NewDataSet::DimensionRow::Name::set(System::String ^
                                                        value) {
  this[this->tableDimension->NameColumn] = value;
}

inline System::Int64 NewDataSet::DimensionRow::UpperBounds::get() {
  return (cli::safe_cast<::System::Int64>(
      this[this->tableDimension->UpperBoundsColumn]));
}
inline System::Void
NewDataSet::DimensionRow::UpperBounds::set(System::Int64 value) {
  this[this->tableDimension->UpperBoundsColumn] = value;
}

inline System::Int64 NewDataSet::DimensionRow::LowerBounds::get() {
  return (cli::safe_cast<::System::Int64>(
      this[this->tableDimension->LowerBoundsColumn]));
}
inline System::Void
NewDataSet::DimensionRow::LowerBounds::set(System::Int64 value) {
  this[this->tableDimension->LowerBoundsColumn] = value;
}

inline System::Int32 NewDataSet::DimensionRow::Dimension_Id::get() {
  return (cli::safe_cast<::System::Int32>(
      this[this->tableDimension->Dimension_IdColumn]));
}
inline System::Void
NewDataSet::DimensionRow::Dimension_Id::set(System::Int32 value) {
  this[this->tableDimension->Dimension_IdColumn] = value;
}

inline System::Int32 NewDataSet::DimensionRow::Geometry_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableDimension->Geometry_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Geometry_Id\' in table \'Dimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::DimensionRow::Geometry_Id::set(System::Int32 value) {
  this[this->tableDimension->Geometry_IdColumn] = value;
}

inline NewDataSet::GeometryRow ^ NewDataSet::DimensionRow::GeometryRow::get() {
  return (cli::safe_cast<NewDataSet::GeometryRow ^>(
      this->GetParentRow(this->Table->ParentRelations[L"Geometry_Dimension"])));
}
inline System::Void
NewDataSet::DimensionRow::GeometryRow::set(NewDataSet::GeometryRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"Geometry_Dimension"]);
}

inline ::System::Boolean NewDataSet::DimensionRow::IsGeometry_IdNull() {
  return this->IsNull(this->tableDimension->Geometry_IdColumn);
}

inline ::System::Void NewDataSet::DimensionRow::SetGeometry_IdNull() {
  this[this->tableDimension->Geometry_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array<NewDataSet::IntegratedRow ^> ^
    NewDataSet::DimensionRow::GetIntegratedRows() {
  if (this->Table->ChildRelations[L"Dimension_Integrated"] == nullptr) {
    return gcnew cli::array<NewDataSet::IntegratedRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::IntegratedRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Dimension_Integrated"])));
  }
}

inline NewDataSet::IntegratedRow::IntegratedRow(::System::Data::DataRowBuilder ^
                                                rb)
    : ::System::Data::DataRow(rb) {
  this->tableIntegrated =
      (cli::safe_cast<NewDataSet::IntegratedDataTable ^>(this->Table));
}

inline System::Int64 NewDataSet::IntegratedRow::UpperLimit::get() {
  return (cli::safe_cast<::System::Int64>(
      this[this->tableIntegrated->UpperLimitColumn]));
}
inline System::Void
NewDataSet::IntegratedRow::UpperLimit::set(System::Int64 value) {
  this[this->tableIntegrated->UpperLimitColumn] = value;
}

inline System::Int64 NewDataSet::IntegratedRow::LowerLimit::get() {
  return (cli::safe_cast<::System::Int64>(
      this[this->tableIntegrated->LowerLimitColumn]));
}
inline System::Void
NewDataSet::IntegratedRow::LowerLimit::set(System::Int64 value) {
  this[this->tableIntegrated->LowerLimitColumn] = value;
}

inline System::Int32 NewDataSet::IntegratedRow::Dimension_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableIntegrated->Dimension_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Dimension_Id\' in table \'Integrated\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::IntegratedRow::Dimension_Id::set(System::Int32 value) {
  this[this->tableIntegrated->Dimension_IdColumn] = value;
}

inline NewDataSet::DimensionRow ^
    NewDataSet::IntegratedRow::DimensionRow::get() {
  return (cli::safe_cast<NewDataSet::DimensionRow ^>(this->GetParentRow(
      this->Table->ParentRelations[L"Dimension_Integrated"])));
}
inline System::Void
NewDataSet::IntegratedRow::DimensionRow::set(NewDataSet::DimensionRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"Dimension_Integrated"]);
}

inline ::System::Boolean NewDataSet::IntegratedRow::IsDimension_IdNull() {
  return this->IsNull(this->tableIntegrated->Dimension_IdColumn);
}

inline ::System::Void NewDataSet::IntegratedRow::SetDimension_IdNull() {
  this[this->tableIntegrated->Dimension_IdColumn] = ::System::Convert::DBNull;
}

inline NewDataSet::CompositeInstructionRow::CompositeInstructionRow(
    ::System::Data::DataRowBuilder ^ rb)
    : ::System::Data::DataRow(rb) {
  this->tableCompositeInstruction =
      (cli::safe_cast<NewDataSet::CompositeInstructionDataTable ^>(
          this->Table));
}

inline System::String ^
    NewDataSet::CompositeInstructionRow::MDWorkspaceName::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableCompositeInstruction->MDWorkspaceNameColumn]));
}
inline System::Void NewDataSet::CompositeInstructionRow::MDWorkspaceName::set(
    System::String ^ value) {
  this[this->tableCompositeInstruction->MDWorkspaceNameColumn] = value;
}

inline System::String ^
    NewDataSet::CompositeInstructionRow::MDWorkspaceLocation::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableCompositeInstruction->MDWorkspaceLocationColumn]));
}
inline System::Void
NewDataSet::CompositeInstructionRow::MDWorkspaceLocation::set(System::String ^
                                                              value) {
  this[this->tableCompositeInstruction->MDWorkspaceLocationColumn] = value;
}

inline System::Int32
NewDataSet::CompositeInstructionRow::CompositeInstruction_Id::get() {
  return (cli::safe_cast<::System::Int32>(
      this[this->tableCompositeInstruction->CompositeInstruction_IdColumn]));
}
inline System::Void
NewDataSet::CompositeInstructionRow::CompositeInstruction_Id::set(
    System::Int32 value) {
  this[this->tableCompositeInstruction->CompositeInstruction_IdColumn] = value;
}

inline cli::array<NewDataSet::GeometryRow ^> ^
    NewDataSet::CompositeInstructionRow::GetGeometryRows() {
  if (this->Table->ChildRelations[L"CompositeInstruction_Geometry"] ==
      nullptr) {
    return gcnew cli::array<NewDataSet::GeometryRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::GeometryRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"CompositeInstruction_Geometry"])));
  }
}

inline cli::array<NewDataSet::OperationRow ^> ^
    NewDataSet::CompositeInstructionRow::GetOperationRows() {
  if (this->Table->ChildRelations[L"CompositeInstruction_Operation"] ==
      nullptr) {
    return gcnew cli::array<NewDataSet::OperationRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::OperationRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"CompositeInstruction_Operation"])));
  }
}

inline cli::array<NewDataSet::FunctionRow ^> ^
    NewDataSet::CompositeInstructionRow::GetFunctionRows() {
  if (this->Table->ChildRelations[L"CompositeInstruction_Function"] ==
      nullptr) {
    return gcnew cli::array<NewDataSet::FunctionRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::FunctionRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"CompositeInstruction_Function"])));
  }
}

inline NewDataSet::GeometryRow::GeometryRow(::System::Data::DataRowBuilder ^ rb)
    : ::System::Data::DataRow(rb) {
  this->tableGeometry =
      (cli::safe_cast<NewDataSet::GeometryDataTable ^>(this->Table));
}

inline System::Int32 NewDataSet::GeometryRow::Geometry_Id::get() {
  return (cli::safe_cast<::System::Int32>(
      this[this->tableGeometry->Geometry_IdColumn]));
}
inline System::Void
NewDataSet::GeometryRow::Geometry_Id::set(System::Int32 value) {
  this[this->tableGeometry->Geometry_IdColumn] = value;
}

inline System::Int32 NewDataSet::GeometryRow::CompositeInstruction_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableGeometry->CompositeInstruction_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'CompositeInstruction_Id\' in table "
        L"\'Geometry\' is DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::GeometryRow::CompositeInstruction_Id::set(System::Int32 value) {
  this[this->tableGeometry->CompositeInstruction_IdColumn] = value;
}

inline NewDataSet::CompositeInstructionRow ^
    NewDataSet::GeometryRow::CompositeInstructionRow::get() {
  return (
      cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(this->GetParentRow(
          this->Table->ParentRelations[L"CompositeInstruction_Geometry"])));
}
inline System::Void NewDataSet::GeometryRow::CompositeInstructionRow::set(
    NewDataSet::CompositeInstructionRow ^ value) {
  this->SetParentRow(
      value, this->Table->ParentRelations[L"CompositeInstruction_Geometry"]);
}

inline ::System::Boolean
NewDataSet::GeometryRow::IsCompositeInstruction_IdNull() {
  return this->IsNull(this->tableGeometry->CompositeInstruction_IdColumn);
}

inline ::System::Void
NewDataSet::GeometryRow::SetCompositeInstruction_IdNull() {
  this[this->tableGeometry->CompositeInstruction_IdColumn] =
      ::System::Convert::DBNull;
}

inline cli::array<NewDataSet::DimensionRow ^> ^
    NewDataSet::GeometryRow::GetDimensionRows() {
  if (this->Table->ChildRelations[L"Geometry_Dimension"] == nullptr) {
    return gcnew cli::array<NewDataSet::DimensionRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::DimensionRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Geometry_Dimension"])));
  }
}

inline cli::array<NewDataSet::XDimensionRow ^> ^
    NewDataSet::GeometryRow::GetXDimensionRows() {
  if (this->Table->ChildRelations[L"Geometry_XDimension"] == nullptr) {
    return gcnew cli::array<NewDataSet::XDimensionRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::XDimensionRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Geometry_XDimension"])));
  }
}

inline cli::array<NewDataSet::YDimensionRow ^> ^
    NewDataSet::GeometryRow::GetYDimensionRows() {
  if (this->Table->ChildRelations[L"Geometry_YDimension"] == nullptr) {
    return gcnew cli::array<NewDataSet::YDimensionRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::YDimensionRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Geometry_YDimension"])));
  }
}

inline cli::array<NewDataSet::ZDimensionRow ^> ^
    NewDataSet::GeometryRow::GetZDimensionRows() {
  if (this->Table->ChildRelations[L"Geometry_ZDimension"] == nullptr) {
    return gcnew cli::array<NewDataSet::ZDimensionRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::ZDimensionRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Geometry_ZDimension"])));
  }
}

inline cli::array<NewDataSet::TDimensionRow ^> ^
    NewDataSet::GeometryRow::GetTDimensionRows() {
  if (this->Table->ChildRelations[L"Geometry_TDimension"] == nullptr) {
    return gcnew cli::array<NewDataSet::TDimensionRow ^>(0);
  } else {
    return (cli::safe_cast<cli::array<NewDataSet::TDimensionRow ^> ^>(
        __super::GetChildRows(
            this->Table->ChildRelations[L"Geometry_TDimension"])));
  }
}

inline NewDataSet::XDimensionRow::XDimensionRow(::System::Data::DataRowBuilder ^
                                                rb)
    : ::System::Data::DataRow(rb) {
  this->tableXDimension =
      (cli::safe_cast<NewDataSet::XDimensionDataTable ^>(this->Table));
}

inline System::Int64 NewDataSet::XDimensionRow::RefDimensionId::get() {
  try {
    return (cli::safe_cast<::System::Int64>(
        this[this->tableXDimension->RefDimensionIdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'RefDimensionId\' in table \'XDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::XDimensionRow::RefDimensionId::set(System::Int64 value) {
  this[this->tableXDimension->RefDimensionIdColumn] = value;
}

inline System::Int32 NewDataSet::XDimensionRow::Geometry_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableXDimension->Geometry_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Geometry_Id\' in table \'XDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::XDimensionRow::Geometry_Id::set(System::Int32 value) {
  this[this->tableXDimension->Geometry_IdColumn] = value;
}

inline NewDataSet::GeometryRow ^ NewDataSet::XDimensionRow::GeometryRow::get() {
  return (cli::safe_cast<NewDataSet::GeometryRow ^>(this->GetParentRow(
      this->Table->ParentRelations[L"Geometry_XDimension"])));
}
inline System::Void
NewDataSet::XDimensionRow::GeometryRow::set(NewDataSet::GeometryRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"Geometry_XDimension"]);
}

inline ::System::Boolean NewDataSet::XDimensionRow::IsRefDimensionIdNull() {
  return this->IsNull(this->tableXDimension->RefDimensionIdColumn);
}

inline ::System::Void NewDataSet::XDimensionRow::SetRefDimensionIdNull() {
  this[this->tableXDimension->RefDimensionIdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::XDimensionRow::IsGeometry_IdNull() {
  return this->IsNull(this->tableXDimension->Geometry_IdColumn);
}

inline ::System::Void NewDataSet::XDimensionRow::SetGeometry_IdNull() {
  this[this->tableXDimension->Geometry_IdColumn] = ::System::Convert::DBNull;
}

inline NewDataSet::YDimensionRow::YDimensionRow(::System::Data::DataRowBuilder ^
                                                rb)
    : ::System::Data::DataRow(rb) {
  this->tableYDimension =
      (cli::safe_cast<NewDataSet::YDimensionDataTable ^>(this->Table));
}

inline System::Int64 NewDataSet::YDimensionRow::RefDimensionId::get() {
  try {
    return (cli::safe_cast<::System::Int64>(
        this[this->tableYDimension->RefDimensionIdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'RefDimensionId\' in table \'YDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::YDimensionRow::RefDimensionId::set(System::Int64 value) {
  this[this->tableYDimension->RefDimensionIdColumn] = value;
}

inline System::Int32 NewDataSet::YDimensionRow::Geometry_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableYDimension->Geometry_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Geometry_Id\' in table \'YDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::YDimensionRow::Geometry_Id::set(System::Int32 value) {
  this[this->tableYDimension->Geometry_IdColumn] = value;
}

inline NewDataSet::GeometryRow ^ NewDataSet::YDimensionRow::GeometryRow::get() {
  return (cli::safe_cast<NewDataSet::GeometryRow ^>(this->GetParentRow(
      this->Table->ParentRelations[L"Geometry_YDimension"])));
}
inline System::Void
NewDataSet::YDimensionRow::GeometryRow::set(NewDataSet::GeometryRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"Geometry_YDimension"]);
}

inline ::System::Boolean NewDataSet::YDimensionRow::IsRefDimensionIdNull() {
  return this->IsNull(this->tableYDimension->RefDimensionIdColumn);
}

inline ::System::Void NewDataSet::YDimensionRow::SetRefDimensionIdNull() {
  this[this->tableYDimension->RefDimensionIdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::YDimensionRow::IsGeometry_IdNull() {
  return this->IsNull(this->tableYDimension->Geometry_IdColumn);
}

inline ::System::Void NewDataSet::YDimensionRow::SetGeometry_IdNull() {
  this[this->tableYDimension->Geometry_IdColumn] = ::System::Convert::DBNull;
}

inline NewDataSet::ZDimensionRow::ZDimensionRow(::System::Data::DataRowBuilder ^
                                                rb)
    : ::System::Data::DataRow(rb) {
  this->tableZDimension =
      (cli::safe_cast<NewDataSet::ZDimensionDataTable ^>(this->Table));
}

inline System::Int64 NewDataSet::ZDimensionRow::RefDimensionId::get() {
  try {
    return (cli::safe_cast<::System::Int64>(
        this[this->tableZDimension->RefDimensionIdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'RefDimensionId\' in table \'ZDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::ZDimensionRow::RefDimensionId::set(System::Int64 value) {
  this[this->tableZDimension->RefDimensionIdColumn] = value;
}

inline System::Int32 NewDataSet::ZDimensionRow::Geometry_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableZDimension->Geometry_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Geometry_Id\' in table \'ZDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::ZDimensionRow::Geometry_Id::set(System::Int32 value) {
  this[this->tableZDimension->Geometry_IdColumn] = value;
}

inline NewDataSet::GeometryRow ^ NewDataSet::ZDimensionRow::GeometryRow::get() {
  return (cli::safe_cast<NewDataSet::GeometryRow ^>(this->GetParentRow(
      this->Table->ParentRelations[L"Geometry_ZDimension"])));
}
inline System::Void
NewDataSet::ZDimensionRow::GeometryRow::set(NewDataSet::GeometryRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"Geometry_ZDimension"]);
}

inline ::System::Boolean NewDataSet::ZDimensionRow::IsRefDimensionIdNull() {
  return this->IsNull(this->tableZDimension->RefDimensionIdColumn);
}

inline ::System::Void NewDataSet::ZDimensionRow::SetRefDimensionIdNull() {
  this[this->tableZDimension->RefDimensionIdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::ZDimensionRow::IsGeometry_IdNull() {
  return this->IsNull(this->tableZDimension->Geometry_IdColumn);
}

inline ::System::Void NewDataSet::ZDimensionRow::SetGeometry_IdNull() {
  this[this->tableZDimension->Geometry_IdColumn] = ::System::Convert::DBNull;
}

inline NewDataSet::TDimensionRow::TDimensionRow(::System::Data::DataRowBuilder ^
                                                rb)
    : ::System::Data::DataRow(rb) {
  this->tableTDimension =
      (cli::safe_cast<NewDataSet::TDimensionDataTable ^>(this->Table));
}

inline System::Int64 NewDataSet::TDimensionRow::RefDimensionId::get() {
  try {
    return (cli::safe_cast<::System::Int64>(
        this[this->tableTDimension->RefDimensionIdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'RefDimensionId\' in table \'TDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::TDimensionRow::RefDimensionId::set(System::Int64 value) {
  this[this->tableTDimension->RefDimensionIdColumn] = value;
}

inline System::Int32 NewDataSet::TDimensionRow::Geometry_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableTDimension->Geometry_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'Geometry_Id\' in table \'TDimension\' is "
        L"DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::TDimensionRow::Geometry_Id::set(System::Int32 value) {
  this[this->tableTDimension->Geometry_IdColumn] = value;
}

inline NewDataSet::GeometryRow ^ NewDataSet::TDimensionRow::GeometryRow::get() {
  return (cli::safe_cast<NewDataSet::GeometryRow ^>(this->GetParentRow(
      this->Table->ParentRelations[L"Geometry_TDimension"])));
}
inline System::Void
NewDataSet::TDimensionRow::GeometryRow::set(NewDataSet::GeometryRow ^ value) {
  this->SetParentRow(value,
                     this->Table->ParentRelations[L"Geometry_TDimension"]);
}

inline ::System::Boolean NewDataSet::TDimensionRow::IsRefDimensionIdNull() {
  return this->IsNull(this->tableTDimension->RefDimensionIdColumn);
}

inline ::System::Void NewDataSet::TDimensionRow::SetRefDimensionIdNull() {
  this[this->tableTDimension->RefDimensionIdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::TDimensionRow::IsGeometry_IdNull() {
  return this->IsNull(this->tableTDimension->Geometry_IdColumn);
}

inline ::System::Void NewDataSet::TDimensionRow::SetGeometry_IdNull() {
  this[this->tableTDimension->Geometry_IdColumn] = ::System::Convert::DBNull;
}

inline NewDataSet::OperationRow::OperationRow(::System::Data::DataRowBuilder ^
                                              rb)
    : ::System::Data::DataRow(rb) {
  this->tableOperation =
      (cli::safe_cast<NewDataSet::OperationDataTable ^>(this->Table));
}

inline System::String ^ NewDataSet::OperationRow::Type::get() {
  return (cli::safe_cast<::System::String ^>(
      this[this->tableOperation->TypeColumn]));
}
inline System::Void NewDataSet::OperationRow::Type::set(System::String ^
                                                        value) {
  this[this->tableOperation->TypeColumn] = value;
}

inline System::Int32 NewDataSet::OperationRow::CompositeInstruction_Id::get() {
  try {
    return (cli::safe_cast<::System::Int32>(
        this[this->tableOperation->CompositeInstruction_IdColumn]));
  } catch (::System::InvalidCastException ^ e) {
    throw(gcnew::System::Data::StrongTypingException(
        L"The value for column \'CompositeInstruction_Id\' in table "
        L"\'Operation\' is DBNull.",
        e));
  }
}
inline System::Void
NewDataSet::OperationRow::CompositeInstruction_Id::set(System::Int32 value) {
  this[this->tableOperation->CompositeInstruction_IdColumn] = value;
}

inline NewDataSet::CompositeInstructionRow ^
    NewDataSet::OperationRow::CompositeInstructionRow::get() {
  return (
      cli::safe_cast<NewDataSet::CompositeInstructionRow ^>(this->GetParentRow(
          this->Table->ParentRelations[L"CompositeInstruction_Operation"])));
}
inline System::Void NewDataSet::OperationRow::CompositeInstructionRow::set(
    NewDataSet::CompositeInstructionRow ^ value) {
  this->SetParentRow(
      value, this->Table->ParentRelations[L"CompositeInstruction_Operation"]);
}

inline ::System::Boolean
NewDataSet::OperationRow::IsCompositeInstruction_IdNull() {
  return this->IsNull(this->tableOperation->CompositeInstruction_IdColumn);
}

inline ::System::Void
NewDataSet::OperationRow::SetCompositeInstruction_IdNull() {
  this[this->tableOperation->CompositeInstruction_IdColumn] =
      ::System::Convert::DBNull;
}

inline NewDataSet::FunctionRowChangeEvent::FunctionRowChangeEvent(
    NewDataSet::FunctionRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::FunctionRow ^
    NewDataSet::FunctionRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::FunctionRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::ParameterListRowChangeEvent::ParameterListRowChangeEvent(
    NewDataSet::ParameterListRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::ParameterListRow ^
    NewDataSet::ParameterListRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::ParameterListRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::ParameterRowChangeEvent::ParameterRowChangeEvent(
    NewDataSet::ParameterRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::ParameterRow ^
    NewDataSet::ParameterRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::ParameterRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::DimensionRowChangeEvent::DimensionRowChangeEvent(
    NewDataSet::DimensionRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::DimensionRow ^
    NewDataSet::DimensionRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::DimensionRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::IntegratedRowChangeEvent::IntegratedRowChangeEvent(
    NewDataSet::IntegratedRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::IntegratedRow ^
    NewDataSet::IntegratedRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::IntegratedRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::CompositeInstructionRowChangeEvent::
    CompositeInstructionRowChangeEvent(NewDataSet::CompositeInstructionRow ^
                                           row,
                                       ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::CompositeInstructionRow ^
    NewDataSet::CompositeInstructionRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::CompositeInstructionRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::GeometryRowChangeEvent::GeometryRowChangeEvent(
    NewDataSet::GeometryRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::GeometryRow ^
    NewDataSet::GeometryRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::GeometryRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::XDimensionRowChangeEvent::XDimensionRowChangeEvent(
    NewDataSet::XDimensionRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::XDimensionRow ^
    NewDataSet::XDimensionRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::XDimensionRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::YDimensionRowChangeEvent::YDimensionRowChangeEvent(
    NewDataSet::YDimensionRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::YDimensionRow ^
    NewDataSet::YDimensionRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::YDimensionRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::ZDimensionRowChangeEvent::ZDimensionRowChangeEvent(
    NewDataSet::ZDimensionRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::ZDimensionRow ^
    NewDataSet::ZDimensionRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::ZDimensionRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::TDimensionRowChangeEvent::TDimensionRowChangeEvent(
    NewDataSet::TDimensionRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::TDimensionRow ^
    NewDataSet::TDimensionRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::TDimensionRowChangeEvent::Action::get() {
  return this->eventAction;
}

inline NewDataSet::OperationRowChangeEvent::OperationRowChangeEvent(
    NewDataSet::OperationRow ^ row, ::System::Data::DataRowAction action) {
  this->eventRow = row;
  this->eventAction = action;
}

inline NewDataSet::OperationRow ^
    NewDataSet::OperationRowChangeEvent::Row::get() {
  return this->eventRow;
}

inline ::System::Data::DataRowAction
NewDataSet::OperationRowChangeEvent::Action::get() {
  return this->eventAction;
}
