#include "MantidLegacyNexus/NeXusFile.hpp"
#include "MantidLegacyNexus/napi.h"
#include <filesystem>
#include <iostream>

namespace LegacyNexusTest {
void print_data(const std::string &prefix, std::ostream &stream, const void *data, const NXnumtype type,
                const int num) {
  stream << prefix << " ";
  for (int i = 0; i < num; i++) {
    switch (type) {
    case NXnumtype::CHAR:
      stream << (static_cast<const char *>(data))[i];
      break;

    case NXnumtype::INT8:
      stream << (static_cast<const unsigned char *>(data))[i];
      break;

    case NXnumtype::INT16:
      stream << (static_cast<const short *>(data))[i];
      break;

    case NXnumtype::INT32:
      stream << (static_cast<const int *>(data))[i];
      break;

    case NXnumtype::INT64:
      stream << static_cast<const int64_t *>(data)[i];
      break;

    case NXnumtype::UINT64:
      stream << static_cast<const uint64_t *>(data)[i];
      break;

    case NXnumtype::FLOAT32:
      stream << (static_cast<const float *>(data))[i];
      break;

    case NXnumtype::FLOAT64:
      stream << (static_cast<const double *>(data))[i];
      break;

    default:
      stream << "print_data: invalid type";
      break;
    }
  }
  stream << "\n";
}

namespace { // anonymous
void putAttr(Mantid::LegacyNexus::File &file, const std::string &dataName, const std::string &attrName,
             const std::string &attrValue) {
  file.openData(dataName);
  file.putAttr(attrName, attrValue);
  file.closeData();
}

/**
 * Does the actual file creation. Many of the fields are identical. The ones that are different are input parameters.
 */
void write_dmc(const std::string &filename, const std::string &start_time, const std::vector<int32_t> &counts,
               const std::vector<double> &two_theta) {
  std::cout << "Creating external file \"" << filename << "\"\n";
  Mantid::LegacyNexus::File file(filename, Mantid::LegacyNexus::NXACC_CREATE5);

  const std::string title("Ga0.94Mn0.04Sb_8mm 2.567A T=4");

  // top level group and fields
  file.makeGroup("entry1", "NXentry", true); // make and open
  file.writeData("start_time", start_time);
  file.writeData("title", title);

  // data group
  file.makeGroup("data1", "NXdata", true); // make and open
  file.writeData("Step", 0.2);
  putAttr(file, "Step", "units", "degree");
  file.writeData("counts", counts);
  file.openData("counts");
  file.putAttr("signal", 1);
  file.closeData();
  file.writeData("lambda", 2.6);
  putAttr(file, "Step", "units", "degree");
  file.writeData("no_of_steps", 400);
  file.writeData("two_theta", two_theta);
  file.openData("two_theta");
  file.putAttr("axis", 1);
  file.putAttr("units", "degree");
  file.closeData();
  file.writeData("two_theta_start", 18.3);
  putAttr(file, "Step", "units", "degree");
  file.closeGroup();

  // sample group
  file.makeGroup("sample", "NXsample", true); // make and open
  file.writeData("device_name", "ccr4k");
  file.writeData("sample_mur", 0.0);
  putAttr(file, "sample_mur", "units", "degree");
  file.writeData("sample_name", "Ga0.94Mn0.04Sb_8mm");
  file.writeData("sample_table_rotation", 297.2);
  putAttr(file, "sample_table_rotation", "units", "degree");
  file.writeData("sample_temperature", 4.0);
  putAttr(file, "sample_temperature", "units", "K");
  file.writeData("temperature_mean", 4.0);
  putAttr(file, "temperature_mean", "units", "K");
  file.writeData("temperature_stddev", 0.0);
  putAttr(file, "temperature_stddev", "units", "K");

  // close the file
  file.close();
  std::cout << "... done\n";
}
} // namespace

/**
 * Create a "small" hdf5-based file to be used for external linking. This was stored in the original nexusformat code
 * repository as dmc01.h5 without the NXinstrument group. This appears to be data from the SINQ facility.
 */
void write_dmc01(const std::string &filename) {
  const std::string start_time("2005-05-27 05:44:13");
  const std::vector<int32_t> counts = {
      94,  103,  86,   84,   88,  106, 92,  87,  95,  104,  96,   114,  99,   89,   102,  89,   120,  93,  101, 97,
      94,  84,   102,  116,  98,  92,  77,  90,  111, 89,   90,   125,  86,   90,   97,   111,  85,   81,  108, 96,
      101, 95,   95,   119,  91,  103, 95,  97,  75,  105,  68,   95,   101,  102,  107,  102,  105,  96,  116, 107,
      98,  115,  113,  90,   92,  78,  70,  89,  107, 106,  84,   100,  107,  102,  112,  104,  107,  98,  102, 105,
      102, 94,   107,  94,   91,  99,  101, 94,  119, 108,  110,  105,  107,  106,  93,   102,  109,  104, 102, 109,
      102, 94,   91,   88,   94,  99,  116, 101, 110, 104,  98,   110,  108,  99,   99,   108,  135,  146, 251, 315,
      484, 2049, 3541, 2935, 901, 178, 134, 110, 137, 132,  120,  89,   121,  107,  92,   104,  115,  111, 114, 89,
      91,  113,  120,  100,  93,  110, 92,  104, 115, 127,  117,  108,  94,   109,  118,  101,  152,  198, 199, 188,
      135, 117,  109,  102,  112, 102, 113, 104, 93,  96,   100,  119,  135,  124,  121,  96,   93,   108, 100, 97,
      105, 88,   92,   101,  114, 101, 118, 104, 73,  98,   76,   104,  85,   93,   86,   90,   98,   88,  96,  111,
      81,  94,   86,   97,   86,  96,  102, 116, 99,  112,  114,  105,  89,   99,   106,  115,  90,   83,  103, 87,
      113, 78,   89,   82,   94,  92,  106, 97,  85,  117,  92,   96,   106,  90,   92,   101,  73,   76,  102, 98,
      111, 104,  109,  84,   108, 99,  105, 99,  93,  88,   85,   88,   92,   105,  100,  109,  115,  136, 130, 114,
      113, 116,  102,  108,  99,  111, 107, 106, 97,  144,  249,  827,  1588, 2159, 2201, 2225, 1557, 606, 269, 152,
      156, 126,  97,   100,  112, 100, 132, 122, 85,  108,  96,   130,  115,  110,  93,   92,   96,   76,  100, 93,
      94,  104,  80,   86,   96,  69,  107, 91,  84,  106,  105,  99,   91,   106,  93,   102,  82,   103, 87,  95,
      106, 92,   93,   106,  96,  101, 112, 103, 134, 103,  93,   103,  96,   129,  100,  86,   100,  95,  96,  98,
      128, 105,  109,  138,  126, 146, 191, 450, 807, 1423, 1648, 1986, 1839, 1614, 1162, 634,  296,  190, 139, 122,
      125, 130,  104,  109,  98,  121, 142, 128, 105, 138,  119,  92,   104,  98,   147,  132,  116,  112, 124, 112,
      104, 113,  107,  100,  87,  105, 86,  117, 92,  110,  86,   98,   82,   107,  105,  119,  105,  107, 101, 105};

  const std::vector<double> two_theta = {
      18.3, 18.5, 18.7, 18.8, 19.1, 19.3, 19.5, 19.7, 19.9, 20.1, 20.3, 20.5, 20.7, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9,
      22.1, 22.3, 22.5, 22.7, 22.9, 23.1, 23.3, 23.5, 23.7, 23.9, 24.1, 24.3, 24.5, 24.7, 24.9, 25.1, 25.3, 25.5, 25.7,
      25.9, 26.1, 26.3, 26.5, 26.7, 26.9, 27.1, 27.3, 27.5, 27.7, 27.9, 28.1, 28.3, 28.5, 28.7, 28.9, 29.1, 29.3, 29.5,
      29.7, 29.9, 30.1, 30.3, 30.5, 30.7, 30.9, 31.1, 31.3, 31.5, 31.7, 31.9, 32.1, 32.3, 32.5, 32.7, 32.9, 33.1, 33.3,
      33.5, 33.7, 33.9, 34.1, 34.3, 34.5, 34.7, 34.9, 35.1, 35.3, 35.5, 35.7, 35.9, 36.1, 36.3, 36.5, 36.7, 36.9, 37.1,
      37.3, 37.5, 37.7, 37.9, 38.1, 38.3, 38.5, 38.7, 38.9, 39.1, 39.3, 39.5, 39.7, 39.9, 40.1, 40.3, 40.5, 40.7, 40.9,
      41.1, 41.3, 41.5, 41.7, 41.9, 42.1, 42.3, 42.5, 42.7, 42.9, 43.1, 43.3, 43.5, 43.7, 43.9, 44.1, 44.3, 44.5, 44.7,
      44.9, 45.1, 45.3, 45.5, 45.7, 45.9, 46.1, 46.3, 46.5, 46.7, 46.9, 47.1, 47.3, 47.5, 47.7, 47.9, 48.1, 48.3, 48.5,
      48.7, 48.9, 49.1, 49.3, 49.5, 49.7, 49.9, 50.1, 50.3, 50.5, 50.7, 50.9, 51.1, 51.3, 51.5, 51.7, 51.9, 52.1, 52.3,
      52.5, 52.7, 52.9, 53.1, 53.3, 53.5, 53.7, 53.9, 54.1, 54.3, 54.5, 54.7, 54.9, 55.1, 55.3, 55.5, 55.7, 55.9, 56.1,
      56.3, 56.5, 56.7, 56.9, 57.1, 57.3, 57.5, 57.7, 57.9, 58.1, 58.3, 58.5, 58.7, 58.9, 59.1, 59.3, 59.5, 59.7, 59.9,
      60.1, 60.3, 60.5, 60.7, 60.9, 61.1, 61.3, 61.5, 61.7, 61.9, 62.1, 62.3, 62.5, 62.7, 62.9, 63.1, 63.3, 63.5, 63.7,
      63.9, 64.1, 64.3, 64.5, 64.7, 64.9, 65.1, 65.3, 65.5, 65.7, 65.9, 66.1, 66.3, 66.5, 66.7, 66.9, 67.1, 67.3, 67.5,
      67.7, 67.9, 68.1, 68.3, 68.5, 68.7, 68.9, 69.1, 69.3, 69.5, 69.7, 69.9, 70.1, 70.3, 70.5, 70.7, 70.9, 71.1, 71.3,
      71.5, 71.7, 71.9, 72.1, 72.3, 72.5, 72.7, 72.9, 73.1, 73.3, 73.5, 73.7, 73.9, 74.1, 74.3, 74.5, 74.7, 74.9, 75.1,
      75.3, 75.5, 75.7, 75.9, 76.1, 76.3, 76.5, 76.7, 76.9, 77.1, 77.3, 77.5, 77.7, 77.9, 78.1, 78.3, 78.5, 78.7, 78.9,
      79.1, 79.3, 79.5, 79.7, 79.9, 80.1, 80.3, 80.5, 80.7, 80.9, 81.1, 81.3, 81.5, 81.7, 81.9, 82.1, 82.3, 82.5, 82.7,
      82.9, 83.1, 83.3, 83.5, 83.7, 83.9, 84.1, 84.3, 84.5, 84.7, 84.9, 85.1, 85.3, 85.5, 85.7, 85.9, 86.1, 86.3, 86.5,
      86.7, 86.9, 87.1, 87.3, 87.5, 87.7, 87.9, 88.1, 88.3, 88.5, 88.7, 88.9, 89.1, 89.3, 89.5, 89.7, 89.9, 90.1, 90.3,
      90.5, 90.7, 90.9, 91.1, 91.3, 91.5, 91.7, 91.9, 92.1, 92.3, 92.5, 92.7, 92.9, 93.1, 93.3, 93.5, 93.7, 93.9, 94.1,
      94.3, 94.5, 94.7, 94.9, 95.1, 95.3, 95.5, 95.7, 95.9, 96.1, 96.3, 96.5, 96.7, 96.9, 97.1, 97.3, 97.5, 97.7, 97.9,
      98.1};
  write_dmc(filename, start_time, counts, two_theta);
}

/**
 * Create a "small" hdf5-based file to be used for external linking. This was stored in the original nexusformat code
 * repository as dmc02.h5 without the NXinstrument group. This appears to be data from the SINQ facility.
 */
void write_dmc02(const std::string &filename) {
  const std::string start_time("2005-05-27 05:48:56");
  const std::vector<int32_t> counts = {
      114,  102,  107,  106,  90,  102, 99,  95,  80,  104,  119,  101,  100,  109,  101,  98,   90,   93,  102, 112,
      104,  84,   87,   98,   95,  86,  100, 104, 90,  99,   67,   92,   100,  99,   81,   103,  94,   90,  75,  100,
      107,  75,   86,   101,  107, 92,  83,  76,  95,  101,  79,   101,  108,  90,   78,   104,  85,   85,  88,  104,
      113,  106,  92,   100,  96,  92,  107, 94,  97,  96,   93,   96,   96,   109,  96,   89,   89,   76,  99,  131,
      88,   101,  103,  98,   90,  89,  130, 93,  122, 108,  97,   94,   117,  79,   94,   106,  99,   90,  98,  105,
      88,   89,   92,   94,   99,  92,  104, 103, 101, 101,  115,  111,  87,   120,  108,  123,  115,  202, 264, 316,
      1036, 3216, 3380, 1958, 341, 149, 100, 107, 116, 119,  102,  98,   103,  102,  89,   92,   81,   98,  100, 97,
      109,  117,  103,  99,   114, 101, 107, 104, 114, 112,  102,  109,  90,   102,  109,  154,  166,  202, 198, 197,
      103,  100,  116,  97,   96,  108, 94,  105, 86,  115,  109,  136,  139,  135,  108,  98,   101,  96,  75,  103,
      86,   112,  86,   88,   101, 85,  100, 112, 103, 101,  95,   92,   76,   102,  97,   96,   71,   89,  92,  98,
      90,   100,  102,  96,   82,  83,  92,  105, 94,  101,  80,   111,  83,   93,   99,   98,   115,  93,  105, 88,
      113,  85,   97,   102,  100, 92,  96,  81,  92,  92,   86,   99,   90,   86,   88,   104,  94,   98,  90,  82,
      108,  89,   95,   75,   100, 115, 103, 106, 102, 111,  111,  89,   92,   108,  106,  116,  154,  129, 134, 120,
      112,  121,  103,  104,  94,  102, 126, 122, 125, 153,  460,  1292, 1855, 2198, 2195, 2030, 1030, 379, 171, 126,
      120,  132,  95,   115,  102, 90,  100, 117, 104, 102,  91,   117,  122,  96,   92,   97,   97,   108, 108, 95,
      132,  117,  103,  85,   118, 91,  84,  101, 95,  103,  83,   115,  92,   87,   94,   94,   98,   87,  102, 95,
      122,  96,   101,  73,   103, 86,  104, 92,  106, 82,   90,   90,   94,   114,  127,  100,  88,   96,  109, 116,
      103,  124,  102,  111,  124, 159, 289, 608, 970, 1573, 1741, 1989, 1689, 1365, 884,  460,  241,  165, 142, 124,
      132,  123,  105,  127,  113, 116, 126, 122, 111, 122,  108,  113,  114,  112,  105,  122,  120,  107, 126, 108,
      125,  104,  123,  102,  126, 112, 85,  114, 115, 102,  103,  116,  101,  130,  106,  99,   99,   112, 105, 116};
  const std::vector<double> two_theta = {
      18.4, 18.6, 18.8, 19.0, 19.2, 19.4, 19.6, 19.8, 20.0, 20.2, 20.4, 20.6, 20.8, 21.0, 21.2, 21.4, 21.6, 21.8, 22.0,
      22.2, 22.4, 22.6, 22.8, 23.0, 23.2, 23.4, 23.6, 23.8, 24.0, 24.2, 24.4, 24.6, 24.8, 25.0, 25.2, 25.4, 25.6, 25.8,
      26.0, 26.2, 26.4, 26.6, 26.8, 27.0, 27.2, 27.4, 27.6, 27.8, 28.0, 28.2, 28.4, 28.6, 28.8, 29.0, 29.2, 29.4, 29.6,
      29.8, 30.0, 30.2, 30.4, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.8, 32.0, 32.2, 32.4, 32.6, 32.8, 33.0, 33.2, 33.4,
      33.6, 33.8, 34.0, 34.2, 34.4, 34.6, 34.8, 35.0, 35.2, 35.4, 35.6, 35.8, 36.0, 36.2, 36.4, 36.6, 36.8, 37.0, 37.2,
      37.4, 37.6, 37.8, 38.0, 38.2, 38.4, 38.6, 38.8, 39.0, 39.2, 39.4, 39.6, 39.8, 40.0, 40.2, 40.4, 40.6, 40.8, 41.0,
      41.2, 41.4, 41.6, 41.8, 42.0, 42.2, 42.4, 42.6, 42.8, 43.0, 43.2, 43.4, 43.6, 43.8, 44.0, 44.2, 44.4, 44.6, 44.8,
      45.0, 45.2, 45.4, 45.6, 45.8, 46.0, 46.2, 46.4, 46.6, 46.8, 47.0, 47.2, 47.4, 47.6, 47.8, 48.0, 48.2, 48.4, 48.6,
      48.8, 49.0, 49.2, 49.4, 49.6, 49.8, 50.0, 50.2, 50.4, 50.6, 50.8, 51.0, 51.2, 51.4, 51.6, 51.8, 52.0, 52.2, 52.4,
      52.6, 52.8, 53.0, 53.2, 53.4, 53.6, 53.8, 54.0, 54.2, 54.4, 54.6, 54.8, 55.0, 55.2, 55.4, 55.6, 55.8, 56.0, 56.2,
      56.4, 56.6, 56.8, 57.0, 57.2, 57.4, 57.6, 57.8, 58.0, 58.2, 58.4, 58.6, 58.8, 59.0, 59.2, 59.4, 59.6, 59.8, 60.0,
      60.2, 60.4, 60.6, 60.8, 61.0, 61.2, 61.4, 61.6, 61.8, 62.0, 62.2, 62.4, 62.6, 62.8, 63.0, 63.2, 63.4, 63.6, 63.8,
      64.0, 64.2, 64.4, 64.6, 64.8, 65.0, 65.2, 65.4, 65.6, 65.8, 66.0, 66.2, 66.4, 66.6, 66.8, 67.0, 67.2, 67.4, 67.6,
      67.8, 68.0, 68.2, 68.4, 68.6, 68.8, 69.0, 69.2, 69.4, 69.6, 69.8, 70.0, 70.2, 70.4, 70.6, 70.8, 71.0, 71.2, 71.4,
      71.6, 71.8, 72.0, 72.2, 72.4, 72.6, 72.8, 73.0, 73.2, 73.4, 73.6, 73.8, 74.0, 74.2, 74.4, 74.6, 74.8, 75.0, 75.2,
      75.4, 75.6, 75.8, 76.0, 76.2, 76.4, 76.6, 76.8, 77.0, 77.2, 77.4, 77.6, 77.8, 78.0, 78.2, 78.4, 78.6, 78.8, 79.0,
      79.2, 79.4, 79.6, 79.8, 80.0, 80.2, 80.4, 80.6, 80.8, 81.0, 81.2, 81.4, 81.6, 81.8, 82.0, 82.2, 82.4, 82.6, 82.8,
      83.0, 83.2, 83.4, 83.6, 83.8, 84.0, 84.2, 84.4, 84.6, 84.8, 85.0, 85.2, 85.4, 85.6, 85.8, 86.0, 86.2, 86.4, 86.6,
      86.8, 87.0, 87.2, 87.4, 87.6, 87.8, 88.0, 88.2, 88.4, 88.6, 88.8, 89.0, 89.2, 89.4, 89.6, 89.8, 90.0, 90.2, 90.4,
      90.6, 90.8, 91.0, 91.2, 91.4, 91.6, 91.8, 92.0, 92.2, 92.4, 92.6, 92.8, 93.0, 93.2, 93.4, 93.6, 93.8, 94.0, 94.2,
      94.4, 94.6, 94.8, 95.0, 95.2, 95.4, 95.6, 95.8, 96.0, 96.2, 96.4, 96.6, 96.8, 97.0, 97.2, 97.4, 97.6, 97.8, 98.0,
      98.2};
  write_dmc(filename, start_time, counts, two_theta);
}

// remove a file if it exists
void removeFile(const std::string &filename) {
  if (std::filesystem::exists(filename)) {
    std::filesystem::remove(filename);
  }
}

} // namespace LegacyNexusTest
