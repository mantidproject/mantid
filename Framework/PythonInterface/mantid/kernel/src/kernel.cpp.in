// Mantid Repository : https://github.com/mantidproject/mantid
//
// Copyright &copy; 2018 ISIS Rutherford Appleton Laboratory UKRI,
//   NScD Oak Ridge National Laboratory, European Spallation Source,
//   Institut Laue - Langevin & CSNS, Institute of High Energy Physics, CAS
// SPDX - License - Identifier: GPL - 3.0 +

@AUTO_GENERATE_WARNING@
/********** Source = kernel.cpp.in **********************************************************/

#include <boost/python/def.hpp>
#include <boost/python/docstring_options.hpp>
#include <boost/python/module.hpp>
#include <boost/python/type_id.hpp>
#include <Poco/Instantiator.h>
#include <Poco/LoggingFactory.h>

#include "MantidPythonInterface/core/NDArray.h"
#include "MantidPythonInterface/kernel/Registry/TypeRegistry.h"
#include "MantidPythonInterface/kernel/kernel.h"
#include "MantidPythonInterface/core/PythonStdoutChannel.h"

// See
// http://docs.scipy.org/doc/numpy/reference/c-api.array.html#PY_ARRAY_UNIQUE_SYMBOL
#define PY_ARRAY_UNIQUE_SYMBOL KERNEL_ARRAY_API
#include <numpy/arrayobject.h>

// See comment in kernel.h
#ifdef _WIN32
void kernel_dll_import_numpy_capi_for_unittest() { _import_array(); }
#endif

using boost::python::def;
using boost::python::type_id;
namespace converter = boost::python::converter;

// Forward declare
@EXPORT_DECLARE@

BOOST_PYTHON_MODULE(_kernel) {
  // Doc string options - User defined, python arguments, C++ call signatures
  boost::python::docstring_options docstrings(true, true, false);
  // Import numpy for the core DLL
  Mantid::PythonInterface::importNumpy();
  // Import numpy for this DLL
  _import_array();
  // register the python logger with poco
  Poco::LoggingFactory::defaultFactory().registerChannelClass(
    "PythonStdoutChannel",
    new Poco::Instantiator<Poco::PythonStdoutChannel, Poco::Channel>);
  /*
  // TODO: this channel should replace PythonStdoutChannel when we adopt pybind11 because of robust GIL  management
  Poco::LoggingFactory::defaultFactory().registerChannelClass(
      "PyBindStdoutChannel", new Poco::Instantiator<Poco::PyBindStdoutChannel, Poco::Channel>);
  */


  Mantid::PythonInterface::Registry::TypeRegistry::registerBuiltins();

  @EXPORT_FUNCTIONS@
}
