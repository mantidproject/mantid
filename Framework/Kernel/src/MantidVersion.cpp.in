// Mantid Repository : https://github.com/mantidproject/mantid
//
// Copyright &copy; 2018 ISIS Rutherford Appleton Laboratory UKRI,
//   NScD Oak Ridge National Laboratory, European Spallation Source,
//   Institut Laue - Langevin & CSNS, Institute of High Energy Physics, CAS
// SPDX - License - Identifier: GPL - 3.0 +
//----------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------

@AUTO_GENERATE_WARNING@
/********** Source = MantidVersion.cpp.in *****************************************************/

#include "MantidKernel/MantidVersion.h"

#include <sstream>

namespace Mantid::Kernel {

/**
 * See buildconfig/CMake/VersionNumber.cmake for more information on the meaning
 * of the version number elements
 */

const char* MantidVersion::version()
{
  return "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@@VERSION_TWEAK@";
}

const char* MantidVersion::versionShort()
{
  return "@VERSION_MAJOR@.@VERSION_MINOR@";
}

const MantidVersion::VersionInfo MantidVersion::versionInfo() {
  return {"@VERSION_MAJOR@", "@VERSION_MINOR@", "@VERSION_PATCH@@VERSION_TWEAK@"};
}

std::string MantidVersion::releaseNotes()
{
  const std::string STEM = "qthelp://org.mantidproject/doc/release/v";
  const std::string END = "/index.html";
  // Cast here in those cases where patch number is of the form 20131022.1356.
  const unsigned int patchVersion = static_cast<unsigned int>(@VERSION_PATCH@);

  // For major/minor/patch releases we point users to a specific release-notes, for
  // dev versions we point to the next main release notes.
  // We assume that the next main release version number will be one minor version higher.

  std::stringstream versionLabel;
  const std::string tweakVersion("@VERSION_TWEAK@");
  if ( patchVersion < 100 && tweakVersion.empty()) {
    versionLabel << versionShort();
    versionLabel << "." << patchVersion;
  }
  else {
    const unsigned int minorVersion = static_cast<unsigned int>(@VERSION_MINOR@);
    versionLabel << "@VERSION_MAJOR@." << minorVersion + 1  << "." << "0";
  }

  std::stringstream url;
  url << STEM << versionLabel.str() << END;

  return url.str();
}

const char* MantidVersion::revision()
{
  return "@REVISION_SHORT@";
}

const char* MantidVersion::revisionFull()
{
  return "@REVISION_FULL@";
}

const char* MantidVersion::releaseDate()
{
  return "@REVISION_DATE@";
}

std::string MantidVersion::doi()
{
  const std::string MAIN = "http://dx.doi.org/10.5286/Software/Mantid";
  // Cast here in those cases where patch number is of the form 20131022.1356.
  const unsigned int patchVersion = static_cast<unsigned int>(@VERSION_PATCH@);

  // For major/minor/patch releases we point users to a specific release-notes DOI, for
  // dev versions we just point to the main DOI.  A simple way to see whether or not
  // we're currently in a dev version is to check if the patch version is larger than
  // some arbitrarily low value.
  const std::string tweakVersion("@VERSION_TWEAK@");
  if( patchVersion > 100 || !tweakVersion.empty())
    return MAIN;

  std::stringstream doi;
  doi << MAIN << @VERSION_MAJOR@ << "." << @VERSION_MINOR@;

  // Keep to the convention where we write a version number like "3.0.0" as "3.0".
  if( patchVersion != 0 )
    doi << "." << patchVersion;

  return doi.str();
}

std::string MantidVersion::paperCitation()
{
  return "http://dx.doi.org/10.1016/j.nima.2014.07.029";
}

} // namespace Mantid::Kernel
