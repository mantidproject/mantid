//------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------
#include "MantidKernel/MersenneTwister.h"

#include <boost/random/uniform_int_distribution.hpp>
#include <boost/random/uniform_real.hpp>
#include <boost/random/variate_generator.hpp>

#include <Poco/Timestamp.h>

namespace Mantid {
namespace Kernel {

//------------------------------------------------------------------------------
// Public member functions
//------------------------------------------------------------------------------

/**
 * Constructor taking a seed value. Sets the range to [0.0,1.0]
 * @param seedValue :: The initial seed
 */
MersenneTwister::MersenneTwister(const size_t seedValue)
    : MersenneTwister(seedValue, 0.0, 1.0) {}

/**
 * Construct the generator time stamp for the initial seed.
 * The range is set to [0.0, 1.0]
 */
MersenneTwister::MersenneTwister() : MersenneTwister(0.0, 1.0) {}

/**
 * Constructor taking a range
 * @param start :: The minimum value a generated number should take
 * @param end :: The maximum value a generated number should take
 */
MersenneTwister::MersenneTwister(const double start, const double end)
    : MersenneTwister(Poco::Timestamp().epochMicroseconds(), start, end) {}

/**
 * Constructor taking a seed value and a range
 * @param seedValue :: The initial seed
 * @param start :: The minimum value a generated number should take
 * @param end :: The maximum value a generated number should take
 */
MersenneTwister::MersenneTwister(const size_t seedValue, const double start,
                                 const double end)
    : m_generator(), m_start(start), m_end(end), m_currentSeed(),
      m_savedStateGenerator(nullptr) {
  setSeed(seedValue);
}

/// Destructor
MersenneTwister::~MersenneTwister() { delete m_savedStateGenerator; }

/**
 * (Re-)seed the generator. This clears the current saved state
 * @param seedValue :: A seed for the generator
 */
void MersenneTwister::setSeed(const size_t seedValue) {
  // Bug in earlier versions of this implementation meant
  // that a unsigned int could not be past to the seed function
  m_currentSeed = static_cast<boost::mt19937::result_type>(seedValue);
  m_generator.seed(m_currentSeed);
  delete m_savedStateGenerator;
  m_savedStateGenerator = nullptr;
}

/**
 * Sets the range of the subsequent calls to nextValue()
 * @param start :: The lowest value a call to nextValue() will produce
 * @param end :: The largest value a call to nextValue() will produce
 */
void MersenneTwister::setRange(const double start, const double end) {
  m_start = start;
  m_end = end;
}

/**
 * Returns the next number in the pseudo-random sequence generated by
 * the Mersenne Twister 19937 algorithm, scaled to the given range
 * @param start Start of the requested range
 * @param end End of the requested range
 * @returns The next number in the pseudo-random sequence
 */
double MersenneTwister::nextValue(double start, double end) {
  boost::random::uniform_real_distribution<double> dist(start, end);
  return dist(m_generator);
}

/**
 * Returns the next integer in the pseudo-random sequence generated by
 * the Mersenne Twister 19937 algorithm.
 * @param start Start of the requested range
 * @param end End of the requested range
 * @return An integer in the defined range
 */
int MersenneTwister::nextInt(int start, int end) {
  boost::random::uniform_int_distribution<> dist(start, end);
  return dist(m_generator);
}

/**
 * Resets the generator using the value given at the last call to setSeed
 */
void MersenneTwister::restart() { setSeed(m_currentSeed); }

/// Saves the current state of the generator
void MersenneTwister::save() {
  m_savedStateGenerator = new boost::mt19937(m_generator); // Copy the state
}

/// Restores the generator to the last saved point, or the beginning if nothing
/// has been saved
void MersenneTwister::restore() {
  // Copy saved to current, still distinct objects so that another restore still
  // brings us
  // back to the originally saved point
  if (m_savedStateGenerator) {
    m_generator = boost::mt19937(*m_savedStateGenerator);
  } else {
    restart();
  }
}
}
}
