/* ICat4H.h
   Generated by gSOAP 2.8.15 from ICat4Service.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef ICat4H_H
#define ICat4H_H
#include "ICat4Stub.h"

namespace ICat4 {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *, const void *, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap *, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *, const void *,
                                          const char *, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *);

SOAP_FMAC3 const char **SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void *SOAP_FMAC4 ICat4_instantiate(struct soap *, int, const char *,
                                              const char *, size_t *);
SOAP_FMAC3 int SOAP_FMAC4 ICat4_fdelete(struct soap_clist *);
SOAP_FMAC3 void *SOAP_FMAC4 soap_class_id_enter(struct soap *, const char *,
                                                void *, int, size_t,
                                                const char *, const char *);

SOAP_FMAC3 void *SOAP_FMAC4 soap_container_id_forward(struct soap *,
                                                      const char *, void *,
                                                      size_t, int, int, size_t,
                                                      unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 ICat4_container_insert(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef SOAP_TYPE_ICat4_byte
#define SOAP_TYPE_ICat4_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *, const char *, int,
                                        const char *, const char *);
SOAP_FMAC3 char *SOAP_FMAC4 soap_in_byte(struct soap *, const char *, char *,
                                         const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *, const char *,
                                        const char *, const char *);

#ifndef soap_write_byte
#define soap_write_byte(soap, data)                                            \
  (ICat4::soap_serialize_byte(soap, data),                                     \
   soap_begin_send(soap) || ICat4::soap_put_byte(soap, data, "byte", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 char *SOAP_FMAC4 soap_get_byte(struct soap *, char *, const char *,
                                          const char *);

#ifndef soap_read_byte
#define soap_read_byte(soap, data)                                             \
  (soap_begin_recv(soap) || !ICat4::soap_get_byte(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_int
#define SOAP_TYPE_ICat4_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *, const char *, int,
                                       const int *, const char *);
SOAP_FMAC3 int *SOAP_FMAC4 soap_in_int(struct soap *, const char *, int *,
                                       const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *, const int *, const char *,
                                       const char *);

#ifndef soap_write_int
#define soap_write_int(soap, data)                                             \
  (ICat4::soap_serialize_int(soap, data),                                      \
   soap_begin_send(soap) || ICat4::soap_put_int(soap, data, "int", NULL) ||    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 int *SOAP_FMAC4 soap_get_int(struct soap *, int *, const char *,
                                        const char *);

#ifndef soap_read_int
#define soap_read_int(soap, data)                                              \
  (soap_begin_recv(soap) || !ICat4::soap_get_int(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_LONG64
#define SOAP_TYPE_ICat4_LONG64 (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *, const char *, int,
                                          const LONG64 *, const char *);
SOAP_FMAC3 LONG64 *SOAP_FMAC4 soap_in_LONG64(struct soap *, const char *,
                                             LONG64 *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *, const LONG64 *,
                                          const char *, const char *);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data)                                          \
  (ICat4::soap_serialize_LONG64(soap, data),                                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_LONG64(soap, data, "long", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 LONG64 *SOAP_FMAC4 soap_get_LONG64(struct soap *, LONG64 *,
                                              const char *, const char *);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data)                                           \
  (soap_begin_recv(soap) || !ICat4::soap_get_LONG64(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_double
#define SOAP_TYPE_ICat4_double (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *, const char *, int,
                                          const double *, const char *);
SOAP_FMAC3 double *SOAP_FMAC4 soap_in_double(struct soap *, const char *,
                                             double *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *, const double *,
                                          const char *, const char *);

#ifndef soap_write_double
#define soap_write_double(soap, data)                                          \
  (ICat4::soap_serialize_double(soap, data),                                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_double(soap, data, "double", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 double *SOAP_FMAC4 soap_get_double(struct soap *, double *,
                                              const char *, const char *);

#ifndef soap_read_double
#define soap_read_double(soap, data)                                           \
  (soap_begin_recv(soap) || !ICat4::soap_get_double(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_time
#define SOAP_TYPE_ICat4_time (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *, const char *, int,
                                        const time_t *, const char *);
SOAP_FMAC3 time_t *SOAP_FMAC4 soap_in_time(struct soap *, const char *,
                                           time_t *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *, const time_t *,
                                        const char *, const char *);

#ifndef soap_write_time
#define soap_write_time(soap, data)                                            \
  (ICat4::soap_serialize_time(soap, data),                                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_time(soap, data, "dateTime", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 time_t *SOAP_FMAC4 soap_get_time(struct soap *, time_t *,
                                            const char *, const char *);

#ifndef soap_read_time
#define soap_read_time(soap, data)                                             \
  (soap_begin_recv(soap) || !ICat4::soap_get_time(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_ns1__accessType
#define SOAP_TYPE_ICat4_ns1__accessType (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__accessType(struct soap *,
                                                        enum ns1__accessType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__accessType(struct soap *, const char *,
                                                   int,
                                                   const enum ns1__accessType *,
                                                   const char *);

SOAP_FMAC3S const char *SOAP_FMAC4S
soap_ns1__accessType2s(struct soap *, enum ns1__accessType);
SOAP_FMAC3 enum ns1__accessType *SOAP_FMAC4 soap_in_ns1__accessType(
    struct soap *, const char *, enum ns1__accessType *, const char *);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__accessType(struct soap *, const char *,
                                                   enum ns1__accessType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__accessType(struct soap *,
                                                   const enum ns1__accessType *,
                                                   const char *, const char *);

#ifndef soap_write_ns1__accessType
#define soap_write_ns1__accessType(soap, data)                                 \
  (ICat4::soap_serialize_ns1__accessType(soap, data),                          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_ns1__accessType(soap, data, "ns1:accessType", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__accessType *SOAP_FMAC4 soap_get_ns1__accessType(
    struct soap *, enum ns1__accessType *, const char *, const char *);

#ifndef soap_read_ns1__accessType
#define soap_read_ns1__accessType(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__accessType(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_ns1__relType
#define SOAP_TYPE_ICat4_ns1__relType (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__relType(struct soap *,
                                                     enum ns1__relType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__relType(struct soap *, const char *,
                                                int, const enum ns1__relType *,
                                                const char *);

SOAP_FMAC3S const char *SOAP_FMAC4S soap_ns1__relType2s(struct soap *,
                                                        enum ns1__relType);
SOAP_FMAC3 enum ns1__relType *SOAP_FMAC4 soap_in_ns1__relType(
    struct soap *, const char *, enum ns1__relType *, const char *);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__relType(struct soap *, const char *,
                                                enum ns1__relType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__relType(struct soap *,
                                                const enum ns1__relType *,
                                                const char *, const char *);

#ifndef soap_write_ns1__relType
#define soap_write_ns1__relType(soap, data)                                    \
  (ICat4::soap_serialize_ns1__relType(soap, data),                             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_ns1__relType(soap, data, "ns1:relType", NULL) ||        \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__relType *SOAP_FMAC4 soap_get_ns1__relType(
    struct soap *, enum ns1__relType *, const char *, const char *);

#ifndef soap_read_ns1__relType
#define soap_read_ns1__relType(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__relType(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_ns1__parameterValueType
#define SOAP_TYPE_ICat4_ns1__parameterValueType (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__parameterValueType(
    struct soap *, enum ns1__parameterValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parameterValueType(
    struct soap *, const char *, int, const enum ns1__parameterValueType *,
    const char *);

SOAP_FMAC3S const char *SOAP_FMAC4S
soap_ns1__parameterValueType2s(struct soap *, enum ns1__parameterValueType);
SOAP_FMAC3 enum ns1__parameterValueType *SOAP_FMAC4
soap_in_ns1__parameterValueType(struct soap *, const char *,
                                enum ns1__parameterValueType *, const char *);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__parameterValueType(
    struct soap *, const char *, enum ns1__parameterValueType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__parameterValueType(
    struct soap *, const enum ns1__parameterValueType *, const char *,
    const char *);

#ifndef soap_write_ns1__parameterValueType
#define soap_write_ns1__parameterValueType(soap, data)                         \
  (ICat4::soap_serialize_ns1__parameterValueType(soap, data),                  \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_ns1__parameterValueType(                                \
           soap, data, "ns1:parameterValueType", NULL) ||                      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__parameterValueType *SOAP_FMAC4
soap_get_ns1__parameterValueType(struct soap *, enum ns1__parameterValueType *,
                                 const char *, const char *);

#ifndef soap_read_ns1__parameterValueType
#define soap_read_ns1__parameterValueType(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__parameterValueType(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_ns1__studyStatus
#define SOAP_TYPE_ICat4_ns1__studyStatus (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_ns1__studyStatus(struct soap *, enum ns1__studyStatus *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__studyStatus(struct soap *, const char *, int,
                          const enum ns1__studyStatus *, const char *);

SOAP_FMAC3S const char *SOAP_FMAC4S
soap_ns1__studyStatus2s(struct soap *, enum ns1__studyStatus);
SOAP_FMAC3 enum ns1__studyStatus *SOAP_FMAC4 soap_in_ns1__studyStatus(
    struct soap *, const char *, enum ns1__studyStatus *, const char *);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__studyStatus(struct soap *, const char *,
                                                    enum ns1__studyStatus *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__studyStatus(
    struct soap *, const enum ns1__studyStatus *, const char *, const char *);

#ifndef soap_write_ns1__studyStatus
#define soap_write_ns1__studyStatus(soap, data)                                \
  (ICat4::soap_serialize_ns1__studyStatus(soap, data),                         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_ns1__studyStatus(soap, data, "ns1:studyStatus",         \
                                        NULL) ||                               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__studyStatus *SOAP_FMAC4 soap_get_ns1__studyStatus(
    struct soap *, enum ns1__studyStatus *, const char *, const char *);

#ifndef soap_read_ns1__studyStatus
#define soap_read_ns1__studyStatus(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__studyStatus(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_ns1__icatExceptionType
#define SOAP_TYPE_ICat4_ns1__icatExceptionType (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__icatExceptionType(
    struct soap *, enum ns1__icatExceptionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__icatExceptionType(
    struct soap *, const char *, int, const enum ns1__icatExceptionType *,
    const char *);

SOAP_FMAC3S const char *SOAP_FMAC4S
soap_ns1__icatExceptionType2s(struct soap *, enum ns1__icatExceptionType);
SOAP_FMAC3 enum ns1__icatExceptionType *SOAP_FMAC4
soap_in_ns1__icatExceptionType(struct soap *, const char *,
                               enum ns1__icatExceptionType *, const char *);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__icatExceptionType(
    struct soap *, const char *, enum ns1__icatExceptionType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__icatExceptionType(
    struct soap *, const enum ns1__icatExceptionType *, const char *,
    const char *);

#ifndef soap_write_ns1__icatExceptionType
#define soap_write_ns1__icatExceptionType(soap, data)                          \
  (ICat4::soap_serialize_ns1__icatExceptionType(soap, data),                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_ns1__icatExceptionType(                                 \
           soap, data, "ns1:icatExceptionType", NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__icatExceptionType *SOAP_FMAC4
soap_get_ns1__icatExceptionType(struct soap *, enum ns1__icatExceptionType *,
                                const char *, const char *);

#ifndef soap_read_ns1__icatExceptionType
#define soap_read_ns1__icatExceptionType(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__icatExceptionType(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_bool
#define SOAP_TYPE_ICat4_bool (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *, const char *, int,
                                        const bool *, const char *);

SOAP_FMAC3S const char *SOAP_FMAC4S soap_bool2s(struct soap *, bool);
SOAP_FMAC3 bool *SOAP_FMAC4 soap_in_bool(struct soap *, const char *, bool *,
                                         const char *);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *, const char *, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *, const bool *,
                                        const char *, const char *);

#ifndef soap_write_bool
#define soap_write_bool(soap, data)                                            \
  (ICat4::soap_serialize_bool(soap, data),                                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_bool(soap, data, "boolean", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 bool *SOAP_FMAC4 soap_get_bool(struct soap *, bool *, const char *,
                                          const char *);

#ifndef soap_read_bool
#define soap_read_bool(soap, data)                                             \
  (soap_begin_recv(soap) || !ICat4::soap_get_bool(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4__ns1__login_credentials_entry
#define SOAP_TYPE_ICat4__ns1__login_credentials_entry (132)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__login_credentials_entry(
    struct soap *, const char *, int, const _ns1__login_credentials_entry *,
    const char *);
SOAP_FMAC3 _ns1__login_credentials_entry *SOAP_FMAC4
soap_in__ns1__login_credentials_entry(struct soap *, const char *,
                                      _ns1__login_credentials_entry *,
                                      const char *);

#ifndef soap_write__ns1__login_credentials_entry
#define soap_write__ns1__login_credentials_entry(soap, data)                   \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:login-credentials-entry", NULL) ||          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 _ns1__login_credentials_entry *SOAP_FMAC4
soap_get__ns1__login_credentials_entry(struct soap *,
                                       _ns1__login_credentials_entry *,
                                       const char *, const char *);

#ifndef soap_read__ns1__login_credentials_entry
#define soap_read__ns1__login_credentials_entry(soap, data)                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get__ns1__login_credentials_entry(soap, data, NULL,        \
                                                      NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 _ns1__login_credentials_entry *SOAP_FMAC2
soap_instantiate__ns1__login_credentials_entry(struct soap *, int, const char *,
                                               const char *, size_t *);

inline _ns1__login_credentials_entry *
soap_new__ns1__login_credentials_entry(struct soap *soap, int n = -1) {
  return soap_instantiate__ns1__login_credentials_entry(soap, n, nullptr,
                                                        nullptr, nullptr);
}

inline _ns1__login_credentials_entry *
soap_new_req__ns1__login_credentials_entry(struct soap *soap) {
  _ns1__login_credentials_entry *_p =
      soap_instantiate__ns1__login_credentials_entry(soap, -1, nullptr, nullptr,
                                                     nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline _ns1__login_credentials_entry *
soap_new_set__ns1__login_credentials_entry(struct soap *soap, std::string *key,
                                           std::string *value) {
  _ns1__login_credentials_entry *_p =
      soap_instantiate__ns1__login_credentials_entry(soap, -1, nullptr, nullptr,
                                                     nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->_ns1__login_credentials_entry::key = key;
    _p->_ns1__login_credentials_entry::value = value;
  }
  return _p;
}

inline void
soap_delete__ns1__login_credentials_entry(struct soap *soap,
                                          _ns1__login_credentials_entry *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__login_credentials_entry(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4__ns1__login_credentials
#define SOAP_TYPE_ICat4__ns1__login_credentials (131)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out__ns1__login_credentials(struct soap *, const char *, int,
                                 const _ns1__login_credentials *, const char *);
SOAP_FMAC3 _ns1__login_credentials *SOAP_FMAC4 soap_in__ns1__login_credentials(
    struct soap *, const char *, _ns1__login_credentials *, const char *);

#ifndef soap_write__ns1__login_credentials
#define soap_write__ns1__login_credentials(soap, data)                         \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:login-credentials", NULL) ||                \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 _ns1__login_credentials *SOAP_FMAC4 soap_get__ns1__login_credentials(
    struct soap *, _ns1__login_credentials *, const char *, const char *);

#ifndef soap_read__ns1__login_credentials
#define soap_read__ns1__login_credentials(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get__ns1__login_credentials(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 _ns1__login_credentials *SOAP_FMAC2
soap_instantiate__ns1__login_credentials(struct soap *, int, const char *,
                                         const char *, size_t *);

inline _ns1__login_credentials *
soap_new__ns1__login_credentials(struct soap *soap, int n = -1) {
  return soap_instantiate__ns1__login_credentials(soap, n, nullptr, nullptr,
                                                  nullptr);
}

inline _ns1__login_credentials *
soap_new_req__ns1__login_credentials(struct soap *soap) {
  _ns1__login_credentials *_p = soap_instantiate__ns1__login_credentials(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline _ns1__login_credentials *soap_new_set__ns1__login_credentials(
    struct soap *soap, std::vector<_ns1__login_credentials_entry> *entry) {
  _ns1__login_credentials *_p = soap_instantiate__ns1__login_credentials(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->_ns1__login_credentials::entry = entry;
  }
  return _p;
}

inline void soap_delete__ns1__login_credentials(struct soap *soap,
                                                _ns1__login_credentials *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__login_credentials(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__accessType_
#define SOAP_TYPE_ICat4_ns1__accessType_ (122)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__accessType_(struct soap *, const char *,
                                                    int,
                                                    const ns1__accessType_ *,
                                                    const char *);
SOAP_FMAC3 ns1__accessType_ *SOAP_FMAC4 soap_in_ns1__accessType_(
    struct soap *, const char *, ns1__accessType_ *, const char *);

#ifndef soap_write_ns1__accessType_
#define soap_write_ns1__accessType_(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:accessType", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__accessType_ *SOAP_FMAC4 soap_get_ns1__accessType_(
    struct soap *, ns1__accessType_ *, const char *, const char *);

#ifndef soap_read_ns1__accessType_
#define soap_read_ns1__accessType_(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__accessType_(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__accessType_ *SOAP_FMAC2 soap_instantiate_ns1__accessType_(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__accessType_ *soap_new_ns1__accessType_(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__accessType_(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__accessType_ *
soap_new_req_ns1__accessType_(struct soap *soap, enum ns1__accessType __item) {
  ns1__accessType_ *_p =
      soap_instantiate_ns1__accessType_(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__accessType_::__item = __item;
  }
  return _p;
}

inline ns1__accessType_ *
soap_new_set_ns1__accessType_(struct soap *soap, enum ns1__accessType __item,
                              char *__item1) {
  ns1__accessType_ *_p =
      soap_instantiate_ns1__accessType_(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__accessType_::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__accessType_(struct soap *soap,
                                         ns1__accessType_ *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__accessType_(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__relType_
#define SOAP_TYPE_ICat4_ns1__relType_ (120)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__relType_(struct soap *, const char *,
                                                 int, const ns1__relType_ *,
                                                 const char *);
SOAP_FMAC3 ns1__relType_ *SOAP_FMAC4 soap_in_ns1__relType_(struct soap *,
                                                           const char *,
                                                           ns1__relType_ *,
                                                           const char *);

#ifndef soap_write_ns1__relType_
#define soap_write_ns1__relType_(soap, data)                                   \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:relType", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__relType_ *SOAP_FMAC4 soap_get_ns1__relType_(struct soap *,
                                                            ns1__relType_ *,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_ns1__relType_
#define soap_read_ns1__relType_(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__relType_(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__relType_ *SOAP_FMAC2 soap_instantiate_ns1__relType_(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__relType_ *soap_new_ns1__relType_(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__relType_(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__relType_ *soap_new_req_ns1__relType_(struct soap *soap,
                                                 enum ns1__relType __item) {
  ns1__relType_ *_p =
      soap_instantiate_ns1__relType_(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__relType_::__item = __item;
  }
  return _p;
}

inline ns1__relType_ *soap_new_set_ns1__relType_(struct soap *soap,
                                                 enum ns1__relType __item,
                                                 char *__item1) {
  ns1__relType_ *_p =
      soap_instantiate_ns1__relType_(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__relType_::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__relType_(struct soap *soap, ns1__relType_ *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__relType_(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4_ns1__parameterValueType_
#define SOAP_TYPE_ICat4_ns1__parameterValueType_ (118)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parameterValueType_(
    struct soap *, const char *, int, const ns1__parameterValueType_ *,
    const char *);
SOAP_FMAC3 ns1__parameterValueType_ *SOAP_FMAC4
soap_in_ns1__parameterValueType_(struct soap *, const char *,
                                 ns1__parameterValueType_ *, const char *);

#ifndef soap_write_ns1__parameterValueType_
#define soap_write_ns1__parameterValueType_(soap, data)                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:parameterValueType", NULL) ||               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__parameterValueType_ *SOAP_FMAC4
soap_get_ns1__parameterValueType_(struct soap *, ns1__parameterValueType_ *,
                                  const char *, const char *);

#ifndef soap_read_ns1__parameterValueType_
#define soap_read_ns1__parameterValueType_(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__parameterValueType_(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__parameterValueType_ *SOAP_FMAC2
soap_instantiate_ns1__parameterValueType_(struct soap *, int, const char *,
                                          const char *, size_t *);

inline ns1__parameterValueType_ *
soap_new_ns1__parameterValueType_(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__parameterValueType_(soap, n, nullptr, nullptr,
                                                   nullptr);
}

inline ns1__parameterValueType_ *
soap_new_req_ns1__parameterValueType_(struct soap *soap,
                                      enum ns1__parameterValueType __item) {
  ns1__parameterValueType_ *_p = soap_instantiate_ns1__parameterValueType_(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__parameterValueType_::__item = __item;
  }
  return _p;
}

inline ns1__parameterValueType_ *soap_new_set_ns1__parameterValueType_(
    struct soap *soap, enum ns1__parameterValueType __item, char *__item1) {
  ns1__parameterValueType_ *_p = soap_instantiate_ns1__parameterValueType_(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__parameterValueType_::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__parameterValueType_(struct soap *soap,
                                                 ns1__parameterValueType_ *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parameterValueType_(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__studyStatus_
#define SOAP_TYPE_ICat4_ns1__studyStatus_ (116)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__studyStatus_(struct soap *,
                                                     const char *, int,
                                                     const ns1__studyStatus_ *,
                                                     const char *);
SOAP_FMAC3 ns1__studyStatus_ *SOAP_FMAC4 soap_in_ns1__studyStatus_(
    struct soap *, const char *, ns1__studyStatus_ *, const char *);

#ifndef soap_write_ns1__studyStatus_
#define soap_write_ns1__studyStatus_(soap, data)                               \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:studyStatus", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__studyStatus_ *SOAP_FMAC4 soap_get_ns1__studyStatus_(
    struct soap *, ns1__studyStatus_ *, const char *, const char *);

#ifndef soap_read_ns1__studyStatus_
#define soap_read_ns1__studyStatus_(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__studyStatus_(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__studyStatus_ *SOAP_FMAC2 soap_instantiate_ns1__studyStatus_(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__studyStatus_ *soap_new_ns1__studyStatus_(struct soap *soap,
                                                     int n = -1) {
  return soap_instantiate_ns1__studyStatus_(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__studyStatus_ *
soap_new_req_ns1__studyStatus_(struct soap *soap,
                               enum ns1__studyStatus __item) {
  ns1__studyStatus_ *_p =
      soap_instantiate_ns1__studyStatus_(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__studyStatus_::__item = __item;
  }
  return _p;
}

inline ns1__studyStatus_ *
soap_new_set_ns1__studyStatus_(struct soap *soap, enum ns1__studyStatus __item,
                               char *__item1) {
  ns1__studyStatus_ *_p =
      soap_instantiate_ns1__studyStatus_(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__studyStatus_::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__studyStatus_(struct soap *soap,
                                          ns1__studyStatus_ *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__studyStatus_(struct soap *, int, int,
                                                       void *, size_t,
                                                       const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__icatExceptionType_
#define SOAP_TYPE_ICat4_ns1__icatExceptionType_ (114)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__icatExceptionType_(struct soap *, const char *, int,
                                 const ns1__icatExceptionType_ *, const char *);
SOAP_FMAC3 ns1__icatExceptionType_ *SOAP_FMAC4 soap_in_ns1__icatExceptionType_(
    struct soap *, const char *, ns1__icatExceptionType_ *, const char *);

#ifndef soap_write_ns1__icatExceptionType_
#define soap_write_ns1__icatExceptionType_(soap, data)                         \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:icatExceptionType", NULL) ||                \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__icatExceptionType_ *SOAP_FMAC4 soap_get_ns1__icatExceptionType_(
    struct soap *, ns1__icatExceptionType_ *, const char *, const char *);

#ifndef soap_read_ns1__icatExceptionType_
#define soap_read_ns1__icatExceptionType_(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__icatExceptionType_(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__icatExceptionType_ *SOAP_FMAC2
soap_instantiate_ns1__icatExceptionType_(struct soap *, int, const char *,
                                         const char *, size_t *);

inline ns1__icatExceptionType_ *
soap_new_ns1__icatExceptionType_(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__icatExceptionType_(soap, n, nullptr, nullptr,
                                                  nullptr);
}

inline ns1__icatExceptionType_ *
soap_new_req_ns1__icatExceptionType_(struct soap *soap,
                                     enum ns1__icatExceptionType __item) {
  ns1__icatExceptionType_ *_p = soap_instantiate_ns1__icatExceptionType_(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__icatExceptionType_::__item = __item;
  }
  return _p;
}

inline ns1__icatExceptionType_ *soap_new_set_ns1__icatExceptionType_(
    struct soap *soap, enum ns1__icatExceptionType __item, char *__item1) {
  ns1__icatExceptionType_ *_p = soap_instantiate_ns1__icatExceptionType_(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__icatExceptionType_::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__icatExceptionType_(struct soap *soap,
                                                ns1__icatExceptionType_ *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__icatExceptionType_(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getRemainingMinutesResponse
#define SOAP_TYPE_ICat4_ns1__getRemainingMinutesResponse (112)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRemainingMinutesResponse(
    struct soap *, const char *, int, const ns1__getRemainingMinutesResponse *,
    const char *);
SOAP_FMAC3 ns1__getRemainingMinutesResponse *SOAP_FMAC4
soap_in_ns1__getRemainingMinutesResponse(struct soap *, const char *,
                                         ns1__getRemainingMinutesResponse *,
                                         const char *);

#ifndef soap_write_ns1__getRemainingMinutesResponse
#define soap_write_ns1__getRemainingMinutesResponse(soap, data)                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getRemainingMinutesResponse", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getRemainingMinutesResponse *SOAP_FMAC4
soap_get_ns1__getRemainingMinutesResponse(struct soap *,
                                          ns1__getRemainingMinutesResponse *,
                                          const char *, const char *);

#ifndef soap_read_ns1__getRemainingMinutesResponse
#define soap_read_ns1__getRemainingMinutesResponse(soap, data)                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getRemainingMinutesResponse(soap, data, NULL,     \
                                                         NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getRemainingMinutesResponse *SOAP_FMAC2
soap_instantiate_ns1__getRemainingMinutesResponse(struct soap *, int,
                                                  const char *, const char *,
                                                  size_t *);

inline ns1__getRemainingMinutesResponse *
soap_new_ns1__getRemainingMinutesResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__getRemainingMinutesResponse(soap, n, nullptr,
                                                           nullptr, nullptr);
}

inline ns1__getRemainingMinutesResponse *
soap_new_req_ns1__getRemainingMinutesResponse(struct soap *soap,
                                              double return_) {
  ns1__getRemainingMinutesResponse *_p =
      soap_instantiate_ns1__getRemainingMinutesResponse(soap, -1, nullptr,
                                                        nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getRemainingMinutesResponse::return_ = return_;
  }
  return _p;
}

inline ns1__getRemainingMinutesResponse *
soap_new_set_ns1__getRemainingMinutesResponse(struct soap *soap, double return_,
                                              char *__item1) {
  ns1__getRemainingMinutesResponse *_p =
      soap_instantiate_ns1__getRemainingMinutesResponse(soap, -1, nullptr,
                                                        nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getRemainingMinutesResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getRemainingMinutesResponse(
    struct soap *soap, ns1__getRemainingMinutesResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRemainingMinutesResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getRemainingMinutes
#define SOAP_TYPE_ICat4_ns1__getRemainingMinutes (111)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRemainingMinutes(
    struct soap *, const char *, int, const ns1__getRemainingMinutes *,
    const char *);
SOAP_FMAC3 ns1__getRemainingMinutes *SOAP_FMAC4
soap_in_ns1__getRemainingMinutes(struct soap *, const char *,
                                 ns1__getRemainingMinutes *, const char *);

#ifndef soap_write_ns1__getRemainingMinutes
#define soap_write_ns1__getRemainingMinutes(soap, data)                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getRemainingMinutes", NULL) ||              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getRemainingMinutes *SOAP_FMAC4
soap_get_ns1__getRemainingMinutes(struct soap *, ns1__getRemainingMinutes *,
                                  const char *, const char *);

#ifndef soap_read_ns1__getRemainingMinutes
#define soap_read_ns1__getRemainingMinutes(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getRemainingMinutes(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getRemainingMinutes *SOAP_FMAC2
soap_instantiate_ns1__getRemainingMinutes(struct soap *, int, const char *,
                                          const char *, size_t *);

inline ns1__getRemainingMinutes *
soap_new_ns1__getRemainingMinutes(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__getRemainingMinutes(soap, n, nullptr, nullptr,
                                                   nullptr);
}

inline ns1__getRemainingMinutes *
soap_new_req_ns1__getRemainingMinutes(struct soap *soap) {
  ns1__getRemainingMinutes *_p = soap_instantiate_ns1__getRemainingMinutes(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getRemainingMinutes *
soap_new_set_ns1__getRemainingMinutes(struct soap *soap, std::string *sessionId,
                                      char *__item1) {
  ns1__getRemainingMinutes *_p = soap_instantiate_ns1__getRemainingMinutes(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getRemainingMinutes::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getRemainingMinutes(struct soap *soap,
                                                 ns1__getRemainingMinutes *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRemainingMinutes(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__logoutResponse
#define SOAP_TYPE_ICat4_ns1__logoutResponse (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__logoutResponse(struct soap *, const char *, int,
                             const ns1__logoutResponse *, const char *);
SOAP_FMAC3 ns1__logoutResponse *SOAP_FMAC4 soap_in_ns1__logoutResponse(
    struct soap *, const char *, ns1__logoutResponse *, const char *);

#ifndef soap_write_ns1__logoutResponse
#define soap_write_ns1__logoutResponse(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:logoutResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__logoutResponse *SOAP_FMAC4 soap_get_ns1__logoutResponse(
    struct soap *, ns1__logoutResponse *, const char *, const char *);

#ifndef soap_read_ns1__logoutResponse
#define soap_read_ns1__logoutResponse(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__logoutResponse(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__logoutResponse *SOAP_FMAC2 soap_instantiate_ns1__logoutResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__logoutResponse *soap_new_ns1__logoutResponse(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__logoutResponse(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__logoutResponse *
soap_new_req_ns1__logoutResponse(struct soap *soap) {
  ns1__logoutResponse *_p =
      soap_instantiate_ns1__logoutResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__logoutResponse *soap_new_set_ns1__logoutResponse(struct soap *soap,
                                                             char *__item1) {
  ns1__logoutResponse *_p =
      soap_instantiate_ns1__logoutResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__logoutResponse(struct soap *soap,
                                            ns1__logoutResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__logoutResponse(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__logout
#define SOAP_TYPE_ICat4_ns1__logout (109)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__logout(struct soap *, const char *, int,
                                               const ns1__logout *,
                                               const char *);
SOAP_FMAC3 ns1__logout *SOAP_FMAC4 soap_in_ns1__logout(struct soap *,
                                                       const char *,
                                                       ns1__logout *,
                                                       const char *);

#ifndef soap_write_ns1__logout
#define soap_write_ns1__logout(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:logout", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__logout *SOAP_FMAC4 soap_get_ns1__logout(struct soap *,
                                                        ns1__logout *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_ns1__logout
#define soap_read_ns1__logout(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__logout(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__logout *SOAP_FMAC2 soap_instantiate_ns1__logout(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__logout *soap_new_ns1__logout(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__logout(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__logout *soap_new_req_ns1__logout(struct soap *soap) {
  ns1__logout *_p =
      soap_instantiate_ns1__logout(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__logout *soap_new_set_ns1__logout(struct soap *soap,
                                             std::string *sessionId,
                                             char *__item1) {
  ns1__logout *_p =
      soap_instantiate_ns1__logout(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__logout::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__logout(struct soap *soap, ns1__logout *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__logout(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_ns1__searchResponse
#define SOAP_TYPE_ICat4_ns1__searchResponse (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__searchResponse(struct soap *, const char *, int,
                             const ns1__searchResponse *, const char *);
SOAP_FMAC3 ns1__searchResponse *SOAP_FMAC4 soap_in_ns1__searchResponse(
    struct soap *, const char *, ns1__searchResponse *, const char *);

#ifndef soap_write_ns1__searchResponse
#define soap_write_ns1__searchResponse(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:searchResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__searchResponse *SOAP_FMAC4 soap_get_ns1__searchResponse(
    struct soap *, ns1__searchResponse *, const char *, const char *);

#ifndef soap_read_ns1__searchResponse
#define soap_read_ns1__searchResponse(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__searchResponse(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__searchResponse *SOAP_FMAC2 soap_instantiate_ns1__searchResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__searchResponse *soap_new_ns1__searchResponse(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__searchResponse(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__searchResponse *
soap_new_req_ns1__searchResponse(struct soap *soap) {
  ns1__searchResponse *_p =
      soap_instantiate_ns1__searchResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__searchResponse *soap_new_set_ns1__searchResponse(
    struct soap *soap, std::vector<xsd__anyType *> &return_, char *__item1) {
  ns1__searchResponse *_p =
      soap_instantiate_ns1__searchResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__searchResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__searchResponse(struct soap *soap,
                                            ns1__searchResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__searchResponse(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__search
#define SOAP_TYPE_ICat4_ns1__search (107)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__search(struct soap *, const char *, int,
                                               const ns1__search *,
                                               const char *);
SOAP_FMAC3 ns1__search *SOAP_FMAC4 soap_in_ns1__search(struct soap *,
                                                       const char *,
                                                       ns1__search *,
                                                       const char *);

#ifndef soap_write_ns1__search
#define soap_write_ns1__search(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:search", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__search *SOAP_FMAC4 soap_get_ns1__search(struct soap *,
                                                        ns1__search *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_ns1__search
#define soap_read_ns1__search(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__search(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__search *SOAP_FMAC2 soap_instantiate_ns1__search(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__search *soap_new_ns1__search(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__search(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__search *soap_new_req_ns1__search(struct soap *soap) {
  ns1__search *_p =
      soap_instantiate_ns1__search(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__search *soap_new_set_ns1__search(struct soap *soap,
                                             std::string *sessionId,
                                             std::string *query,
                                             char *__item1) {
  ns1__search *_p =
      soap_instantiate_ns1__search(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__search::sessionId = sessionId;
    _p->ns1__search::query = query;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__search(struct soap *soap, ns1__search *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__search(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_ns1__isAccessAllowedResponse
#define SOAP_TYPE_ICat4_ns1__isAccessAllowedResponse (106)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__isAccessAllowedResponse(
    struct soap *, const char *, int, const ns1__isAccessAllowedResponse *,
    const char *);
SOAP_FMAC3 ns1__isAccessAllowedResponse *SOAP_FMAC4
soap_in_ns1__isAccessAllowedResponse(struct soap *, const char *,
                                     ns1__isAccessAllowedResponse *,
                                     const char *);

#ifndef soap_write_ns1__isAccessAllowedResponse
#define soap_write_ns1__isAccessAllowedResponse(soap, data)                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:isAccessAllowedResponse", NULL) ||          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__isAccessAllowedResponse *SOAP_FMAC4
soap_get_ns1__isAccessAllowedResponse(struct soap *,
                                      ns1__isAccessAllowedResponse *,
                                      const char *, const char *);

#ifndef soap_read_ns1__isAccessAllowedResponse
#define soap_read_ns1__isAccessAllowedResponse(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__isAccessAllowedResponse(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__isAccessAllowedResponse *SOAP_FMAC2
soap_instantiate_ns1__isAccessAllowedResponse(struct soap *, int, const char *,
                                              const char *, size_t *);

inline ns1__isAccessAllowedResponse *
soap_new_ns1__isAccessAllowedResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__isAccessAllowedResponse(soap, n, nullptr,
                                                       nullptr, nullptr);
}

inline ns1__isAccessAllowedResponse *
soap_new_req_ns1__isAccessAllowedResponse(struct soap *soap, bool return_) {
  ns1__isAccessAllowedResponse *_p =
      soap_instantiate_ns1__isAccessAllowedResponse(soap, -1, nullptr, nullptr,
                                                    nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__isAccessAllowedResponse::return_ = return_;
  }
  return _p;
}

inline ns1__isAccessAllowedResponse *
soap_new_set_ns1__isAccessAllowedResponse(struct soap *soap, bool return_,
                                          char *__item1) {
  ns1__isAccessAllowedResponse *_p =
      soap_instantiate_ns1__isAccessAllowedResponse(soap, -1, nullptr, nullptr,
                                                    nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__isAccessAllowedResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__isAccessAllowedResponse(struct soap *soap,
                                         ns1__isAccessAllowedResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__isAccessAllowedResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__isAccessAllowed
#define SOAP_TYPE_ICat4_ns1__isAccessAllowed (105)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__isAccessAllowed(struct soap *, const char *, int,
                              const ns1__isAccessAllowed *, const char *);
SOAP_FMAC3 ns1__isAccessAllowed *SOAP_FMAC4 soap_in_ns1__isAccessAllowed(
    struct soap *, const char *, ns1__isAccessAllowed *, const char *);

#ifndef soap_write_ns1__isAccessAllowed
#define soap_write_ns1__isAccessAllowed(soap, data)                            \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:isAccessAllowed", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__isAccessAllowed *SOAP_FMAC4 soap_get_ns1__isAccessAllowed(
    struct soap *, ns1__isAccessAllowed *, const char *, const char *);

#ifndef soap_read_ns1__isAccessAllowed
#define soap_read_ns1__isAccessAllowed(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__isAccessAllowed(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__isAccessAllowed *SOAP_FMAC2
soap_instantiate_ns1__isAccessAllowed(struct soap *, int, const char *,
                                      const char *, size_t *);

inline ns1__isAccessAllowed *soap_new_ns1__isAccessAllowed(struct soap *soap,
                                                           int n = -1) {
  return soap_instantiate_ns1__isAccessAllowed(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline ns1__isAccessAllowed *
soap_new_req_ns1__isAccessAllowed(struct soap *soap) {
  ns1__isAccessAllowed *_p = soap_instantiate_ns1__isAccessAllowed(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__isAccessAllowed *soap_new_set_ns1__isAccessAllowed(
    struct soap *soap, std::string *sessionId, ns1__entityBaseBean *bean,
    enum ns1__accessType *accessType, char *__item1) {
  ns1__isAccessAllowed *_p = soap_instantiate_ns1__isAccessAllowed(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__isAccessAllowed::sessionId = sessionId;
    _p->ns1__isAccessAllowed::bean = bean;
    _p->ns1__isAccessAllowed::accessType = accessType;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__isAccessAllowed(struct soap *soap,
                                             ns1__isAccessAllowed *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__isAccessAllowed(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__deleteResponse
#define SOAP_TYPE_ICat4_ns1__deleteResponse (104)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__deleteResponse(struct soap *, const char *, int,
                             const ns1__deleteResponse *, const char *);
SOAP_FMAC3 ns1__deleteResponse *SOAP_FMAC4 soap_in_ns1__deleteResponse(
    struct soap *, const char *, ns1__deleteResponse *, const char *);

#ifndef soap_write_ns1__deleteResponse
#define soap_write_ns1__deleteResponse(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:deleteResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__deleteResponse *SOAP_FMAC4 soap_get_ns1__deleteResponse(
    struct soap *, ns1__deleteResponse *, const char *, const char *);

#ifndef soap_read_ns1__deleteResponse
#define soap_read_ns1__deleteResponse(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__deleteResponse(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__deleteResponse *SOAP_FMAC2 soap_instantiate_ns1__deleteResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__deleteResponse *soap_new_ns1__deleteResponse(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__deleteResponse(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__deleteResponse *
soap_new_req_ns1__deleteResponse(struct soap *soap) {
  ns1__deleteResponse *_p =
      soap_instantiate_ns1__deleteResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__deleteResponse *soap_new_set_ns1__deleteResponse(struct soap *soap,
                                                             char *__item1) {
  ns1__deleteResponse *_p =
      soap_instantiate_ns1__deleteResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__deleteResponse(struct soap *soap,
                                            ns1__deleteResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteResponse(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__delete
#define SOAP_TYPE_ICat4_ns1__delete (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__delete(struct soap *, const char *, int,
                                               const ns1__delete *,
                                               const char *);
SOAP_FMAC3 ns1__delete *SOAP_FMAC4 soap_in_ns1__delete(struct soap *,
                                                       const char *,
                                                       ns1__delete *,
                                                       const char *);

#ifndef soap_write_ns1__delete
#define soap_write_ns1__delete(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:delete", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__delete *SOAP_FMAC4 soap_get_ns1__delete(struct soap *,
                                                        ns1__delete *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_ns1__delete
#define soap_read_ns1__delete(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__delete(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__delete *SOAP_FMAC2 soap_instantiate_ns1__delete(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__delete *soap_new_ns1__delete(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__delete(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__delete *soap_new_req_ns1__delete(struct soap *soap) {
  ns1__delete *_p =
      soap_instantiate_ns1__delete(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__delete *soap_new_set_ns1__delete(struct soap *soap,
                                             std::string *sessionId,
                                             ns1__entityBaseBean *bean,
                                             char *__item1) {
  ns1__delete *_p =
      soap_instantiate_ns1__delete(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__delete::sessionId = sessionId;
    _p->ns1__delete::bean = bean;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__delete(struct soap *soap, ns1__delete *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__delete(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_ns1__searchTextResponse
#define SOAP_TYPE_ICat4_ns1__searchTextResponse (102)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__searchTextResponse(struct soap *, const char *, int,
                                 const ns1__searchTextResponse *, const char *);
SOAP_FMAC3 ns1__searchTextResponse *SOAP_FMAC4 soap_in_ns1__searchTextResponse(
    struct soap *, const char *, ns1__searchTextResponse *, const char *);

#ifndef soap_write_ns1__searchTextResponse
#define soap_write_ns1__searchTextResponse(soap, data)                         \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:searchTextResponse", NULL) ||               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__searchTextResponse *SOAP_FMAC4 soap_get_ns1__searchTextResponse(
    struct soap *, ns1__searchTextResponse *, const char *, const char *);

#ifndef soap_read_ns1__searchTextResponse
#define soap_read_ns1__searchTextResponse(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__searchTextResponse(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__searchTextResponse *SOAP_FMAC2
soap_instantiate_ns1__searchTextResponse(struct soap *, int, const char *,
                                         const char *, size_t *);

inline ns1__searchTextResponse *
soap_new_ns1__searchTextResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__searchTextResponse(soap, n, nullptr, nullptr,
                                                  nullptr);
}

inline ns1__searchTextResponse *
soap_new_req_ns1__searchTextResponse(struct soap *soap) {
  ns1__searchTextResponse *_p = soap_instantiate_ns1__searchTextResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__searchTextResponse *soap_new_set_ns1__searchTextResponse(
    struct soap *soap, std::vector<xsd__anyType *> &return_, char *__item1) {
  ns1__searchTextResponse *_p = soap_instantiate_ns1__searchTextResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__searchTextResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__searchTextResponse(struct soap *soap,
                                                ns1__searchTextResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__searchTextResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__searchText
#define SOAP_TYPE_ICat4_ns1__searchText (101)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__searchText(struct soap *, const char *,
                                                   int, const ns1__searchText *,
                                                   const char *);
SOAP_FMAC3 ns1__searchText *SOAP_FMAC4 soap_in_ns1__searchText(
    struct soap *, const char *, ns1__searchText *, const char *);

#ifndef soap_write_ns1__searchText
#define soap_write_ns1__searchText(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:searchText", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__searchText *SOAP_FMAC4 soap_get_ns1__searchText(
    struct soap *, ns1__searchText *, const char *, const char *);

#ifndef soap_read_ns1__searchText
#define soap_read_ns1__searchText(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__searchText(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__searchText *SOAP_FMAC2 soap_instantiate_ns1__searchText(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__searchText *soap_new_ns1__searchText(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__searchText(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__searchText *soap_new_req_ns1__searchText(struct soap *soap,
                                                     int maxCount) {
  ns1__searchText *_p =
      soap_instantiate_ns1__searchText(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__searchText::maxCount = maxCount;
  }
  return _p;
}

inline ns1__searchText *
soap_new_set_ns1__searchText(struct soap *soap, std::string *sessionId,
                             std::string *query, int maxCount,
                             std::string *entityName, char *__item1) {
  ns1__searchText *_p =
      soap_instantiate_ns1__searchText(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__searchText::sessionId = sessionId;
    _p->ns1__searchText::query = query;
    _p->ns1__searchText::maxCount = maxCount;
    _p->ns1__searchText::entityName = entityName;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__searchText(struct soap *soap, ns1__searchText *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__searchText(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneCommitResponse
#define SOAP_TYPE_ICat4_ns1__luceneCommitResponse (100)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneCommitResponse(
    struct soap *, const char *, int, const ns1__luceneCommitResponse *,
    const char *);
SOAP_FMAC3 ns1__luceneCommitResponse *SOAP_FMAC4
soap_in_ns1__luceneCommitResponse(struct soap *, const char *,
                                  ns1__luceneCommitResponse *, const char *);

#ifndef soap_write_ns1__luceneCommitResponse
#define soap_write_ns1__luceneCommitResponse(soap, data)                       \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:luceneCommitResponse", NULL) ||             \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneCommitResponse *SOAP_FMAC4
soap_get_ns1__luceneCommitResponse(struct soap *, ns1__luceneCommitResponse *,
                                   const char *, const char *);

#ifndef soap_read_ns1__luceneCommitResponse
#define soap_read_ns1__luceneCommitResponse(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneCommitResponse(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneCommitResponse *SOAP_FMAC2
soap_instantiate_ns1__luceneCommitResponse(struct soap *, int, const char *,
                                           const char *, size_t *);

inline ns1__luceneCommitResponse *
soap_new_ns1__luceneCommitResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__luceneCommitResponse(soap, n, nullptr, nullptr,
                                                    nullptr);
}

inline ns1__luceneCommitResponse *
soap_new_req_ns1__luceneCommitResponse(struct soap *soap) {
  ns1__luceneCommitResponse *_p = soap_instantiate_ns1__luceneCommitResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__luceneCommitResponse *
soap_new_set_ns1__luceneCommitResponse(struct soap *soap, char *__item1) {
  ns1__luceneCommitResponse *_p = soap_instantiate_ns1__luceneCommitResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__luceneCommitResponse(struct soap *soap,
                                      ns1__luceneCommitResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneCommitResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneCommit
#define SOAP_TYPE_ICat4_ns1__luceneCommit (99)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneCommit(struct soap *,
                                                     const char *, int,
                                                     const ns1__luceneCommit *,
                                                     const char *);
SOAP_FMAC3 ns1__luceneCommit *SOAP_FMAC4 soap_in_ns1__luceneCommit(
    struct soap *, const char *, ns1__luceneCommit *, const char *);

#ifndef soap_write_ns1__luceneCommit
#define soap_write_ns1__luceneCommit(soap, data)                               \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:luceneCommit", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneCommit *SOAP_FMAC4 soap_get_ns1__luceneCommit(
    struct soap *, ns1__luceneCommit *, const char *, const char *);

#ifndef soap_read_ns1__luceneCommit
#define soap_read_ns1__luceneCommit(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneCommit(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneCommit *SOAP_FMAC2 soap_instantiate_ns1__luceneCommit(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__luceneCommit *soap_new_ns1__luceneCommit(struct soap *soap,
                                                     int n = -1) {
  return soap_instantiate_ns1__luceneCommit(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__luceneCommit *soap_new_req_ns1__luceneCommit(struct soap *soap) {
  ns1__luceneCommit *_p =
      soap_instantiate_ns1__luceneCommit(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__luceneCommit *soap_new_set_ns1__luceneCommit(struct soap *soap,
                                                         std::string *sessionId,
                                                         char *__item1) {
  ns1__luceneCommit *_p =
      soap_instantiate_ns1__luceneCommit(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__luceneCommit::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__luceneCommit(struct soap *soap,
                                          ns1__luceneCommit *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneCommit(struct soap *, int, int,
                                                       void *, size_t,
                                                       const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__entityField
#define SOAP_TYPE_ICat4_ns1__entityField (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__entityField(struct soap *, const char *,
                                                    int,
                                                    const ns1__entityField *,
                                                    const char *);
SOAP_FMAC3 ns1__entityField *SOAP_FMAC4 soap_in_ns1__entityField(
    struct soap *, const char *, ns1__entityField *, const char *);

#ifndef soap_write_ns1__entityField
#define soap_write_ns1__entityField(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:entityField", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__entityField *SOAP_FMAC4 soap_get_ns1__entityField(
    struct soap *, ns1__entityField *, const char *, const char *);

#ifndef soap_read_ns1__entityField
#define soap_read_ns1__entityField(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__entityField(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__entityField *SOAP_FMAC2 soap_instantiate_ns1__entityField(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__entityField *soap_new_ns1__entityField(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__entityField(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__entityField *soap_new_req_ns1__entityField(struct soap *soap,
                                                       bool notNullable) {
  ns1__entityField *_p =
      soap_instantiate_ns1__entityField(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__entityField::notNullable = notNullable;
  }
  return _p;
}

inline ns1__entityField *
soap_new_set_ns1__entityField(struct soap *soap, std::string *comment,
                              std::string *name, bool notNullable,
                              enum ns1__relType *relType, int *stringLength,
                              std::string *type, char *__item1) {
  ns1__entityField *_p =
      soap_instantiate_ns1__entityField(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__entityField::comment = comment;
    _p->ns1__entityField::name = name;
    _p->ns1__entityField::notNullable = notNullable;
    _p->ns1__entityField::relType = relType;
    _p->ns1__entityField::stringLength = stringLength;
    _p->ns1__entityField::type = type;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__entityField(struct soap *soap,
                                         ns1__entityField *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__entityField(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__constraint
#define SOAP_TYPE_ICat4_ns1__constraint (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__constraint(struct soap *, const char *,
                                                   int, const ns1__constraint *,
                                                   const char *);
SOAP_FMAC3 ns1__constraint *SOAP_FMAC4 soap_in_ns1__constraint(
    struct soap *, const char *, ns1__constraint *, const char *);

#ifndef soap_write_ns1__constraint
#define soap_write_ns1__constraint(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:constraint", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__constraint *SOAP_FMAC4 soap_get_ns1__constraint(
    struct soap *, ns1__constraint *, const char *, const char *);

#ifndef soap_read_ns1__constraint
#define soap_read_ns1__constraint(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__constraint(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__constraint *SOAP_FMAC2 soap_instantiate_ns1__constraint(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__constraint *soap_new_ns1__constraint(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__constraint(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__constraint *soap_new_req_ns1__constraint(struct soap *soap) {
  ns1__constraint *_p =
      soap_instantiate_ns1__constraint(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__constraint *soap_new_set_ns1__constraint(
    struct soap *soap, std::vector<std::string> &fieldNames, char *__item1) {
  ns1__constraint *_p =
      soap_instantiate_ns1__constraint(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__constraint::fieldNames = fieldNames;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__constraint(struct soap *soap, ns1__constraint *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__constraint(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__entityInfo
#define SOAP_TYPE_ICat4_ns1__entityInfo (96)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__entityInfo(struct soap *, const char *,
                                                   int, const ns1__entityInfo *,
                                                   const char *);
SOAP_FMAC3 ns1__entityInfo *SOAP_FMAC4 soap_in_ns1__entityInfo(
    struct soap *, const char *, ns1__entityInfo *, const char *);

#ifndef soap_write_ns1__entityInfo
#define soap_write_ns1__entityInfo(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:entityInfo", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__entityInfo *SOAP_FMAC4 soap_get_ns1__entityInfo(
    struct soap *, ns1__entityInfo *, const char *, const char *);

#ifndef soap_read_ns1__entityInfo
#define soap_read_ns1__entityInfo(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__entityInfo(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__entityInfo *SOAP_FMAC2 soap_instantiate_ns1__entityInfo(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__entityInfo *soap_new_ns1__entityInfo(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__entityInfo(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__entityInfo *soap_new_req_ns1__entityInfo(struct soap *soap) {
  ns1__entityInfo *_p =
      soap_instantiate_ns1__entityInfo(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__entityInfo *
soap_new_set_ns1__entityInfo(struct soap *soap, std::string *classComment,
                             std::vector<ns1__constraint *> &constraints,
                             std::vector<ns1__entityField *> &fields,
                             char *__item1) {
  ns1__entityInfo *_p =
      soap_instantiate_ns1__entityInfo(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__entityInfo::classComment = classComment;
    _p->ns1__entityInfo::constraints = constraints;
    _p->ns1__entityInfo::fields = fields;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__entityInfo(struct soap *soap, ns1__entityInfo *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__entityInfo(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getEntityInfoResponse
#define SOAP_TYPE_ICat4_ns1__getEntityInfoResponse (95)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getEntityInfoResponse(
    struct soap *, const char *, int, const ns1__getEntityInfoResponse *,
    const char *);
SOAP_FMAC3 ns1__getEntityInfoResponse *SOAP_FMAC4
soap_in_ns1__getEntityInfoResponse(struct soap *, const char *,
                                   ns1__getEntityInfoResponse *, const char *);

#ifndef soap_write_ns1__getEntityInfoResponse
#define soap_write_ns1__getEntityInfoResponse(soap, data)                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getEntityInfoResponse", NULL) ||            \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityInfoResponse *SOAP_FMAC4
soap_get_ns1__getEntityInfoResponse(struct soap *, ns1__getEntityInfoResponse *,
                                    const char *, const char *);

#ifndef soap_read_ns1__getEntityInfoResponse
#define soap_read_ns1__getEntityInfoResponse(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getEntityInfoResponse(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getEntityInfoResponse *SOAP_FMAC2
soap_instantiate_ns1__getEntityInfoResponse(struct soap *, int, const char *,
                                            const char *, size_t *);

inline ns1__getEntityInfoResponse *
soap_new_ns1__getEntityInfoResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__getEntityInfoResponse(soap, n, nullptr, nullptr,
                                                     nullptr);
}

inline ns1__getEntityInfoResponse *
soap_new_req_ns1__getEntityInfoResponse(struct soap *soap) {
  ns1__getEntityInfoResponse *_p = soap_instantiate_ns1__getEntityInfoResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getEntityInfoResponse *soap_new_set_ns1__getEntityInfoResponse(
    struct soap *soap, ns1__entityInfo *return_, char *__item1) {
  ns1__getEntityInfoResponse *_p = soap_instantiate_ns1__getEntityInfoResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getEntityInfoResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__getEntityInfoResponse(struct soap *soap,
                                       ns1__getEntityInfoResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEntityInfoResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getEntityInfo
#define SOAP_TYPE_ICat4_ns1__getEntityInfo (94)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getEntityInfo(
    struct soap *, const char *, int, const ns1__getEntityInfo *, const char *);
SOAP_FMAC3 ns1__getEntityInfo *SOAP_FMAC4 soap_in_ns1__getEntityInfo(
    struct soap *, const char *, ns1__getEntityInfo *, const char *);

#ifndef soap_write_ns1__getEntityInfo
#define soap_write_ns1__getEntityInfo(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getEntityInfo", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityInfo *SOAP_FMAC4 soap_get_ns1__getEntityInfo(
    struct soap *, ns1__getEntityInfo *, const char *, const char *);

#ifndef soap_read_ns1__getEntityInfo
#define soap_read_ns1__getEntityInfo(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getEntityInfo(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getEntityInfo *SOAP_FMAC2 soap_instantiate_ns1__getEntityInfo(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__getEntityInfo *soap_new_ns1__getEntityInfo(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__getEntityInfo(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__getEntityInfo *soap_new_req_ns1__getEntityInfo(struct soap *soap) {
  ns1__getEntityInfo *_p =
      soap_instantiate_ns1__getEntityInfo(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getEntityInfo *
soap_new_set_ns1__getEntityInfo(struct soap *soap, std::string *beanName,
                                char *__item1) {
  ns1__getEntityInfo *_p =
      soap_instantiate_ns1__getEntityInfo(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getEntityInfo::beanName = beanName;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getEntityInfo(struct soap *soap,
                                           ns1__getEntityInfo *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEntityInfo(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__dummyResponse
#define SOAP_TYPE_ICat4_ns1__dummyResponse (93)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dummyResponse(
    struct soap *, const char *, int, const ns1__dummyResponse *, const char *);
SOAP_FMAC3 ns1__dummyResponse *SOAP_FMAC4 soap_in_ns1__dummyResponse(
    struct soap *, const char *, ns1__dummyResponse *, const char *);

#ifndef soap_write_ns1__dummyResponse
#define soap_write_ns1__dummyResponse(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:dummyResponse", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dummyResponse *SOAP_FMAC4 soap_get_ns1__dummyResponse(
    struct soap *, ns1__dummyResponse *, const char *, const char *);

#ifndef soap_read_ns1__dummyResponse
#define soap_read_ns1__dummyResponse(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__dummyResponse(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__dummyResponse *SOAP_FMAC2 soap_instantiate_ns1__dummyResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__dummyResponse *soap_new_ns1__dummyResponse(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__dummyResponse(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__dummyResponse *soap_new_req_ns1__dummyResponse(struct soap *soap) {
  ns1__dummyResponse *_p =
      soap_instantiate_ns1__dummyResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__dummyResponse *soap_new_set_ns1__dummyResponse(struct soap *soap,
                                                           char *__item1) {
  ns1__dummyResponse *_p =
      soap_instantiate_ns1__dummyResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__dummyResponse(struct soap *soap,
                                           ns1__dummyResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dummyResponse(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__publicStep
#define SOAP_TYPE_ICat4_ns1__publicStep (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__publicStep(struct soap *, const char *,
                                                   int, const ns1__publicStep *,
                                                   const char *);
SOAP_FMAC3 ns1__publicStep *SOAP_FMAC4 soap_in_ns1__publicStep(
    struct soap *, const char *, ns1__publicStep *, const char *);

#ifndef soap_write_ns1__publicStep
#define soap_write_ns1__publicStep(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:publicStep", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__publicStep *SOAP_FMAC4 soap_get_ns1__publicStep(
    struct soap *, ns1__publicStep *, const char *, const char *);

#ifndef soap_read_ns1__publicStep
#define soap_read_ns1__publicStep(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__publicStep(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__publicStep *SOAP_FMAC2 soap_instantiate_ns1__publicStep(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__publicStep *soap_new_ns1__publicStep(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__publicStep(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__publicStep *soap_new_req_ns1__publicStep(struct soap *soap) {
  ns1__publicStep *_p =
      soap_instantiate_ns1__publicStep(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__publicStep *
soap_new_set_ns1__publicStep(struct soap *soap, std::string *field,
                             std::string *origin, std::string *createId1,
                             time_t *createTime1, time_t *modTime1, LONG64 *id1,
                             std::string *modId1, char *__item2) {
  ns1__publicStep *_p =
      soap_instantiate_ns1__publicStep(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__publicStep::field = field;
    _p->ns1__publicStep::origin = origin;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__publicStep(struct soap *soap, ns1__publicStep *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__publicStep(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__log
#define SOAP_TYPE_ICat4_ns1__log (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__log(struct soap *, const char *, int,
                                            const ns1__log *, const char *);
SOAP_FMAC3 ns1__log *SOAP_FMAC4 soap_in_ns1__log(struct soap *, const char *,
                                                 ns1__log *, const char *);

#ifndef soap_write_ns1__log
#define soap_write_ns1__log(soap, data)                                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:log", NULL) ||         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__log *SOAP_FMAC4 soap_get_ns1__log(struct soap *, ns1__log *,
                                                  const char *, const char *);

#ifndef soap_read_ns1__log
#define soap_read_ns1__log(soap, data)                                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__log(soap, data, NULL, NULL) ||                    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__log *SOAP_FMAC2 soap_instantiate_ns1__log(struct soap *, int,
                                                          const char *,
                                                          const char *,
                                                          size_t *);

inline ns1__log *soap_new_ns1__log(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__log(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__log *soap_new_req_ns1__log(struct soap *soap, LONG64 duration) {
  ns1__log *_p = soap_instantiate_ns1__log(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__log::duration = duration;
  }
  return _p;
}

inline ns1__log *
soap_new_set_ns1__log(struct soap *soap, LONG64 duration, LONG64 *entityId,
                      std::string *entityName, std::string *operation,
                      std::string *query, std::string *createId1,
                      time_t *createTime1, time_t *modTime1, LONG64 *id1,
                      std::string *modId1, char *__item2) {
  ns1__log *_p = soap_instantiate_ns1__log(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__log::duration = duration;
    _p->ns1__log::entityId = entityId;
    _p->ns1__log::entityName = entityName;
    _p->ns1__log::operation = operation;
    _p->ns1__log::query = query;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__log(struct soap *soap, ns1__log *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__log(struct soap *, int, int, void *,
                                              size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__relatedDatafile
#define SOAP_TYPE_ICat4_ns1__relatedDatafile (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__relatedDatafile(struct soap *, const char *, int,
                              const ns1__relatedDatafile *, const char *);
SOAP_FMAC3 ns1__relatedDatafile *SOAP_FMAC4 soap_in_ns1__relatedDatafile(
    struct soap *, const char *, ns1__relatedDatafile *, const char *);

#ifndef soap_write_ns1__relatedDatafile
#define soap_write_ns1__relatedDatafile(soap, data)                            \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:relatedDatafile", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__relatedDatafile *SOAP_FMAC4 soap_get_ns1__relatedDatafile(
    struct soap *, ns1__relatedDatafile *, const char *, const char *);

#ifndef soap_read_ns1__relatedDatafile
#define soap_read_ns1__relatedDatafile(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__relatedDatafile(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__relatedDatafile *SOAP_FMAC2
soap_instantiate_ns1__relatedDatafile(struct soap *, int, const char *,
                                      const char *, size_t *);

inline ns1__relatedDatafile *soap_new_ns1__relatedDatafile(struct soap *soap,
                                                           int n = -1) {
  return soap_instantiate_ns1__relatedDatafile(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline ns1__relatedDatafile *
soap_new_req_ns1__relatedDatafile(struct soap *soap) {
  ns1__relatedDatafile *_p = soap_instantiate_ns1__relatedDatafile(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__relatedDatafile *soap_new_set_ns1__relatedDatafile(
    struct soap *soap, ns1__datafile *destDatafile, std::string *relation,
    ns1__datafile *sourceDatafile, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__relatedDatafile *_p = soap_instantiate_ns1__relatedDatafile(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__relatedDatafile::destDatafile = destDatafile;
    _p->ns1__relatedDatafile::relation = relation;
    _p->ns1__relatedDatafile::sourceDatafile = sourceDatafile;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__relatedDatafile(struct soap *soap,
                                             ns1__relatedDatafile *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__relatedDatafile(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__shift
#define SOAP_TYPE_ICat4_ns1__shift (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__shift(struct soap *, const char *, int,
                                              const ns1__shift *, const char *);
SOAP_FMAC3 ns1__shift *SOAP_FMAC4 soap_in_ns1__shift(struct soap *,
                                                     const char *, ns1__shift *,
                                                     const char *);

#ifndef soap_write_ns1__shift
#define soap_write_ns1__shift(soap, data)                                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:shift", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__shift *SOAP_FMAC4 soap_get_ns1__shift(struct soap *,
                                                      ns1__shift *,
                                                      const char *,
                                                      const char *);

#ifndef soap_read_ns1__shift
#define soap_read_ns1__shift(soap, data)                                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__shift(soap, data, NULL, NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__shift *SOAP_FMAC2 soap_instantiate_ns1__shift(struct soap *,
                                                              int, const char *,
                                                              const char *,
                                                              size_t *);

inline ns1__shift *soap_new_ns1__shift(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__shift(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__shift *soap_new_req_ns1__shift(struct soap *soap) {
  ns1__shift *_p =
      soap_instantiate_ns1__shift(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__shift *
soap_new_set_ns1__shift(struct soap *soap, std::string *comment,
                        time_t *endDate, ns1__investigation *investigation,
                        time_t *startDate, std::string *createId1,
                        time_t *createTime1, time_t *modTime1, LONG64 *id1,
                        std::string *modId1, char *__item2) {
  ns1__shift *_p =
      soap_instantiate_ns1__shift(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__shift::comment = comment;
    _p->ns1__shift::endDate = endDate;
    _p->ns1__shift::investigation = investigation;
    _p->ns1__shift::startDate = startDate;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__shift(struct soap *soap, ns1__shift *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__shift(struct soap *, int, int, void *,
                                                size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__publication
#define SOAP_TYPE_ICat4_ns1__publication (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__publication(struct soap *, const char *,
                                                    int,
                                                    const ns1__publication *,
                                                    const char *);
SOAP_FMAC3 ns1__publication *SOAP_FMAC4 soap_in_ns1__publication(
    struct soap *, const char *, ns1__publication *, const char *);

#ifndef soap_write_ns1__publication
#define soap_write_ns1__publication(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:publication", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__publication *SOAP_FMAC4 soap_get_ns1__publication(
    struct soap *, ns1__publication *, const char *, const char *);

#ifndef soap_read_ns1__publication
#define soap_read_ns1__publication(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__publication(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__publication *SOAP_FMAC2 soap_instantiate_ns1__publication(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__publication *soap_new_ns1__publication(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__publication(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__publication *soap_new_req_ns1__publication(struct soap *soap) {
  ns1__publication *_p =
      soap_instantiate_ns1__publication(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__publication *soap_new_set_ns1__publication(
    struct soap *soap, std::string *doi, std::string *fullReference,
    ns1__investigation *investigation, std::string *repository,
    std::string *repositoryId, std::string *url, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__publication *_p =
      soap_instantiate_ns1__publication(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__publication::doi = doi;
    _p->ns1__publication::fullReference = fullReference;
    _p->ns1__publication::investigation = investigation;
    _p->ns1__publication::repository = repository;
    _p->ns1__publication::repositoryId = repositoryId;
    _p->ns1__publication::url = url;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__publication(struct soap *soap,
                                         ns1__publication *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__publication(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__keyword
#define SOAP_TYPE_ICat4_ns1__keyword (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__keyword(struct soap *, const char *,
                                                int, const ns1__keyword *,
                                                const char *);
SOAP_FMAC3 ns1__keyword *SOAP_FMAC4 soap_in_ns1__keyword(struct soap *,
                                                         const char *,
                                                         ns1__keyword *,
                                                         const char *);

#ifndef soap_write_ns1__keyword
#define soap_write_ns1__keyword(soap, data)                                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:keyword", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__keyword *SOAP_FMAC4 soap_get_ns1__keyword(struct soap *,
                                                          ns1__keyword *,
                                                          const char *,
                                                          const char *);

#ifndef soap_read_ns1__keyword
#define soap_read_ns1__keyword(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__keyword(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__keyword *SOAP_FMAC2 soap_instantiate_ns1__keyword(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__keyword *soap_new_ns1__keyword(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__keyword(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__keyword *soap_new_req_ns1__keyword(struct soap *soap) {
  ns1__keyword *_p =
      soap_instantiate_ns1__keyword(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__keyword *
soap_new_set_ns1__keyword(struct soap *soap, ns1__investigation *investigation,
                          std::string *name, std::string *createId1,
                          time_t *createTime1, time_t *modTime1, LONG64 *id1,
                          std::string *modId1, char *__item2) {
  ns1__keyword *_p =
      soap_instantiate_ns1__keyword(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__keyword::investigation = investigation;
    _p->ns1__keyword::name = name;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__keyword(struct soap *soap, ns1__keyword *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__keyword(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef SOAP_TYPE_ICat4_ns1__sampleType
#define SOAP_TYPE_ICat4_ns1__sampleType (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sampleType(struct soap *, const char *,
                                                   int, const ns1__sampleType *,
                                                   const char *);
SOAP_FMAC3 ns1__sampleType *SOAP_FMAC4 soap_in_ns1__sampleType(
    struct soap *, const char *, ns1__sampleType *, const char *);

#ifndef soap_write_ns1__sampleType
#define soap_write_ns1__sampleType(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:sampleType", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__sampleType *SOAP_FMAC4 soap_get_ns1__sampleType(
    struct soap *, ns1__sampleType *, const char *, const char *);

#ifndef soap_read_ns1__sampleType
#define soap_read_ns1__sampleType(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__sampleType(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__sampleType *SOAP_FMAC2 soap_instantiate_ns1__sampleType(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__sampleType *soap_new_ns1__sampleType(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__sampleType(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__sampleType *soap_new_req_ns1__sampleType(struct soap *soap) {
  ns1__sampleType *_p =
      soap_instantiate_ns1__sampleType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__sampleType *soap_new_set_ns1__sampleType(
    struct soap *soap, ns1__facility *facility, std::string *molecularFormula,
    std::string *name, std::string *safetyInformation,
    std::vector<ns1__sample *> &samples, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__sampleType *_p =
      soap_instantiate_ns1__sampleType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__sampleType::facility = facility;
    _p->ns1__sampleType::molecularFormula = molecularFormula;
    _p->ns1__sampleType::name = name;
    _p->ns1__sampleType::safetyInformation = safetyInformation;
    _p->ns1__sampleType::samples = samples;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__sampleType(struct soap *soap, ns1__sampleType *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sampleType(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__sample
#define SOAP_TYPE_ICat4_ns1__sample (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sample(struct soap *, const char *, int,
                                               const ns1__sample *,
                                               const char *);
SOAP_FMAC3 ns1__sample *SOAP_FMAC4 soap_in_ns1__sample(struct soap *,
                                                       const char *,
                                                       ns1__sample *,
                                                       const char *);

#ifndef soap_write_ns1__sample
#define soap_write_ns1__sample(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:sample", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__sample *SOAP_FMAC4 soap_get_ns1__sample(struct soap *,
                                                        ns1__sample *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_ns1__sample
#define soap_read_ns1__sample(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__sample(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__sample *SOAP_FMAC2 soap_instantiate_ns1__sample(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__sample *soap_new_ns1__sample(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__sample(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__sample *soap_new_req_ns1__sample(struct soap *soap) {
  ns1__sample *_p =
      soap_instantiate_ns1__sample(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__sample *soap_new_set_ns1__sample(
    struct soap *soap, std::vector<ns1__dataset *> &datasets,
    ns1__investigation *investigation, std::string *name,
    std::vector<ns1__sampleParameter *> &parameters, ns1__sampleType *type,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__sample *_p =
      soap_instantiate_ns1__sample(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__sample::datasets = datasets;
    _p->ns1__sample::investigation = investigation;
    _p->ns1__sample::name = name;
    _p->ns1__sample::parameters = parameters;
    _p->ns1__sample::type = type;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__sample(struct soap *soap, ns1__sample *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sample(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_ns1__sampleParameter
#define SOAP_TYPE_ICat4_ns1__sampleParameter (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__sampleParameter(struct soap *, const char *, int,
                              const ns1__sampleParameter *, const char *);
SOAP_FMAC3 ns1__sampleParameter *SOAP_FMAC4 soap_in_ns1__sampleParameter(
    struct soap *, const char *, ns1__sampleParameter *, const char *);

#ifndef soap_write_ns1__sampleParameter
#define soap_write_ns1__sampleParameter(soap, data)                            \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:sampleParameter", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__sampleParameter *SOAP_FMAC4 soap_get_ns1__sampleParameter(
    struct soap *, ns1__sampleParameter *, const char *, const char *);

#ifndef soap_read_ns1__sampleParameter
#define soap_read_ns1__sampleParameter(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__sampleParameter(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__sampleParameter *SOAP_FMAC2
soap_instantiate_ns1__sampleParameter(struct soap *, int, const char *,
                                      const char *, size_t *);

inline ns1__sampleParameter *soap_new_ns1__sampleParameter(struct soap *soap,
                                                           int n = -1) {
  return soap_instantiate_ns1__sampleParameter(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline ns1__sampleParameter *
soap_new_req_ns1__sampleParameter(struct soap *soap) {
  ns1__sampleParameter *_p = soap_instantiate_ns1__sampleParameter(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__sampleParameter *soap_new_set_ns1__sampleParameter(
    struct soap *soap, ns1__sample *sample, time_t *dateTimeValue1,
    double *error1, double *numericValue1, double *rangeBottom1,
    double *rangeTop1, std::string *stringValue1, ns1__parameterType *type1,
    std::string *createId2, time_t *createTime2, time_t *modTime2, LONG64 *id2,
    std::string *modId2, char *__item3) {
  ns1__sampleParameter *_p = soap_instantiate_ns1__sampleParameter(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__sampleParameter::sample = sample;
    _p->ns1__parameter::dateTimeValue = dateTimeValue1;
    _p->ns1__parameter::error = error1;
    _p->ns1__parameter::numericValue = numericValue1;
    _p->ns1__parameter::rangeBottom = rangeBottom1;
    _p->ns1__parameter::rangeTop = rangeTop1;
    _p->ns1__parameter::stringValue = stringValue1;
    _p->ns1__parameter::type = type1;
    _p->ns1__entityBaseBean::createId = createId2;
    _p->ns1__entityBaseBean::createTime = createTime2;
    _p->ns1__entityBaseBean::modTime = modTime2;
    _p->ns1__entityBaseBean::id = id2;
    _p->ns1__entityBaseBean::modId = modId2;
    _p->xsd__anyType::__item = __item3;
  }
  return _p;
}

inline void soap_delete_ns1__sampleParameter(struct soap *soap,
                                             ns1__sampleParameter *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sampleParameter(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__permissibleStringValue
#define SOAP_TYPE_ICat4_ns1__permissibleStringValue (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__permissibleStringValue(
    struct soap *, const char *, int, const ns1__permissibleStringValue *,
    const char *);
SOAP_FMAC3 ns1__permissibleStringValue *SOAP_FMAC4
soap_in_ns1__permissibleStringValue(struct soap *, const char *,
                                    ns1__permissibleStringValue *,
                                    const char *);

#ifndef soap_write_ns1__permissibleStringValue
#define soap_write_ns1__permissibleStringValue(soap, data)                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:permissibleStringValue", NULL) ||           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__permissibleStringValue *SOAP_FMAC4
soap_get_ns1__permissibleStringValue(struct soap *,
                                     ns1__permissibleStringValue *,
                                     const char *, const char *);

#ifndef soap_read_ns1__permissibleStringValue
#define soap_read_ns1__permissibleStringValue(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__permissibleStringValue(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__permissibleStringValue *SOAP_FMAC2
soap_instantiate_ns1__permissibleStringValue(struct soap *, int, const char *,
                                             const char *, size_t *);

inline ns1__permissibleStringValue *
soap_new_ns1__permissibleStringValue(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__permissibleStringValue(soap, n, nullptr, nullptr,
                                                      nullptr);
}

inline ns1__permissibleStringValue *
soap_new_req_ns1__permissibleStringValue(struct soap *soap) {
  ns1__permissibleStringValue *_p =
      soap_instantiate_ns1__permissibleStringValue(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__permissibleStringValue *soap_new_set_ns1__permissibleStringValue(
    struct soap *soap, ns1__parameterType *type, std::string *value,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__permissibleStringValue *_p =
      soap_instantiate_ns1__permissibleStringValue(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__permissibleStringValue::type = type;
    _p->ns1__permissibleStringValue::value = value;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void
soap_delete_ns1__permissibleStringValue(struct soap *soap,
                                        ns1__permissibleStringValue *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__permissibleStringValue(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__investigationParameter
#define SOAP_TYPE_ICat4_ns1__investigationParameter (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__investigationParameter(
    struct soap *, const char *, int, const ns1__investigationParameter *,
    const char *);
SOAP_FMAC3 ns1__investigationParameter *SOAP_FMAC4
soap_in_ns1__investigationParameter(struct soap *, const char *,
                                    ns1__investigationParameter *,
                                    const char *);

#ifndef soap_write_ns1__investigationParameter
#define soap_write_ns1__investigationParameter(soap, data)                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:investigationParameter", NULL) ||           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationParameter *SOAP_FMAC4
soap_get_ns1__investigationParameter(struct soap *,
                                     ns1__investigationParameter *,
                                     const char *, const char *);

#ifndef soap_read_ns1__investigationParameter
#define soap_read_ns1__investigationParameter(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__investigationParameter(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__investigationParameter *SOAP_FMAC2
soap_instantiate_ns1__investigationParameter(struct soap *, int, const char *,
                                             const char *, size_t *);

inline ns1__investigationParameter *
soap_new_ns1__investigationParameter(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__investigationParameter(soap, n, nullptr, nullptr,
                                                      nullptr);
}

inline ns1__investigationParameter *
soap_new_req_ns1__investigationParameter(struct soap *soap) {
  ns1__investigationParameter *_p =
      soap_instantiate_ns1__investigationParameter(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__investigationParameter *soap_new_set_ns1__investigationParameter(
    struct soap *soap, ns1__investigation *investigation,
    time_t *dateTimeValue1, double *error1, double *numericValue1,
    double *rangeBottom1, double *rangeTop1, std::string *stringValue1,
    ns1__parameterType *type1, std::string *createId2, time_t *createTime2,
    time_t *modTime2, LONG64 *id2, std::string *modId2, char *__item3) {
  ns1__investigationParameter *_p =
      soap_instantiate_ns1__investigationParameter(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__investigationParameter::investigation = investigation;
    _p->ns1__parameter::dateTimeValue = dateTimeValue1;
    _p->ns1__parameter::error = error1;
    _p->ns1__parameter::numericValue = numericValue1;
    _p->ns1__parameter::rangeBottom = rangeBottom1;
    _p->ns1__parameter::rangeTop = rangeTop1;
    _p->ns1__parameter::stringValue = stringValue1;
    _p->ns1__parameter::type = type1;
    _p->ns1__entityBaseBean::createId = createId2;
    _p->ns1__entityBaseBean::createTime = createTime2;
    _p->ns1__entityBaseBean::modTime = modTime2;
    _p->ns1__entityBaseBean::id = id2;
    _p->ns1__entityBaseBean::modId = modId2;
    _p->xsd__anyType::__item = __item3;
  }
  return _p;
}

inline void
soap_delete_ns1__investigationParameter(struct soap *soap,
                                        ns1__investigationParameter *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__investigationParameter(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__datasetParameter
#define SOAP_TYPE_ICat4_ns1__datasetParameter (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__datasetParameter(struct soap *, const char *, int,
                               const ns1__datasetParameter *, const char *);
SOAP_FMAC3 ns1__datasetParameter *SOAP_FMAC4 soap_in_ns1__datasetParameter(
    struct soap *, const char *, ns1__datasetParameter *, const char *);

#ifndef soap_write_ns1__datasetParameter
#define soap_write_ns1__datasetParameter(soap, data)                           \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:datasetParameter", NULL) ||                 \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datasetParameter *SOAP_FMAC4 soap_get_ns1__datasetParameter(
    struct soap *, ns1__datasetParameter *, const char *, const char *);

#ifndef soap_read_ns1__datasetParameter
#define soap_read_ns1__datasetParameter(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__datasetParameter(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__datasetParameter *SOAP_FMAC2
soap_instantiate_ns1__datasetParameter(struct soap *, int, const char *,
                                       const char *, size_t *);

inline ns1__datasetParameter *soap_new_ns1__datasetParameter(struct soap *soap,
                                                             int n = -1) {
  return soap_instantiate_ns1__datasetParameter(soap, n, nullptr, nullptr,
                                                nullptr);
}

inline ns1__datasetParameter *
soap_new_req_ns1__datasetParameter(struct soap *soap) {
  ns1__datasetParameter *_p = soap_instantiate_ns1__datasetParameter(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__datasetParameter *soap_new_set_ns1__datasetParameter(
    struct soap *soap, ns1__dataset *dataset, time_t *dateTimeValue1,
    double *error1, double *numericValue1, double *rangeBottom1,
    double *rangeTop1, std::string *stringValue1, ns1__parameterType *type1,
    std::string *createId2, time_t *createTime2, time_t *modTime2, LONG64 *id2,
    std::string *modId2, char *__item3) {
  ns1__datasetParameter *_p = soap_instantiate_ns1__datasetParameter(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__datasetParameter::dataset = dataset;
    _p->ns1__parameter::dateTimeValue = dateTimeValue1;
    _p->ns1__parameter::error = error1;
    _p->ns1__parameter::numericValue = numericValue1;
    _p->ns1__parameter::rangeBottom = rangeBottom1;
    _p->ns1__parameter::rangeTop = rangeTop1;
    _p->ns1__parameter::stringValue = stringValue1;
    _p->ns1__parameter::type = type1;
    _p->ns1__entityBaseBean::createId = createId2;
    _p->ns1__entityBaseBean::createTime = createTime2;
    _p->ns1__entityBaseBean::modTime = modTime2;
    _p->ns1__entityBaseBean::id = id2;
    _p->ns1__entityBaseBean::modId = modId2;
    _p->xsd__anyType::__item = __item3;
  }
  return _p;
}

inline void soap_delete_ns1__datasetParameter(struct soap *soap,
                                              ns1__datasetParameter *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__datasetParameter(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4_ns1__datafileParameter
#define SOAP_TYPE_ICat4_ns1__datafileParameter (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__datafileParameter(struct soap *, const char *, int,
                                const ns1__datafileParameter *, const char *);
SOAP_FMAC3 ns1__datafileParameter *SOAP_FMAC4 soap_in_ns1__datafileParameter(
    struct soap *, const char *, ns1__datafileParameter *, const char *);

#ifndef soap_write_ns1__datafileParameter
#define soap_write_ns1__datafileParameter(soap, data)                          \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:datafileParameter", NULL) ||                \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datafileParameter *SOAP_FMAC4 soap_get_ns1__datafileParameter(
    struct soap *, ns1__datafileParameter *, const char *, const char *);

#ifndef soap_read_ns1__datafileParameter
#define soap_read_ns1__datafileParameter(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__datafileParameter(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__datafileParameter *SOAP_FMAC2
soap_instantiate_ns1__datafileParameter(struct soap *, int, const char *,
                                        const char *, size_t *);

inline ns1__datafileParameter *
soap_new_ns1__datafileParameter(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__datafileParameter(soap, n, nullptr, nullptr,
                                                 nullptr);
}

inline ns1__datafileParameter *
soap_new_req_ns1__datafileParameter(struct soap *soap) {
  ns1__datafileParameter *_p = soap_instantiate_ns1__datafileParameter(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__datafileParameter *soap_new_set_ns1__datafileParameter(
    struct soap *soap, ns1__datafile *datafile, time_t *dateTimeValue1,
    double *error1, double *numericValue1, double *rangeBottom1,
    double *rangeTop1, std::string *stringValue1, ns1__parameterType *type1,
    std::string *createId2, time_t *createTime2, time_t *modTime2, LONG64 *id2,
    std::string *modId2, char *__item3) {
  ns1__datafileParameter *_p = soap_instantiate_ns1__datafileParameter(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__datafileParameter::datafile = datafile;
    _p->ns1__parameter::dateTimeValue = dateTimeValue1;
    _p->ns1__parameter::error = error1;
    _p->ns1__parameter::numericValue = numericValue1;
    _p->ns1__parameter::rangeBottom = rangeBottom1;
    _p->ns1__parameter::rangeTop = rangeTop1;
    _p->ns1__parameter::stringValue = stringValue1;
    _p->ns1__parameter::type = type1;
    _p->ns1__entityBaseBean::createId = createId2;
    _p->ns1__entityBaseBean::createTime = createTime2;
    _p->ns1__entityBaseBean::modTime = modTime2;
    _p->ns1__entityBaseBean::id = id2;
    _p->ns1__entityBaseBean::modId = modId2;
    _p->xsd__anyType::__item = __item3;
  }
  return _p;
}

inline void soap_delete_ns1__datafileParameter(struct soap *soap,
                                               ns1__datafileParameter *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__datafileParameter(struct soap *, int,
                                                            int, void *, size_t,
                                                            const void *,
                                                            size_t);

#ifndef SOAP_TYPE_ICat4_ns1__parameter
#define SOAP_TYPE_ICat4_ns1__parameter (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parameter(struct soap *, const char *,
                                                  int, const ns1__parameter *,
                                                  const char *);
SOAP_FMAC3 ns1__parameter *SOAP_FMAC4 soap_in_ns1__parameter(struct soap *,
                                                             const char *,
                                                             ns1__parameter *,
                                                             const char *);

#ifndef soap_write_ns1__parameter
#define soap_write_ns1__parameter(soap, data)                                  \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:parameter", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__parameter *SOAP_FMAC4 soap_get_ns1__parameter(struct soap *,
                                                              ns1__parameter *,
                                                              const char *,
                                                              const char *);

#ifndef soap_read_ns1__parameter
#define soap_read_ns1__parameter(soap, data)                                   \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__parameter(soap, data, NULL, NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__parameter *SOAP_FMAC2 soap_instantiate_ns1__parameter(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__parameter *soap_new_ns1__parameter(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__parameter(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__parameter *soap_new_req_ns1__parameter(struct soap *soap) {
  ns1__parameter *_p =
      soap_instantiate_ns1__parameter(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__parameter *soap_new_set_ns1__parameter(
    struct soap *soap, time_t *dateTimeValue, double *error,
    double *numericValue, double *rangeBottom, double *rangeTop,
    std::string *stringValue, ns1__parameterType *type, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__parameter *_p =
      soap_instantiate_ns1__parameter(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__parameter::dateTimeValue = dateTimeValue;
    _p->ns1__parameter::error = error;
    _p->ns1__parameter::numericValue = numericValue;
    _p->ns1__parameter::rangeBottom = rangeBottom;
    _p->ns1__parameter::rangeTop = rangeTop;
    _p->ns1__parameter::stringValue = stringValue;
    _p->ns1__parameter::type = type;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__parameter(struct soap *soap, ns1__parameter *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parameter(struct soap *, int, int,
                                                    void *, size_t,
                                                    const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__dataCollectionParameter
#define SOAP_TYPE_ICat4_ns1__dataCollectionParameter (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dataCollectionParameter(
    struct soap *, const char *, int, const ns1__dataCollectionParameter *,
    const char *);
SOAP_FMAC3 ns1__dataCollectionParameter *SOAP_FMAC4
soap_in_ns1__dataCollectionParameter(struct soap *, const char *,
                                     ns1__dataCollectionParameter *,
                                     const char *);

#ifndef soap_write_ns1__dataCollectionParameter
#define soap_write_ns1__dataCollectionParameter(soap, data)                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:dataCollectionParameter", NULL) ||          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollectionParameter *SOAP_FMAC4
soap_get_ns1__dataCollectionParameter(struct soap *,
                                      ns1__dataCollectionParameter *,
                                      const char *, const char *);

#ifndef soap_read_ns1__dataCollectionParameter
#define soap_read_ns1__dataCollectionParameter(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__dataCollectionParameter(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__dataCollectionParameter *SOAP_FMAC2
soap_instantiate_ns1__dataCollectionParameter(struct soap *, int, const char *,
                                              const char *, size_t *);

inline ns1__dataCollectionParameter *
soap_new_ns1__dataCollectionParameter(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__dataCollectionParameter(soap, n, nullptr,
                                                       nullptr, nullptr);
}

inline ns1__dataCollectionParameter *
soap_new_req_ns1__dataCollectionParameter(struct soap *soap) {
  ns1__dataCollectionParameter *_p =
      soap_instantiate_ns1__dataCollectionParameter(soap, -1, nullptr, nullptr,
                                                    nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__dataCollectionParameter *soap_new_set_ns1__dataCollectionParameter(
    struct soap *soap, ns1__dataCollection *dataCollection,
    time_t *dateTimeValue1, double *error1, double *numericValue1,
    double *rangeBottom1, double *rangeTop1, std::string *stringValue1,
    ns1__parameterType *type1, std::string *createId2, time_t *createTime2,
    time_t *modTime2, LONG64 *id2, std::string *modId2, char *__item3) {
  ns1__dataCollectionParameter *_p =
      soap_instantiate_ns1__dataCollectionParameter(soap, -1, nullptr, nullptr,
                                                    nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__dataCollectionParameter::dataCollection = dataCollection;
    _p->ns1__parameter::dateTimeValue = dateTimeValue1;
    _p->ns1__parameter::error = error1;
    _p->ns1__parameter::numericValue = numericValue1;
    _p->ns1__parameter::rangeBottom = rangeBottom1;
    _p->ns1__parameter::rangeTop = rangeTop1;
    _p->ns1__parameter::stringValue = stringValue1;
    _p->ns1__parameter::type = type1;
    _p->ns1__entityBaseBean::createId = createId2;
    _p->ns1__entityBaseBean::createTime = createTime2;
    _p->ns1__entityBaseBean::modTime = modTime2;
    _p->ns1__entityBaseBean::id = id2;
    _p->ns1__entityBaseBean::modId = modId2;
    _p->xsd__anyType::__item = __item3;
  }
  return _p;
}

inline void
soap_delete_ns1__dataCollectionParameter(struct soap *soap,
                                         ns1__dataCollectionParameter *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dataCollectionParameter(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__parameterType
#define SOAP_TYPE_ICat4_ns1__parameterType (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parameterType(
    struct soap *, const char *, int, const ns1__parameterType *, const char *);
SOAP_FMAC3 ns1__parameterType *SOAP_FMAC4 soap_in_ns1__parameterType(
    struct soap *, const char *, ns1__parameterType *, const char *);

#ifndef soap_write_ns1__parameterType
#define soap_write_ns1__parameterType(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:parameterType", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__parameterType *SOAP_FMAC4 soap_get_ns1__parameterType(
    struct soap *, ns1__parameterType *, const char *, const char *);

#ifndef soap_read_ns1__parameterType
#define soap_read_ns1__parameterType(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__parameterType(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__parameterType *SOAP_FMAC2 soap_instantiate_ns1__parameterType(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__parameterType *soap_new_ns1__parameterType(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__parameterType(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__parameterType *soap_new_req_ns1__parameterType(
    struct soap *soap, bool applicableToDataCollection,
    bool applicableToDatafile, bool applicableToDataset,
    bool applicableToInvestigation, bool applicableToSample, bool enforced,
    bool verified) {
  ns1__parameterType *_p =
      soap_instantiate_ns1__parameterType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__parameterType::applicableToDataCollection =
        applicableToDataCollection;
    _p->ns1__parameterType::applicableToDatafile = applicableToDatafile;
    _p->ns1__parameterType::applicableToDataset = applicableToDataset;
    _p->ns1__parameterType::applicableToInvestigation =
        applicableToInvestigation;
    _p->ns1__parameterType::applicableToSample = applicableToSample;
    _p->ns1__parameterType::enforced = enforced;
    _p->ns1__parameterType::verified = verified;
  }
  return _p;
}

inline ns1__parameterType *soap_new_set_ns1__parameterType(
    struct soap *soap, bool applicableToDataCollection,
    bool applicableToDatafile, bool applicableToDataset,
    bool applicableToInvestigation, bool applicableToSample,
    std::vector<ns1__dataCollectionParameter *> &dataCollectionParameters,
    std::vector<ns1__datafileParameter *> &datafileParameters,
    std::vector<ns1__datasetParameter *> &datasetParameters,
    std::string *description, bool enforced, ns1__facility *facility,
    std::vector<ns1__investigationParameter *> &investigationParameters,
    double *maximumNumericValue, double *minimumNumericValue, std::string *name,
    std::vector<ns1__permissibleStringValue *> &permissibleStringValues,
    std::vector<ns1__sampleParameter *> &sampleParameters, std::string *units,
    std::string *unitsFullName, enum ns1__parameterValueType *valueType,
    bool verified, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__parameterType *_p =
      soap_instantiate_ns1__parameterType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__parameterType::applicableToDataCollection =
        applicableToDataCollection;
    _p->ns1__parameterType::applicableToDatafile = applicableToDatafile;
    _p->ns1__parameterType::applicableToDataset = applicableToDataset;
    _p->ns1__parameterType::applicableToInvestigation =
        applicableToInvestigation;
    _p->ns1__parameterType::applicableToSample = applicableToSample;
    _p->ns1__parameterType::dataCollectionParameters = dataCollectionParameters;
    _p->ns1__parameterType::datafileParameters = datafileParameters;
    _p->ns1__parameterType::datasetParameters = datasetParameters;
    _p->ns1__parameterType::description = description;
    _p->ns1__parameterType::enforced = enforced;
    _p->ns1__parameterType::facility = facility;
    _p->ns1__parameterType::investigationParameters = investigationParameters;
    _p->ns1__parameterType::maximumNumericValue = maximumNumericValue;
    _p->ns1__parameterType::minimumNumericValue = minimumNumericValue;
    _p->ns1__parameterType::name = name;
    _p->ns1__parameterType::permissibleStringValues = permissibleStringValues;
    _p->ns1__parameterType::sampleParameters = sampleParameters;
    _p->ns1__parameterType::units = units;
    _p->ns1__parameterType::unitsFullName = unitsFullName;
    _p->ns1__parameterType::valueType = valueType;
    _p->ns1__parameterType::verified = verified;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__parameterType(struct soap *soap,
                                           ns1__parameterType *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parameterType(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__investigationType
#define SOAP_TYPE_ICat4_ns1__investigationType (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__investigationType(struct soap *, const char *, int,
                                const ns1__investigationType *, const char *);
SOAP_FMAC3 ns1__investigationType *SOAP_FMAC4 soap_in_ns1__investigationType(
    struct soap *, const char *, ns1__investigationType *, const char *);

#ifndef soap_write_ns1__investigationType
#define soap_write_ns1__investigationType(soap, data)                          \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:investigationType", NULL) ||                \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationType *SOAP_FMAC4 soap_get_ns1__investigationType(
    struct soap *, ns1__investigationType *, const char *, const char *);

#ifndef soap_read_ns1__investigationType
#define soap_read_ns1__investigationType(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__investigationType(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__investigationType *SOAP_FMAC2
soap_instantiate_ns1__investigationType(struct soap *, int, const char *,
                                        const char *, size_t *);

inline ns1__investigationType *
soap_new_ns1__investigationType(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__investigationType(soap, n, nullptr, nullptr,
                                                 nullptr);
}

inline ns1__investigationType *
soap_new_req_ns1__investigationType(struct soap *soap) {
  ns1__investigationType *_p = soap_instantiate_ns1__investigationType(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__investigationType *soap_new_set_ns1__investigationType(
    struct soap *soap, std::string *description, ns1__facility *facility,
    std::vector<ns1__investigation *> &investigations, std::string *name,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__investigationType *_p = soap_instantiate_ns1__investigationType(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__investigationType::description = description;
    _p->ns1__investigationType::facility = facility;
    _p->ns1__investigationType::investigations = investigations;
    _p->ns1__investigationType::name = name;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__investigationType(struct soap *soap,
                                               ns1__investigationType *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__investigationType(struct soap *, int,
                                                            int, void *, size_t,
                                                            const void *,
                                                            size_t);

#ifndef SOAP_TYPE_ICat4_ns1__investigationInstrument
#define SOAP_TYPE_ICat4_ns1__investigationInstrument (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__investigationInstrument(
    struct soap *, const char *, int, const ns1__investigationInstrument *,
    const char *);
SOAP_FMAC3 ns1__investigationInstrument *SOAP_FMAC4
soap_in_ns1__investigationInstrument(struct soap *, const char *,
                                     ns1__investigationInstrument *,
                                     const char *);

#ifndef soap_write_ns1__investigationInstrument
#define soap_write_ns1__investigationInstrument(soap, data)                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:investigationInstrument", NULL) ||          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationInstrument *SOAP_FMAC4
soap_get_ns1__investigationInstrument(struct soap *,
                                      ns1__investigationInstrument *,
                                      const char *, const char *);

#ifndef soap_read_ns1__investigationInstrument
#define soap_read_ns1__investigationInstrument(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__investigationInstrument(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__investigationInstrument *SOAP_FMAC2
soap_instantiate_ns1__investigationInstrument(struct soap *, int, const char *,
                                              const char *, size_t *);

inline ns1__investigationInstrument *
soap_new_ns1__investigationInstrument(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__investigationInstrument(soap, n, nullptr,
                                                       nullptr, nullptr);
}

inline ns1__investigationInstrument *
soap_new_req_ns1__investigationInstrument(struct soap *soap) {
  ns1__investigationInstrument *_p =
      soap_instantiate_ns1__investigationInstrument(soap, -1, nullptr, nullptr,
                                                    nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__investigationInstrument *soap_new_set_ns1__investigationInstrument(
    struct soap *soap, ns1__instrument *instrument,
    ns1__investigation *investigation, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__investigationInstrument *_p =
      soap_instantiate_ns1__investigationInstrument(soap, -1, nullptr, nullptr,
                                                    nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__investigationInstrument::instrument = instrument;
    _p->ns1__investigationInstrument::investigation = investigation;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void
soap_delete_ns1__investigationInstrument(struct soap *soap,
                                         ns1__investigationInstrument *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__investigationInstrument(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__rule
#define SOAP_TYPE_ICat4_ns1__rule (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__rule(struct soap *, const char *, int,
                                             const ns1__rule *, const char *);
SOAP_FMAC3 ns1__rule *SOAP_FMAC4 soap_in_ns1__rule(struct soap *, const char *,
                                                   ns1__rule *, const char *);

#ifndef soap_write_ns1__rule
#define soap_write_ns1__rule(soap, data)                                       \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:rule", NULL) ||        \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__rule *SOAP_FMAC4 soap_get_ns1__rule(struct soap *, ns1__rule *,
                                                    const char *, const char *);

#ifndef soap_read_ns1__rule
#define soap_read_ns1__rule(soap, data)                                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__rule(soap, data, NULL, NULL) ||                   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__rule *SOAP_FMAC2 soap_instantiate_ns1__rule(struct soap *, int,
                                                            const char *,
                                                            const char *,
                                                            size_t *);

inline ns1__rule *soap_new_ns1__rule(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__rule(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__rule *soap_new_req_ns1__rule(struct soap *soap) {
  ns1__rule *_p =
      soap_instantiate_ns1__rule(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__rule *soap_new_set_ns1__rule(
    struct soap *soap, std::string *crudFlags, ns1__grouping *grouping,
    std::string *what, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__rule *_p =
      soap_instantiate_ns1__rule(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__rule::crudFlags = crudFlags;
    _p->ns1__rule::grouping = grouping;
    _p->ns1__rule::what = what;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__rule(struct soap *soap, ns1__rule *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__rule(struct soap *, int, int, void *,
                                               size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__grouping
#define SOAP_TYPE_ICat4_ns1__grouping (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__grouping(struct soap *, const char *,
                                                 int, const ns1__grouping *,
                                                 const char *);
SOAP_FMAC3 ns1__grouping *SOAP_FMAC4 soap_in_ns1__grouping(struct soap *,
                                                           const char *,
                                                           ns1__grouping *,
                                                           const char *);

#ifndef soap_write_ns1__grouping
#define soap_write_ns1__grouping(soap, data)                                   \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:grouping", NULL) ||    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__grouping *SOAP_FMAC4 soap_get_ns1__grouping(struct soap *,
                                                            ns1__grouping *,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_ns1__grouping
#define soap_read_ns1__grouping(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__grouping(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__grouping *SOAP_FMAC2 soap_instantiate_ns1__grouping(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__grouping *soap_new_ns1__grouping(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__grouping(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__grouping *soap_new_req_ns1__grouping(struct soap *soap) {
  ns1__grouping *_p =
      soap_instantiate_ns1__grouping(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__grouping *soap_new_set_ns1__grouping(
    struct soap *soap, std::string *name, std::vector<ns1__rule *> &rules,
    std::vector<ns1__userGroup *> &userGroups, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__grouping *_p =
      soap_instantiate_ns1__grouping(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__grouping::name = name;
    _p->ns1__grouping::rules = rules;
    _p->ns1__grouping::userGroups = userGroups;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__grouping(struct soap *soap, ns1__grouping *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__grouping(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4_ns1__userGroup
#define SOAP_TYPE_ICat4_ns1__userGroup (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userGroup(struct soap *, const char *,
                                                  int, const ns1__userGroup *,
                                                  const char *);
SOAP_FMAC3 ns1__userGroup *SOAP_FMAC4 soap_in_ns1__userGroup(struct soap *,
                                                             const char *,
                                                             ns1__userGroup *,
                                                             const char *);

#ifndef soap_write_ns1__userGroup
#define soap_write_ns1__userGroup(soap, data)                                  \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:userGroup", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__userGroup *SOAP_FMAC4 soap_get_ns1__userGroup(struct soap *,
                                                              ns1__userGroup *,
                                                              const char *,
                                                              const char *);

#ifndef soap_read_ns1__userGroup
#define soap_read_ns1__userGroup(soap, data)                                   \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__userGroup(soap, data, NULL, NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__userGroup *SOAP_FMAC2 soap_instantiate_ns1__userGroup(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__userGroup *soap_new_ns1__userGroup(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__userGroup(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__userGroup *soap_new_req_ns1__userGroup(struct soap *soap) {
  ns1__userGroup *_p =
      soap_instantiate_ns1__userGroup(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__userGroup *
soap_new_set_ns1__userGroup(struct soap *soap, ns1__grouping *grouping,
                            ns1__user *user, std::string *createId1,
                            time_t *createTime1, time_t *modTime1, LONG64 *id1,
                            std::string *modId1, char *__item2) {
  ns1__userGroup *_p =
      soap_instantiate_ns1__userGroup(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__userGroup::grouping = grouping;
    _p->ns1__userGroup::user = user;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__userGroup(struct soap *soap, ns1__userGroup *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__userGroup(struct soap *, int, int,
                                                    void *, size_t,
                                                    const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__studyInvestigation
#define SOAP_TYPE_ICat4_ns1__studyInvestigation (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__studyInvestigation(struct soap *, const char *, int,
                                 const ns1__studyInvestigation *, const char *);
SOAP_FMAC3 ns1__studyInvestigation *SOAP_FMAC4 soap_in_ns1__studyInvestigation(
    struct soap *, const char *, ns1__studyInvestigation *, const char *);

#ifndef soap_write_ns1__studyInvestigation
#define soap_write_ns1__studyInvestigation(soap, data)                         \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:studyInvestigation", NULL) ||               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__studyInvestigation *SOAP_FMAC4 soap_get_ns1__studyInvestigation(
    struct soap *, ns1__studyInvestigation *, const char *, const char *);

#ifndef soap_read_ns1__studyInvestigation
#define soap_read_ns1__studyInvestigation(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__studyInvestigation(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__studyInvestigation *SOAP_FMAC2
soap_instantiate_ns1__studyInvestigation(struct soap *, int, const char *,
                                         const char *, size_t *);

inline ns1__studyInvestigation *
soap_new_ns1__studyInvestigation(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__studyInvestigation(soap, n, nullptr, nullptr,
                                                  nullptr);
}

inline ns1__studyInvestigation *
soap_new_req_ns1__studyInvestigation(struct soap *soap) {
  ns1__studyInvestigation *_p = soap_instantiate_ns1__studyInvestigation(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__studyInvestigation *soap_new_set_ns1__studyInvestigation(
    struct soap *soap, ns1__investigation *investigation, ns1__study *study,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__studyInvestigation *_p = soap_instantiate_ns1__studyInvestigation(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__studyInvestigation::investigation = investigation;
    _p->ns1__studyInvestigation::study = study;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__studyInvestigation(struct soap *soap,
                                                ns1__studyInvestigation *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__studyInvestigation(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__study
#define SOAP_TYPE_ICat4_ns1__study (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__study(struct soap *, const char *, int,
                                              const ns1__study *, const char *);
SOAP_FMAC3 ns1__study *SOAP_FMAC4 soap_in_ns1__study(struct soap *,
                                                     const char *, ns1__study *,
                                                     const char *);

#ifndef soap_write_ns1__study
#define soap_write_ns1__study(soap, data)                                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:study", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__study *SOAP_FMAC4 soap_get_ns1__study(struct soap *,
                                                      ns1__study *,
                                                      const char *,
                                                      const char *);

#ifndef soap_read_ns1__study
#define soap_read_ns1__study(soap, data)                                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__study(soap, data, NULL, NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__study *SOAP_FMAC2 soap_instantiate_ns1__study(struct soap *,
                                                              int, const char *,
                                                              const char *,
                                                              size_t *);

inline ns1__study *soap_new_ns1__study(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__study(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__study *soap_new_req_ns1__study(struct soap *soap) {
  ns1__study *_p =
      soap_instantiate_ns1__study(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__study *soap_new_set_ns1__study(
    struct soap *soap, std::string *description, std::string *name,
    time_t *startDate, enum ns1__studyStatus *status,
    std::vector<ns1__studyInvestigation *> &studyInvestigations,
    ns1__user *user, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__study *_p =
      soap_instantiate_ns1__study(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__study::description = description;
    _p->ns1__study::name = name;
    _p->ns1__study::startDate = startDate;
    _p->ns1__study::status = status;
    _p->ns1__study::studyInvestigations = studyInvestigations;
    _p->ns1__study::user = user;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__study(struct soap *soap, ns1__study *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__study(struct soap *, int, int, void *,
                                                size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__investigationUser
#define SOAP_TYPE_ICat4_ns1__investigationUser (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__investigationUser(struct soap *, const char *, int,
                                const ns1__investigationUser *, const char *);
SOAP_FMAC3 ns1__investigationUser *SOAP_FMAC4 soap_in_ns1__investigationUser(
    struct soap *, const char *, ns1__investigationUser *, const char *);

#ifndef soap_write_ns1__investigationUser
#define soap_write_ns1__investigationUser(soap, data)                          \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:investigationUser", NULL) ||                \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationUser *SOAP_FMAC4 soap_get_ns1__investigationUser(
    struct soap *, ns1__investigationUser *, const char *, const char *);

#ifndef soap_read_ns1__investigationUser
#define soap_read_ns1__investigationUser(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__investigationUser(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__investigationUser *SOAP_FMAC2
soap_instantiate_ns1__investigationUser(struct soap *, int, const char *,
                                        const char *, size_t *);

inline ns1__investigationUser *
soap_new_ns1__investigationUser(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__investigationUser(soap, n, nullptr, nullptr,
                                                 nullptr);
}

inline ns1__investigationUser *
soap_new_req_ns1__investigationUser(struct soap *soap) {
  ns1__investigationUser *_p = soap_instantiate_ns1__investigationUser(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__investigationUser *soap_new_set_ns1__investigationUser(
    struct soap *soap, ns1__investigation *investigation, std::string *role,
    ns1__user *user, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__investigationUser *_p = soap_instantiate_ns1__investigationUser(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__investigationUser::investigation = investigation;
    _p->ns1__investigationUser::role = role;
    _p->ns1__investigationUser::user = user;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__investigationUser(struct soap *soap,
                                               ns1__investigationUser *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__investigationUser(struct soap *, int,
                                                            int, void *, size_t,
                                                            const void *,
                                                            size_t);

#ifndef SOAP_TYPE_ICat4_ns1__user
#define SOAP_TYPE_ICat4_ns1__user (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__user(struct soap *, const char *, int,
                                             const ns1__user *, const char *);
SOAP_FMAC3 ns1__user *SOAP_FMAC4 soap_in_ns1__user(struct soap *, const char *,
                                                   ns1__user *, const char *);

#ifndef soap_write_ns1__user
#define soap_write_ns1__user(soap, data)                                       \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:user", NULL) ||        \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__user *SOAP_FMAC4 soap_get_ns1__user(struct soap *, ns1__user *,
                                                    const char *, const char *);

#ifndef soap_read_ns1__user
#define soap_read_ns1__user(soap, data)                                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__user(soap, data, NULL, NULL) ||                   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__user *SOAP_FMAC2 soap_instantiate_ns1__user(struct soap *, int,
                                                            const char *,
                                                            const char *,
                                                            size_t *);

inline ns1__user *soap_new_ns1__user(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__user(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__user *soap_new_req_ns1__user(struct soap *soap) {
  ns1__user *_p =
      soap_instantiate_ns1__user(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__user *soap_new_set_ns1__user(
    struct soap *soap, std::string *fullName,
    std::vector<ns1__instrumentScientist *> &instrumentScientists,
    std::vector<ns1__investigationUser *> &investigationUsers,
    std::string *name, std::vector<ns1__study *> &studies,
    std::vector<ns1__userGroup *> &userGroups, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__user *_p =
      soap_instantiate_ns1__user(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__user::fullName = fullName;
    _p->ns1__user::instrumentScientists = instrumentScientists;
    _p->ns1__user::investigationUsers = investigationUsers;
    _p->ns1__user::name = name;
    _p->ns1__user::studies = studies;
    _p->ns1__user::userGroups = userGroups;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__user(struct soap *soap, ns1__user *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__user(struct soap *, int, int, void *,
                                               size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__instrumentScientist
#define SOAP_TYPE_ICat4_ns1__instrumentScientist (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__instrumentScientist(
    struct soap *, const char *, int, const ns1__instrumentScientist *,
    const char *);
SOAP_FMAC3 ns1__instrumentScientist *SOAP_FMAC4
soap_in_ns1__instrumentScientist(struct soap *, const char *,
                                 ns1__instrumentScientist *, const char *);

#ifndef soap_write_ns1__instrumentScientist
#define soap_write_ns1__instrumentScientist(soap, data)                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:instrumentScientist", NULL) ||              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__instrumentScientist *SOAP_FMAC4
soap_get_ns1__instrumentScientist(struct soap *, ns1__instrumentScientist *,
                                  const char *, const char *);

#ifndef soap_read_ns1__instrumentScientist
#define soap_read_ns1__instrumentScientist(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__instrumentScientist(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__instrumentScientist *SOAP_FMAC2
soap_instantiate_ns1__instrumentScientist(struct soap *, int, const char *,
                                          const char *, size_t *);

inline ns1__instrumentScientist *
soap_new_ns1__instrumentScientist(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__instrumentScientist(soap, n, nullptr, nullptr,
                                                   nullptr);
}

inline ns1__instrumentScientist *
soap_new_req_ns1__instrumentScientist(struct soap *soap) {
  ns1__instrumentScientist *_p = soap_instantiate_ns1__instrumentScientist(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__instrumentScientist *soap_new_set_ns1__instrumentScientist(
    struct soap *soap, ns1__instrument *instrument, ns1__user *user,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__instrumentScientist *_p = soap_instantiate_ns1__instrumentScientist(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__instrumentScientist::instrument = instrument;
    _p->ns1__instrumentScientist::user = user;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__instrumentScientist(struct soap *soap,
                                                 ns1__instrumentScientist *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__instrumentScientist(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__instrument
#define SOAP_TYPE_ICat4_ns1__instrument (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__instrument(struct soap *, const char *,
                                                   int, const ns1__instrument *,
                                                   const char *);
SOAP_FMAC3 ns1__instrument *SOAP_FMAC4 soap_in_ns1__instrument(
    struct soap *, const char *, ns1__instrument *, const char *);

#ifndef soap_write_ns1__instrument
#define soap_write_ns1__instrument(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:instrument", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__instrument *SOAP_FMAC4 soap_get_ns1__instrument(
    struct soap *, ns1__instrument *, const char *, const char *);

#ifndef soap_read_ns1__instrument
#define soap_read_ns1__instrument(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__instrument(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__instrument *SOAP_FMAC2 soap_instantiate_ns1__instrument(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__instrument *soap_new_ns1__instrument(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__instrument(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__instrument *soap_new_req_ns1__instrument(struct soap *soap) {
  ns1__instrument *_p =
      soap_instantiate_ns1__instrument(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__instrument *soap_new_set_ns1__instrument(
    struct soap *soap, std::string *description, ns1__facility *facility,
    std::string *fullName,
    std::vector<ns1__instrumentScientist *> &instrumentScientists,
    std::vector<ns1__investigationInstrument *> &investigationInstruments,
    std::string *name, std::string *type, std::string *url,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__instrument *_p =
      soap_instantiate_ns1__instrument(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__instrument::description = description;
    _p->ns1__instrument::facility = facility;
    _p->ns1__instrument::fullName = fullName;
    _p->ns1__instrument::instrumentScientists = instrumentScientists;
    _p->ns1__instrument::investigationInstruments = investigationInstruments;
    _p->ns1__instrument::name = name;
    _p->ns1__instrument::type = type;
    _p->ns1__instrument::url = url;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__instrument(struct soap *soap, ns1__instrument *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__instrument(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__facilityCycle
#define SOAP_TYPE_ICat4_ns1__facilityCycle (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__facilityCycle(
    struct soap *, const char *, int, const ns1__facilityCycle *, const char *);
SOAP_FMAC3 ns1__facilityCycle *SOAP_FMAC4 soap_in_ns1__facilityCycle(
    struct soap *, const char *, ns1__facilityCycle *, const char *);

#ifndef soap_write_ns1__facilityCycle
#define soap_write_ns1__facilityCycle(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:facilityCycle", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__facilityCycle *SOAP_FMAC4 soap_get_ns1__facilityCycle(
    struct soap *, ns1__facilityCycle *, const char *, const char *);

#ifndef soap_read_ns1__facilityCycle
#define soap_read_ns1__facilityCycle(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__facilityCycle(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__facilityCycle *SOAP_FMAC2 soap_instantiate_ns1__facilityCycle(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__facilityCycle *soap_new_ns1__facilityCycle(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__facilityCycle(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__facilityCycle *soap_new_req_ns1__facilityCycle(struct soap *soap) {
  ns1__facilityCycle *_p =
      soap_instantiate_ns1__facilityCycle(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__facilityCycle *soap_new_set_ns1__facilityCycle(
    struct soap *soap, std::string *description, time_t *endDate,
    ns1__facility *facility, std::string *name, time_t *startDate,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__facilityCycle *_p =
      soap_instantiate_ns1__facilityCycle(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__facilityCycle::description = description;
    _p->ns1__facilityCycle::endDate = endDate;
    _p->ns1__facilityCycle::facility = facility;
    _p->ns1__facilityCycle::name = name;
    _p->ns1__facilityCycle::startDate = startDate;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__facilityCycle(struct soap *soap,
                                           ns1__facilityCycle *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__facilityCycle(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__datasetType
#define SOAP_TYPE_ICat4_ns1__datasetType (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__datasetType(struct soap *, const char *,
                                                    int,
                                                    const ns1__datasetType *,
                                                    const char *);
SOAP_FMAC3 ns1__datasetType *SOAP_FMAC4 soap_in_ns1__datasetType(
    struct soap *, const char *, ns1__datasetType *, const char *);

#ifndef soap_write_ns1__datasetType
#define soap_write_ns1__datasetType(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:datasetType", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datasetType *SOAP_FMAC4 soap_get_ns1__datasetType(
    struct soap *, ns1__datasetType *, const char *, const char *);

#ifndef soap_read_ns1__datasetType
#define soap_read_ns1__datasetType(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__datasetType(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__datasetType *SOAP_FMAC2 soap_instantiate_ns1__datasetType(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__datasetType *soap_new_ns1__datasetType(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__datasetType(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__datasetType *soap_new_req_ns1__datasetType(struct soap *soap) {
  ns1__datasetType *_p =
      soap_instantiate_ns1__datasetType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__datasetType *soap_new_set_ns1__datasetType(
    struct soap *soap, std::vector<ns1__dataset *> &datasets,
    std::string *description, ns1__facility *facility, std::string *name,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__datasetType *_p =
      soap_instantiate_ns1__datasetType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__datasetType::datasets = datasets;
    _p->ns1__datasetType::description = description;
    _p->ns1__datasetType::facility = facility;
    _p->ns1__datasetType::name = name;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__datasetType(struct soap *soap,
                                         ns1__datasetType *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__datasetType(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__datafileFormat
#define SOAP_TYPE_ICat4_ns1__datafileFormat (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__datafileFormat(struct soap *, const char *, int,
                             const ns1__datafileFormat *, const char *);
SOAP_FMAC3 ns1__datafileFormat *SOAP_FMAC4 soap_in_ns1__datafileFormat(
    struct soap *, const char *, ns1__datafileFormat *, const char *);

#ifndef soap_write_ns1__datafileFormat
#define soap_write_ns1__datafileFormat(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:datafileFormat", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datafileFormat *SOAP_FMAC4 soap_get_ns1__datafileFormat(
    struct soap *, ns1__datafileFormat *, const char *, const char *);

#ifndef soap_read_ns1__datafileFormat
#define soap_read_ns1__datafileFormat(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__datafileFormat(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__datafileFormat *SOAP_FMAC2 soap_instantiate_ns1__datafileFormat(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__datafileFormat *soap_new_ns1__datafileFormat(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__datafileFormat(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__datafileFormat *
soap_new_req_ns1__datafileFormat(struct soap *soap) {
  ns1__datafileFormat *_p =
      soap_instantiate_ns1__datafileFormat(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__datafileFormat *soap_new_set_ns1__datafileFormat(
    struct soap *soap, std::vector<ns1__datafile *> &datafiles,
    std::string *description, ns1__facility *facility, std::string *name,
    std::string *type, std::string *version, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__datafileFormat *_p =
      soap_instantiate_ns1__datafileFormat(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__datafileFormat::datafiles = datafiles;
    _p->ns1__datafileFormat::description = description;
    _p->ns1__datafileFormat::facility = facility;
    _p->ns1__datafileFormat::name = name;
    _p->ns1__datafileFormat::type = type;
    _p->ns1__datafileFormat::version = version;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__datafileFormat(struct soap *soap,
                                            ns1__datafileFormat *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__datafileFormat(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__job
#define SOAP_TYPE_ICat4_ns1__job (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__job(struct soap *, const char *, int,
                                            const ns1__job *, const char *);
SOAP_FMAC3 ns1__job *SOAP_FMAC4 soap_in_ns1__job(struct soap *, const char *,
                                                 ns1__job *, const char *);

#ifndef soap_write_ns1__job
#define soap_write_ns1__job(soap, data)                                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:job", NULL) ||         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__job *SOAP_FMAC4 soap_get_ns1__job(struct soap *, ns1__job *,
                                                  const char *, const char *);

#ifndef soap_read_ns1__job
#define soap_read_ns1__job(soap, data)                                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__job(soap, data, NULL, NULL) ||                    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__job *SOAP_FMAC2 soap_instantiate_ns1__job(struct soap *, int,
                                                          const char *,
                                                          const char *,
                                                          size_t *);

inline ns1__job *soap_new_ns1__job(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__job(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__job *soap_new_req_ns1__job(struct soap *soap) {
  ns1__job *_p = soap_instantiate_ns1__job(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__job *soap_new_set_ns1__job(
    struct soap *soap, ns1__application *application, std::string *arguments,
    ns1__dataCollection *inputDataCollection,
    ns1__dataCollection *outputDataCollection, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__job *_p = soap_instantiate_ns1__job(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__job::application = application;
    _p->ns1__job::arguments = arguments;
    _p->ns1__job::inputDataCollection = inputDataCollection;
    _p->ns1__job::outputDataCollection = outputDataCollection;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__job(struct soap *soap, ns1__job *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__job(struct soap *, int, int, void *,
                                              size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__application
#define SOAP_TYPE_ICat4_ns1__application (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__application(struct soap *, const char *,
                                                    int,
                                                    const ns1__application *,
                                                    const char *);
SOAP_FMAC3 ns1__application *SOAP_FMAC4 soap_in_ns1__application(
    struct soap *, const char *, ns1__application *, const char *);

#ifndef soap_write_ns1__application
#define soap_write_ns1__application(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:application", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__application *SOAP_FMAC4 soap_get_ns1__application(
    struct soap *, ns1__application *, const char *, const char *);

#ifndef soap_read_ns1__application
#define soap_read_ns1__application(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__application(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__application *SOAP_FMAC2 soap_instantiate_ns1__application(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__application *soap_new_ns1__application(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__application(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__application *soap_new_req_ns1__application(struct soap *soap) {
  ns1__application *_p =
      soap_instantiate_ns1__application(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__application *
soap_new_set_ns1__application(struct soap *soap, ns1__facility *facility,
                              std::vector<ns1__job *> &jobs, std::string *name,
                              std::string *version, std::string *createId1,
                              time_t *createTime1, time_t *modTime1,
                              LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__application *_p =
      soap_instantiate_ns1__application(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__application::facility = facility;
    _p->ns1__application::jobs = jobs;
    _p->ns1__application::name = name;
    _p->ns1__application::version = version;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__application(struct soap *soap,
                                         ns1__application *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__application(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__facility
#define SOAP_TYPE_ICat4_ns1__facility (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__facility(struct soap *, const char *,
                                                 int, const ns1__facility *,
                                                 const char *);
SOAP_FMAC3 ns1__facility *SOAP_FMAC4 soap_in_ns1__facility(struct soap *,
                                                           const char *,
                                                           ns1__facility *,
                                                           const char *);

#ifndef soap_write_ns1__facility
#define soap_write_ns1__facility(soap, data)                                   \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:facility", NULL) ||    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__facility *SOAP_FMAC4 soap_get_ns1__facility(struct soap *,
                                                            ns1__facility *,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_ns1__facility
#define soap_read_ns1__facility(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__facility(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__facility *SOAP_FMAC2 soap_instantiate_ns1__facility(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__facility *soap_new_ns1__facility(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__facility(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__facility *soap_new_req_ns1__facility(struct soap *soap) {
  ns1__facility *_p =
      soap_instantiate_ns1__facility(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__facility *soap_new_set_ns1__facility(
    struct soap *soap, std::vector<ns1__application *> &applications,
    std::vector<ns1__datafileFormat *> &datafileFormats,
    std::vector<ns1__datasetType *> &datasetTypes, int *daysUntilRelease,
    std::string *description, std::vector<ns1__facilityCycle *> &facilityCycles,
    std::string *fullName, std::vector<ns1__instrument *> &instruments,
    std::vector<ns1__investigationType *> &investigationTypes,
    std::vector<ns1__investigation *> &investigations, std::string *name,
    std::vector<ns1__parameterType *> &parameterTypes,
    std::vector<ns1__sampleType *> &sampleTypes, std::string *url,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__facility *_p =
      soap_instantiate_ns1__facility(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__facility::applications = applications;
    _p->ns1__facility::datafileFormats = datafileFormats;
    _p->ns1__facility::datasetTypes = datasetTypes;
    _p->ns1__facility::daysUntilRelease = daysUntilRelease;
    _p->ns1__facility::description = description;
    _p->ns1__facility::facilityCycles = facilityCycles;
    _p->ns1__facility::fullName = fullName;
    _p->ns1__facility::instruments = instruments;
    _p->ns1__facility::investigationTypes = investigationTypes;
    _p->ns1__facility::investigations = investigations;
    _p->ns1__facility::name = name;
    _p->ns1__facility::parameterTypes = parameterTypes;
    _p->ns1__facility::sampleTypes = sampleTypes;
    _p->ns1__facility::url = url;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__facility(struct soap *soap, ns1__facility *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__facility(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4_ns1__investigation
#define SOAP_TYPE_ICat4_ns1__investigation (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__investigation(
    struct soap *, const char *, int, const ns1__investigation *, const char *);
SOAP_FMAC3 ns1__investigation *SOAP_FMAC4 soap_in_ns1__investigation(
    struct soap *, const char *, ns1__investigation *, const char *);

#ifndef soap_write_ns1__investigation
#define soap_write_ns1__investigation(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:investigation", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigation *SOAP_FMAC4 soap_get_ns1__investigation(
    struct soap *, ns1__investigation *, const char *, const char *);

#ifndef soap_read_ns1__investigation
#define soap_read_ns1__investigation(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__investigation(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__investigation *SOAP_FMAC2 soap_instantiate_ns1__investigation(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__investigation *soap_new_ns1__investigation(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__investigation(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__investigation *soap_new_req_ns1__investigation(struct soap *soap) {
  ns1__investigation *_p =
      soap_instantiate_ns1__investigation(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__investigation *soap_new_set_ns1__investigation(
    struct soap *soap, std::vector<ns1__dataset *> &datasets, std::string *doi,
    time_t *endDate, ns1__facility *facility,
    std::vector<ns1__investigationInstrument *> &investigationInstruments,
    std::vector<ns1__investigationUser *> &investigationUsers,
    std::vector<ns1__keyword *> &keywords, std::string *name,
    std::vector<ns1__investigationParameter *> &parameters,
    std::vector<ns1__publication *> &publications, time_t *releaseDate,
    std::vector<ns1__sample *> &samples, std::vector<ns1__shift *> &shifts,
    time_t *startDate,
    std::vector<ns1__studyInvestigation *> &studyInvestigations,
    std::string *summary, std::string *title, ns1__investigationType *type,
    std::string *visitId, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__investigation *_p =
      soap_instantiate_ns1__investigation(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__investigation::datasets = datasets;
    _p->ns1__investigation::doi = doi;
    _p->ns1__investigation::endDate = endDate;
    _p->ns1__investigation::facility = facility;
    _p->ns1__investigation::investigationInstruments = investigationInstruments;
    _p->ns1__investigation::investigationUsers = investigationUsers;
    _p->ns1__investigation::keywords = keywords;
    _p->ns1__investigation::name = name;
    _p->ns1__investigation::parameters = parameters;
    _p->ns1__investigation::publications = publications;
    _p->ns1__investigation::releaseDate = releaseDate;
    _p->ns1__investigation::samples = samples;
    _p->ns1__investigation::shifts = shifts;
    _p->ns1__investigation::startDate = startDate;
    _p->ns1__investigation::studyInvestigations = studyInvestigations;
    _p->ns1__investigation::summary = summary;
    _p->ns1__investigation::title = title;
    _p->ns1__investigation::type = type;
    _p->ns1__investigation::visitId = visitId;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__investigation(struct soap *soap,
                                           ns1__investigation *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__investigation(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__dataset
#define SOAP_TYPE_ICat4_ns1__dataset (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dataset(struct soap *, const char *,
                                                int, const ns1__dataset *,
                                                const char *);
SOAP_FMAC3 ns1__dataset *SOAP_FMAC4 soap_in_ns1__dataset(struct soap *,
                                                         const char *,
                                                         ns1__dataset *,
                                                         const char *);

#ifndef soap_write_ns1__dataset
#define soap_write_ns1__dataset(soap, data)                                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:dataset", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataset *SOAP_FMAC4 soap_get_ns1__dataset(struct soap *,
                                                          ns1__dataset *,
                                                          const char *,
                                                          const char *);

#ifndef soap_read_ns1__dataset
#define soap_read_ns1__dataset(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__dataset(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__dataset *SOAP_FMAC2 soap_instantiate_ns1__dataset(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__dataset *soap_new_ns1__dataset(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__dataset(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__dataset *soap_new_req_ns1__dataset(struct soap *soap,
                                               bool complete) {
  ns1__dataset *_p =
      soap_instantiate_ns1__dataset(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__dataset::complete = complete;
  }
  return _p;
}

inline ns1__dataset *soap_new_set_ns1__dataset(
    struct soap *soap, bool complete,
    std::vector<ns1__dataCollectionDataset *> &dataCollectionDatasets,
    std::vector<ns1__datafile *> &datafiles, std::string *description,
    std::string *doi, time_t *endDate, ns1__investigation *investigation,
    std::string *location, std::string *name,
    std::vector<ns1__datasetParameter *> &parameters, ns1__sample *sample,
    time_t *startDate, ns1__datasetType *type, std::string *createId1,
    time_t *createTime1, time_t *modTime1, LONG64 *id1, std::string *modId1,
    char *__item2) {
  ns1__dataset *_p =
      soap_instantiate_ns1__dataset(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__dataset::complete = complete;
    _p->ns1__dataset::dataCollectionDatasets = dataCollectionDatasets;
    _p->ns1__dataset::datafiles = datafiles;
    _p->ns1__dataset::description = description;
    _p->ns1__dataset::doi = doi;
    _p->ns1__dataset::endDate = endDate;
    _p->ns1__dataset::investigation = investigation;
    _p->ns1__dataset::location = location;
    _p->ns1__dataset::name = name;
    _p->ns1__dataset::parameters = parameters;
    _p->ns1__dataset::sample = sample;
    _p->ns1__dataset::startDate = startDate;
    _p->ns1__dataset::type = type;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__dataset(struct soap *soap, ns1__dataset *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dataset(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef SOAP_TYPE_ICat4_ns1__dataCollectionDataset
#define SOAP_TYPE_ICat4_ns1__dataCollectionDataset (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dataCollectionDataset(
    struct soap *, const char *, int, const ns1__dataCollectionDataset *,
    const char *);
SOAP_FMAC3 ns1__dataCollectionDataset *SOAP_FMAC4
soap_in_ns1__dataCollectionDataset(struct soap *, const char *,
                                   ns1__dataCollectionDataset *, const char *);

#ifndef soap_write_ns1__dataCollectionDataset
#define soap_write_ns1__dataCollectionDataset(soap, data)                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:dataCollectionDataset", NULL) ||            \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollectionDataset *SOAP_FMAC4
soap_get_ns1__dataCollectionDataset(struct soap *, ns1__dataCollectionDataset *,
                                    const char *, const char *);

#ifndef soap_read_ns1__dataCollectionDataset
#define soap_read_ns1__dataCollectionDataset(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__dataCollectionDataset(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__dataCollectionDataset *SOAP_FMAC2
soap_instantiate_ns1__dataCollectionDataset(struct soap *, int, const char *,
                                            const char *, size_t *);

inline ns1__dataCollectionDataset *
soap_new_ns1__dataCollectionDataset(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__dataCollectionDataset(soap, n, nullptr, nullptr,
                                                     nullptr);
}

inline ns1__dataCollectionDataset *
soap_new_req_ns1__dataCollectionDataset(struct soap *soap) {
  ns1__dataCollectionDataset *_p = soap_instantiate_ns1__dataCollectionDataset(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__dataCollectionDataset *soap_new_set_ns1__dataCollectionDataset(
    struct soap *soap, ns1__dataCollection *dataCollection,
    ns1__dataset *dataset, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__dataCollectionDataset *_p = soap_instantiate_ns1__dataCollectionDataset(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__dataCollectionDataset::dataCollection = dataCollection;
    _p->ns1__dataCollectionDataset::dataset = dataset;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void
soap_delete_ns1__dataCollectionDataset(struct soap *soap,
                                       ns1__dataCollectionDataset *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dataCollectionDataset(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__dataCollection
#define SOAP_TYPE_ICat4_ns1__dataCollection (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__dataCollection(struct soap *, const char *, int,
                             const ns1__dataCollection *, const char *);
SOAP_FMAC3 ns1__dataCollection *SOAP_FMAC4 soap_in_ns1__dataCollection(
    struct soap *, const char *, ns1__dataCollection *, const char *);

#ifndef soap_write_ns1__dataCollection
#define soap_write_ns1__dataCollection(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:dataCollection", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollection *SOAP_FMAC4 soap_get_ns1__dataCollection(
    struct soap *, ns1__dataCollection *, const char *, const char *);

#ifndef soap_read_ns1__dataCollection
#define soap_read_ns1__dataCollection(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__dataCollection(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__dataCollection *SOAP_FMAC2 soap_instantiate_ns1__dataCollection(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__dataCollection *soap_new_ns1__dataCollection(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__dataCollection(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__dataCollection *
soap_new_req_ns1__dataCollection(struct soap *soap) {
  ns1__dataCollection *_p =
      soap_instantiate_ns1__dataCollection(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__dataCollection *soap_new_set_ns1__dataCollection(
    struct soap *soap,
    std::vector<ns1__dataCollectionDatafile *> &dataCollectionDatafiles,
    std::vector<ns1__dataCollectionDataset *> &dataCollectionDatasets,
    std::vector<ns1__job *> &jobsAsInput, std::vector<ns1__job *> &jobsAsOutput,
    std::vector<ns1__dataCollectionParameter *> &parameters,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__dataCollection *_p =
      soap_instantiate_ns1__dataCollection(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__dataCollection::dataCollectionDatafiles = dataCollectionDatafiles;
    _p->ns1__dataCollection::dataCollectionDatasets = dataCollectionDatasets;
    _p->ns1__dataCollection::jobsAsInput = jobsAsInput;
    _p->ns1__dataCollection::jobsAsOutput = jobsAsOutput;
    _p->ns1__dataCollection::parameters = parameters;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__dataCollection(struct soap *soap,
                                            ns1__dataCollection *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dataCollection(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__dataCollectionDatafile
#define SOAP_TYPE_ICat4_ns1__dataCollectionDatafile (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dataCollectionDatafile(
    struct soap *, const char *, int, const ns1__dataCollectionDatafile *,
    const char *);
SOAP_FMAC3 ns1__dataCollectionDatafile *SOAP_FMAC4
soap_in_ns1__dataCollectionDatafile(struct soap *, const char *,
                                    ns1__dataCollectionDatafile *,
                                    const char *);

#ifndef soap_write_ns1__dataCollectionDatafile
#define soap_write_ns1__dataCollectionDatafile(soap, data)                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:dataCollectionDatafile", NULL) ||           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollectionDatafile *SOAP_FMAC4
soap_get_ns1__dataCollectionDatafile(struct soap *,
                                     ns1__dataCollectionDatafile *,
                                     const char *, const char *);

#ifndef soap_read_ns1__dataCollectionDatafile
#define soap_read_ns1__dataCollectionDatafile(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__dataCollectionDatafile(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__dataCollectionDatafile *SOAP_FMAC2
soap_instantiate_ns1__dataCollectionDatafile(struct soap *, int, const char *,
                                             const char *, size_t *);

inline ns1__dataCollectionDatafile *
soap_new_ns1__dataCollectionDatafile(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__dataCollectionDatafile(soap, n, nullptr, nullptr,
                                                      nullptr);
}

inline ns1__dataCollectionDatafile *
soap_new_req_ns1__dataCollectionDatafile(struct soap *soap) {
  ns1__dataCollectionDatafile *_p =
      soap_instantiate_ns1__dataCollectionDatafile(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__dataCollectionDatafile *soap_new_set_ns1__dataCollectionDatafile(
    struct soap *soap, ns1__dataCollection *dataCollection,
    ns1__datafile *datafile, std::string *createId1, time_t *createTime1,
    time_t *modTime1, LONG64 *id1, std::string *modId1, char *__item2) {
  ns1__dataCollectionDatafile *_p =
      soap_instantiate_ns1__dataCollectionDatafile(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__dataCollectionDatafile::dataCollection = dataCollection;
    _p->ns1__dataCollectionDatafile::datafile = datafile;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void
soap_delete_ns1__dataCollectionDatafile(struct soap *soap,
                                        ns1__dataCollectionDatafile *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dataCollectionDatafile(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__datafile
#define SOAP_TYPE_ICat4_ns1__datafile (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__datafile(struct soap *, const char *,
                                                 int, const ns1__datafile *,
                                                 const char *);
SOAP_FMAC3 ns1__datafile *SOAP_FMAC4 soap_in_ns1__datafile(struct soap *,
                                                           const char *,
                                                           ns1__datafile *,
                                                           const char *);

#ifndef soap_write_ns1__datafile
#define soap_write_ns1__datafile(soap, data)                                   \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:datafile", NULL) ||    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datafile *SOAP_FMAC4 soap_get_ns1__datafile(struct soap *,
                                                            ns1__datafile *,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_ns1__datafile
#define soap_read_ns1__datafile(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__datafile(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__datafile *SOAP_FMAC2 soap_instantiate_ns1__datafile(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__datafile *soap_new_ns1__datafile(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__datafile(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__datafile *soap_new_req_ns1__datafile(struct soap *soap) {
  ns1__datafile *_p =
      soap_instantiate_ns1__datafile(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__datafile *soap_new_set_ns1__datafile(
    struct soap *soap, std::string *checksum,
    std::vector<ns1__dataCollectionDatafile *> &dataCollectionDatafiles,
    time_t *datafileCreateTime, ns1__datafileFormat *datafileFormat,
    time_t *datafileModTime, ns1__dataset *dataset, std::string *description,
    std::vector<ns1__relatedDatafile *> &destDatafiles, std::string *doi,
    LONG64 *fileSize, std::string *location, std::string *name,
    std::vector<ns1__datafileParameter *> &parameters,
    std::vector<ns1__relatedDatafile *> &sourceDatafiles,
    std::string *createId1, time_t *createTime1, time_t *modTime1, LONG64 *id1,
    std::string *modId1, char *__item2) {
  ns1__datafile *_p =
      soap_instantiate_ns1__datafile(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__datafile::checksum = checksum;
    _p->ns1__datafile::dataCollectionDatafiles = dataCollectionDatafiles;
    _p->ns1__datafile::datafileCreateTime = datafileCreateTime;
    _p->ns1__datafile::datafileFormat = datafileFormat;
    _p->ns1__datafile::datafileModTime = datafileModTime;
    _p->ns1__datafile::dataset = dataset;
    _p->ns1__datafile::description = description;
    _p->ns1__datafile::destDatafiles = destDatafiles;
    _p->ns1__datafile::doi = doi;
    _p->ns1__datafile::fileSize = fileSize;
    _p->ns1__datafile::location = location;
    _p->ns1__datafile::name = name;
    _p->ns1__datafile::parameters = parameters;
    _p->ns1__datafile::sourceDatafiles = sourceDatafiles;
    _p->ns1__entityBaseBean::createId = createId1;
    _p->ns1__entityBaseBean::createTime = createTime1;
    _p->ns1__entityBaseBean::modTime = modTime1;
    _p->ns1__entityBaseBean::id = id1;
    _p->ns1__entityBaseBean::modId = modId1;
    _p->xsd__anyType::__item = __item2;
  }
  return _p;
}

inline void soap_delete_ns1__datafile(struct soap *soap, ns1__datafile *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__datafile(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4_ns1__dummy
#define SOAP_TYPE_ICat4_ns1__dummy (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dummy(struct soap *, const char *, int,
                                              const ns1__dummy *, const char *);
SOAP_FMAC3 ns1__dummy *SOAP_FMAC4 soap_in_ns1__dummy(struct soap *,
                                                     const char *, ns1__dummy *,
                                                     const char *);

#ifndef soap_write_ns1__dummy
#define soap_write_ns1__dummy(soap, data)                                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:dummy", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dummy *SOAP_FMAC4 soap_get_ns1__dummy(struct soap *,
                                                      ns1__dummy *,
                                                      const char *,
                                                      const char *);

#ifndef soap_read_ns1__dummy
#define soap_read_ns1__dummy(soap, data)                                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__dummy(soap, data, NULL, NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__dummy *SOAP_FMAC2 soap_instantiate_ns1__dummy(struct soap *,
                                                              int, const char *,
                                                              const char *,
                                                              size_t *);

inline ns1__dummy *soap_new_ns1__dummy(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__dummy(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__dummy *soap_new_req_ns1__dummy(struct soap *soap) {
  ns1__dummy *_p =
      soap_instantiate_ns1__dummy(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__dummy *soap_new_set_ns1__dummy(
    struct soap *soap, ns1__datafile *arg0, ns1__datafileFormat *arg1,
    ns1__datafileParameter *arg2, ns1__dataset *arg3,
    ns1__datasetParameter *arg4, ns1__datasetType *arg5, ns1__facility *arg6,
    ns1__facilityCycle *arg7, ns1__instrumentScientist *arg8, ns1__user *arg9,
    ns1__instrument *arg10, ns1__investigation *arg11,
    ns1__investigationType *arg12, ns1__investigationUser *arg13,
    ns1__keyword *arg14, ns1__parameterType *arg15, ns1__publication *arg16,
    ns1__relatedDatafile *arg17, ns1__sample *arg18,
    ns1__sampleParameter *arg19, ns1__shift *arg20, ns1__study *arg21,
    ns1__studyInvestigation *arg22, enum ns1__studyStatus *arg23,
    ns1__application *arg24, ns1__job *arg25, ns1__dataCollection *arg26,
    ns1__dataCollectionParameter *arg27, ns1__dataCollectionDataset *arg28,
    ns1__dataCollectionDatafile *arg29, ns1__grouping *arg30,
    ns1__userGroup *arg31, ns1__log *arg32, ns1__publicStep *arg33,
    char *__item1) {
  ns1__dummy *_p =
      soap_instantiate_ns1__dummy(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__dummy::arg0 = arg0;
    _p->ns1__dummy::arg1 = arg1;
    _p->ns1__dummy::arg2 = arg2;
    _p->ns1__dummy::arg3 = arg3;
    _p->ns1__dummy::arg4 = arg4;
    _p->ns1__dummy::arg5 = arg5;
    _p->ns1__dummy::arg6 = arg6;
    _p->ns1__dummy::arg7 = arg7;
    _p->ns1__dummy::arg8 = arg8;
    _p->ns1__dummy::arg9 = arg9;
    _p->ns1__dummy::arg10 = arg10;
    _p->ns1__dummy::arg11 = arg11;
    _p->ns1__dummy::arg12 = arg12;
    _p->ns1__dummy::arg13 = arg13;
    _p->ns1__dummy::arg14 = arg14;
    _p->ns1__dummy::arg15 = arg15;
    _p->ns1__dummy::arg16 = arg16;
    _p->ns1__dummy::arg17 = arg17;
    _p->ns1__dummy::arg18 = arg18;
    _p->ns1__dummy::arg19 = arg19;
    _p->ns1__dummy::arg20 = arg20;
    _p->ns1__dummy::arg21 = arg21;
    _p->ns1__dummy::arg22 = arg22;
    _p->ns1__dummy::arg23 = arg23;
    _p->ns1__dummy::arg24 = arg24;
    _p->ns1__dummy::arg25 = arg25;
    _p->ns1__dummy::arg26 = arg26;
    _p->ns1__dummy::arg27 = arg27;
    _p->ns1__dummy::arg28 = arg28;
    _p->ns1__dummy::arg29 = arg29;
    _p->ns1__dummy::arg30 = arg30;
    _p->ns1__dummy::arg31 = arg31;
    _p->ns1__dummy::arg32 = arg32;
    _p->ns1__dummy::arg33 = arg33;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__dummy(struct soap *soap, ns1__dummy *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dummy(struct soap *, int, int, void *,
                                                size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__loginResponse
#define SOAP_TYPE_ICat4_ns1__loginResponse (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__loginResponse(
    struct soap *, const char *, int, const ns1__loginResponse *, const char *);
SOAP_FMAC3 ns1__loginResponse *SOAP_FMAC4 soap_in_ns1__loginResponse(
    struct soap *, const char *, ns1__loginResponse *, const char *);

#ifndef soap_write_ns1__loginResponse
#define soap_write_ns1__loginResponse(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:loginResponse", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__loginResponse *SOAP_FMAC4 soap_get_ns1__loginResponse(
    struct soap *, ns1__loginResponse *, const char *, const char *);

#ifndef soap_read_ns1__loginResponse
#define soap_read_ns1__loginResponse(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__loginResponse(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__loginResponse *SOAP_FMAC2 soap_instantiate_ns1__loginResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__loginResponse *soap_new_ns1__loginResponse(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__loginResponse(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__loginResponse *soap_new_req_ns1__loginResponse(struct soap *soap) {
  ns1__loginResponse *_p =
      soap_instantiate_ns1__loginResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__loginResponse *soap_new_set_ns1__loginResponse(struct soap *soap,
                                                           std::string *return_,
                                                           char *__item1) {
  ns1__loginResponse *_p =
      soap_instantiate_ns1__loginResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__loginResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__loginResponse(struct soap *soap,
                                           ns1__loginResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__loginResponse(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__login
#define SOAP_TYPE_ICat4_ns1__login (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__login(struct soap *, const char *, int,
                                              const ns1__login *, const char *);
SOAP_FMAC3 ns1__login *SOAP_FMAC4 soap_in_ns1__login(struct soap *,
                                                     const char *, ns1__login *,
                                                     const char *);

#ifndef soap_write_ns1__login
#define soap_write_ns1__login(soap, data)                                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:login", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__login *SOAP_FMAC4 soap_get_ns1__login(struct soap *,
                                                      ns1__login *,
                                                      const char *,
                                                      const char *);

#ifndef soap_read_ns1__login
#define soap_read_ns1__login(soap, data)                                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__login(soap, data, NULL, NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__login *SOAP_FMAC2 soap_instantiate_ns1__login(struct soap *,
                                                              int, const char *,
                                                              const char *,
                                                              size_t *);

inline ns1__login *soap_new_ns1__login(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__login(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__login *
soap_new_req_ns1__login(struct soap *soap,
                        _ns1__login_credentials &credentials) {
  ns1__login *_p =
      soap_instantiate_ns1__login(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__login::credentials = credentials;
  }
  return _p;
}

inline ns1__login *soap_new_set_ns1__login(struct soap *soap,
                                           std::string *plugin,
                                           _ns1__login_credentials &credentials,
                                           char *__item1) {
  ns1__login *_p =
      soap_instantiate_ns1__login(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__login::plugin = plugin;
    _p->ns1__login::credentials = credentials;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__login(struct soap *soap, ns1__login *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__login(struct soap *, int, int, void *,
                                                size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__refreshResponse
#define SOAP_TYPE_ICat4_ns1__refreshResponse (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__refreshResponse(struct soap *, const char *, int,
                              const ns1__refreshResponse *, const char *);
SOAP_FMAC3 ns1__refreshResponse *SOAP_FMAC4 soap_in_ns1__refreshResponse(
    struct soap *, const char *, ns1__refreshResponse *, const char *);

#ifndef soap_write_ns1__refreshResponse
#define soap_write_ns1__refreshResponse(soap, data)                            \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:refreshResponse", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__refreshResponse *SOAP_FMAC4 soap_get_ns1__refreshResponse(
    struct soap *, ns1__refreshResponse *, const char *, const char *);

#ifndef soap_read_ns1__refreshResponse
#define soap_read_ns1__refreshResponse(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__refreshResponse(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__refreshResponse *SOAP_FMAC2
soap_instantiate_ns1__refreshResponse(struct soap *, int, const char *,
                                      const char *, size_t *);

inline ns1__refreshResponse *soap_new_ns1__refreshResponse(struct soap *soap,
                                                           int n = -1) {
  return soap_instantiate_ns1__refreshResponse(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline ns1__refreshResponse *
soap_new_req_ns1__refreshResponse(struct soap *soap) {
  ns1__refreshResponse *_p = soap_instantiate_ns1__refreshResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__refreshResponse *
soap_new_set_ns1__refreshResponse(struct soap *soap, char *__item1) {
  ns1__refreshResponse *_p = soap_instantiate_ns1__refreshResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__refreshResponse(struct soap *soap,
                                             ns1__refreshResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__refreshResponse(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__refresh
#define SOAP_TYPE_ICat4_ns1__refresh (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__refresh(struct soap *, const char *,
                                                int, const ns1__refresh *,
                                                const char *);
SOAP_FMAC3 ns1__refresh *SOAP_FMAC4 soap_in_ns1__refresh(struct soap *,
                                                         const char *,
                                                         ns1__refresh *,
                                                         const char *);

#ifndef soap_write_ns1__refresh
#define soap_write_ns1__refresh(soap, data)                                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:refresh", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__refresh *SOAP_FMAC4 soap_get_ns1__refresh(struct soap *,
                                                          ns1__refresh *,
                                                          const char *,
                                                          const char *);

#ifndef soap_read_ns1__refresh
#define soap_read_ns1__refresh(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__refresh(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__refresh *SOAP_FMAC2 soap_instantiate_ns1__refresh(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__refresh *soap_new_ns1__refresh(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__refresh(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__refresh *soap_new_req_ns1__refresh(struct soap *soap) {
  ns1__refresh *_p =
      soap_instantiate_ns1__refresh(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__refresh *soap_new_set_ns1__refresh(struct soap *soap,
                                               std::string *sessionId,
                                               char *__item1) {
  ns1__refresh *_p =
      soap_instantiate_ns1__refresh(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__refresh::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__refresh(struct soap *soap, ns1__refresh *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__refresh(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getUserNameResponse
#define SOAP_TYPE_ICat4_ns1__getUserNameResponse (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserNameResponse(
    struct soap *, const char *, int, const ns1__getUserNameResponse *,
    const char *);
SOAP_FMAC3 ns1__getUserNameResponse *SOAP_FMAC4
soap_in_ns1__getUserNameResponse(struct soap *, const char *,
                                 ns1__getUserNameResponse *, const char *);

#ifndef soap_write_ns1__getUserNameResponse
#define soap_write_ns1__getUserNameResponse(soap, data)                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getUserNameResponse", NULL) ||              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getUserNameResponse *SOAP_FMAC4
soap_get_ns1__getUserNameResponse(struct soap *, ns1__getUserNameResponse *,
                                  const char *, const char *);

#ifndef soap_read_ns1__getUserNameResponse
#define soap_read_ns1__getUserNameResponse(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getUserNameResponse(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getUserNameResponse *SOAP_FMAC2
soap_instantiate_ns1__getUserNameResponse(struct soap *, int, const char *,
                                          const char *, size_t *);

inline ns1__getUserNameResponse *
soap_new_ns1__getUserNameResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__getUserNameResponse(soap, n, nullptr, nullptr,
                                                   nullptr);
}

inline ns1__getUserNameResponse *
soap_new_req_ns1__getUserNameResponse(struct soap *soap) {
  ns1__getUserNameResponse *_p = soap_instantiate_ns1__getUserNameResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getUserNameResponse *
soap_new_set_ns1__getUserNameResponse(struct soap *soap, std::string *return_,
                                      char *__item1) {
  ns1__getUserNameResponse *_p = soap_instantiate_ns1__getUserNameResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getUserNameResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getUserNameResponse(struct soap *soap,
                                                 ns1__getUserNameResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserNameResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getUserName
#define SOAP_TYPE_ICat4_ns1__getUserName (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserName(struct soap *, const char *,
                                                    int,
                                                    const ns1__getUserName *,
                                                    const char *);
SOAP_FMAC3 ns1__getUserName *SOAP_FMAC4 soap_in_ns1__getUserName(
    struct soap *, const char *, ns1__getUserName *, const char *);

#ifndef soap_write_ns1__getUserName
#define soap_write_ns1__getUserName(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getUserName", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getUserName *SOAP_FMAC4 soap_get_ns1__getUserName(
    struct soap *, ns1__getUserName *, const char *, const char *);

#ifndef soap_read_ns1__getUserName
#define soap_read_ns1__getUserName(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getUserName(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getUserName *SOAP_FMAC2 soap_instantiate_ns1__getUserName(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__getUserName *soap_new_ns1__getUserName(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__getUserName(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__getUserName *soap_new_req_ns1__getUserName(struct soap *soap) {
  ns1__getUserName *_p =
      soap_instantiate_ns1__getUserName(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getUserName *soap_new_set_ns1__getUserName(struct soap *soap,
                                                       std::string *sessionId,
                                                       char *__item1) {
  ns1__getUserName *_p =
      soap_instantiate_ns1__getUserName(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getUserName::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getUserName(struct soap *soap,
                                         ns1__getUserName *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserName(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__deleteManyResponse
#define SOAP_TYPE_ICat4_ns1__deleteManyResponse (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__deleteManyResponse(struct soap *, const char *, int,
                                 const ns1__deleteManyResponse *, const char *);
SOAP_FMAC3 ns1__deleteManyResponse *SOAP_FMAC4 soap_in_ns1__deleteManyResponse(
    struct soap *, const char *, ns1__deleteManyResponse *, const char *);

#ifndef soap_write_ns1__deleteManyResponse
#define soap_write_ns1__deleteManyResponse(soap, data)                         \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:deleteManyResponse", NULL) ||               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__deleteManyResponse *SOAP_FMAC4 soap_get_ns1__deleteManyResponse(
    struct soap *, ns1__deleteManyResponse *, const char *, const char *);

#ifndef soap_read_ns1__deleteManyResponse
#define soap_read_ns1__deleteManyResponse(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__deleteManyResponse(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__deleteManyResponse *SOAP_FMAC2
soap_instantiate_ns1__deleteManyResponse(struct soap *, int, const char *,
                                         const char *, size_t *);

inline ns1__deleteManyResponse *
soap_new_ns1__deleteManyResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__deleteManyResponse(soap, n, nullptr, nullptr,
                                                  nullptr);
}

inline ns1__deleteManyResponse *
soap_new_req_ns1__deleteManyResponse(struct soap *soap) {
  ns1__deleteManyResponse *_p = soap_instantiate_ns1__deleteManyResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__deleteManyResponse *
soap_new_set_ns1__deleteManyResponse(struct soap *soap, char *__item1) {
  ns1__deleteManyResponse *_p = soap_instantiate_ns1__deleteManyResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__deleteManyResponse(struct soap *soap,
                                                ns1__deleteManyResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteManyResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__deleteMany
#define SOAP_TYPE_ICat4_ns1__deleteMany (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteMany(struct soap *, const char *,
                                                   int, const ns1__deleteMany *,
                                                   const char *);
SOAP_FMAC3 ns1__deleteMany *SOAP_FMAC4 soap_in_ns1__deleteMany(
    struct soap *, const char *, ns1__deleteMany *, const char *);

#ifndef soap_write_ns1__deleteMany
#define soap_write_ns1__deleteMany(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:deleteMany", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__deleteMany *SOAP_FMAC4 soap_get_ns1__deleteMany(
    struct soap *, ns1__deleteMany *, const char *, const char *);

#ifndef soap_read_ns1__deleteMany
#define soap_read_ns1__deleteMany(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__deleteMany(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__deleteMany *SOAP_FMAC2 soap_instantiate_ns1__deleteMany(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__deleteMany *soap_new_ns1__deleteMany(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__deleteMany(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__deleteMany *soap_new_req_ns1__deleteMany(struct soap *soap) {
  ns1__deleteMany *_p =
      soap_instantiate_ns1__deleteMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__deleteMany *
soap_new_set_ns1__deleteMany(struct soap *soap, std::string *sessionId,
                             std::vector<ns1__entityBaseBean *> &beans,
                             char *__item1) {
  ns1__deleteMany *_p =
      soap_instantiate_ns1__deleteMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__deleteMany::sessionId = sessionId;
    _p->ns1__deleteMany::beans = beans;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__deleteMany(struct soap *soap, ns1__deleteMany *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteMany(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__updateResponse
#define SOAP_TYPE_ICat4_ns1__updateResponse (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__updateResponse(struct soap *, const char *, int,
                             const ns1__updateResponse *, const char *);
SOAP_FMAC3 ns1__updateResponse *SOAP_FMAC4 soap_in_ns1__updateResponse(
    struct soap *, const char *, ns1__updateResponse *, const char *);

#ifndef soap_write_ns1__updateResponse
#define soap_write_ns1__updateResponse(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:updateResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__updateResponse *SOAP_FMAC4 soap_get_ns1__updateResponse(
    struct soap *, ns1__updateResponse *, const char *, const char *);

#ifndef soap_read_ns1__updateResponse
#define soap_read_ns1__updateResponse(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__updateResponse(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__updateResponse *SOAP_FMAC2 soap_instantiate_ns1__updateResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__updateResponse *soap_new_ns1__updateResponse(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__updateResponse(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__updateResponse *
soap_new_req_ns1__updateResponse(struct soap *soap) {
  ns1__updateResponse *_p =
      soap_instantiate_ns1__updateResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__updateResponse *soap_new_set_ns1__updateResponse(struct soap *soap,
                                                             char *__item1) {
  ns1__updateResponse *_p =
      soap_instantiate_ns1__updateResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__updateResponse(struct soap *soap,
                                            ns1__updateResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__updateResponse(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__update
#define SOAP_TYPE_ICat4_ns1__update (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__update(struct soap *, const char *, int,
                                               const ns1__update *,
                                               const char *);
SOAP_FMAC3 ns1__update *SOAP_FMAC4 soap_in_ns1__update(struct soap *,
                                                       const char *,
                                                       ns1__update *,
                                                       const char *);

#ifndef soap_write_ns1__update
#define soap_write_ns1__update(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:update", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__update *SOAP_FMAC4 soap_get_ns1__update(struct soap *,
                                                        ns1__update *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_ns1__update
#define soap_read_ns1__update(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__update(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__update *SOAP_FMAC2 soap_instantiate_ns1__update(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__update *soap_new_ns1__update(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__update(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__update *soap_new_req_ns1__update(struct soap *soap) {
  ns1__update *_p =
      soap_instantiate_ns1__update(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__update *soap_new_set_ns1__update(struct soap *soap,
                                             std::string *sessionId,
                                             ns1__entityBaseBean *bean,
                                             char *__item1) {
  ns1__update *_p =
      soap_instantiate_ns1__update(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__update::sessionId = sessionId;
    _p->ns1__update::bean = bean;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__update(struct soap *soap, ns1__update *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__update(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneGetPopulatingResponse
#define SOAP_TYPE_ICat4_ns1__luceneGetPopulatingResponse (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneGetPopulatingResponse(
    struct soap *, const char *, int, const ns1__luceneGetPopulatingResponse *,
    const char *);
SOAP_FMAC3 ns1__luceneGetPopulatingResponse *SOAP_FMAC4
soap_in_ns1__luceneGetPopulatingResponse(struct soap *, const char *,
                                         ns1__luceneGetPopulatingResponse *,
                                         const char *);

#ifndef soap_write_ns1__luceneGetPopulatingResponse
#define soap_write_ns1__luceneGetPopulatingResponse(soap, data)                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:luceneGetPopulatingResponse", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneGetPopulatingResponse *SOAP_FMAC4
soap_get_ns1__luceneGetPopulatingResponse(struct soap *,
                                          ns1__luceneGetPopulatingResponse *,
                                          const char *, const char *);

#ifndef soap_read_ns1__luceneGetPopulatingResponse
#define soap_read_ns1__luceneGetPopulatingResponse(soap, data)                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneGetPopulatingResponse(soap, data, NULL,     \
                                                         NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneGetPopulatingResponse *SOAP_FMAC2
soap_instantiate_ns1__luceneGetPopulatingResponse(struct soap *, int,
                                                  const char *, const char *,
                                                  size_t *);

inline ns1__luceneGetPopulatingResponse *
soap_new_ns1__luceneGetPopulatingResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__luceneGetPopulatingResponse(soap, n, nullptr,
                                                           nullptr, nullptr);
}

inline ns1__luceneGetPopulatingResponse *
soap_new_req_ns1__luceneGetPopulatingResponse(struct soap *soap) {
  ns1__luceneGetPopulatingResponse *_p =
      soap_instantiate_ns1__luceneGetPopulatingResponse(soap, -1, nullptr,
                                                        nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__luceneGetPopulatingResponse *
soap_new_set_ns1__luceneGetPopulatingResponse(struct soap *soap,
                                              std::vector<std::string> &return_,
                                              char *__item1) {
  ns1__luceneGetPopulatingResponse *_p =
      soap_instantiate_ns1__luceneGetPopulatingResponse(soap, -1, nullptr,
                                                        nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__luceneGetPopulatingResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__luceneGetPopulatingResponse(
    struct soap *soap, ns1__luceneGetPopulatingResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneGetPopulatingResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneGetPopulating
#define SOAP_TYPE_ICat4_ns1__luceneGetPopulating (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneGetPopulating(
    struct soap *, const char *, int, const ns1__luceneGetPopulating *,
    const char *);
SOAP_FMAC3 ns1__luceneGetPopulating *SOAP_FMAC4
soap_in_ns1__luceneGetPopulating(struct soap *, const char *,
                                 ns1__luceneGetPopulating *, const char *);

#ifndef soap_write_ns1__luceneGetPopulating
#define soap_write_ns1__luceneGetPopulating(soap, data)                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:luceneGetPopulating", NULL) ||              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneGetPopulating *SOAP_FMAC4
soap_get_ns1__luceneGetPopulating(struct soap *, ns1__luceneGetPopulating *,
                                  const char *, const char *);

#ifndef soap_read_ns1__luceneGetPopulating
#define soap_read_ns1__luceneGetPopulating(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneGetPopulating(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneGetPopulating *SOAP_FMAC2
soap_instantiate_ns1__luceneGetPopulating(struct soap *, int, const char *,
                                          const char *, size_t *);

inline ns1__luceneGetPopulating *
soap_new_ns1__luceneGetPopulating(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__luceneGetPopulating(soap, n, nullptr, nullptr,
                                                   nullptr);
}

inline ns1__luceneGetPopulating *
soap_new_req_ns1__luceneGetPopulating(struct soap *soap) {
  ns1__luceneGetPopulating *_p = soap_instantiate_ns1__luceneGetPopulating(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__luceneGetPopulating *
soap_new_set_ns1__luceneGetPopulating(struct soap *soap, std::string *sessionId,
                                      char *__item1) {
  ns1__luceneGetPopulating *_p = soap_instantiate_ns1__luceneGetPopulating(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__luceneGetPopulating::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__luceneGetPopulating(struct soap *soap,
                                                 ns1__luceneGetPopulating *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneGetPopulating(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getApiVersionResponse
#define SOAP_TYPE_ICat4_ns1__getApiVersionResponse (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getApiVersionResponse(
    struct soap *, const char *, int, const ns1__getApiVersionResponse *,
    const char *);
SOAP_FMAC3 ns1__getApiVersionResponse *SOAP_FMAC4
soap_in_ns1__getApiVersionResponse(struct soap *, const char *,
                                   ns1__getApiVersionResponse *, const char *);

#ifndef soap_write_ns1__getApiVersionResponse
#define soap_write_ns1__getApiVersionResponse(soap, data)                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getApiVersionResponse", NULL) ||            \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getApiVersionResponse *SOAP_FMAC4
soap_get_ns1__getApiVersionResponse(struct soap *, ns1__getApiVersionResponse *,
                                    const char *, const char *);

#ifndef soap_read_ns1__getApiVersionResponse
#define soap_read_ns1__getApiVersionResponse(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getApiVersionResponse(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getApiVersionResponse *SOAP_FMAC2
soap_instantiate_ns1__getApiVersionResponse(struct soap *, int, const char *,
                                            const char *, size_t *);

inline ns1__getApiVersionResponse *
soap_new_ns1__getApiVersionResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__getApiVersionResponse(soap, n, nullptr, nullptr,
                                                     nullptr);
}

inline ns1__getApiVersionResponse *
soap_new_req_ns1__getApiVersionResponse(struct soap *soap) {
  ns1__getApiVersionResponse *_p = soap_instantiate_ns1__getApiVersionResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getApiVersionResponse *
soap_new_set_ns1__getApiVersionResponse(struct soap *soap, std::string *return_,
                                        char *__item1) {
  ns1__getApiVersionResponse *_p = soap_instantiate_ns1__getApiVersionResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getApiVersionResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__getApiVersionResponse(struct soap *soap,
                                       ns1__getApiVersionResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getApiVersionResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getApiVersion
#define SOAP_TYPE_ICat4_ns1__getApiVersion (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getApiVersion(
    struct soap *, const char *, int, const ns1__getApiVersion *, const char *);
SOAP_FMAC3 ns1__getApiVersion *SOAP_FMAC4 soap_in_ns1__getApiVersion(
    struct soap *, const char *, ns1__getApiVersion *, const char *);

#ifndef soap_write_ns1__getApiVersion
#define soap_write_ns1__getApiVersion(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getApiVersion", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getApiVersion *SOAP_FMAC4 soap_get_ns1__getApiVersion(
    struct soap *, ns1__getApiVersion *, const char *, const char *);

#ifndef soap_read_ns1__getApiVersion
#define soap_read_ns1__getApiVersion(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getApiVersion(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getApiVersion *SOAP_FMAC2 soap_instantiate_ns1__getApiVersion(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__getApiVersion *soap_new_ns1__getApiVersion(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__getApiVersion(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__getApiVersion *soap_new_req_ns1__getApiVersion(struct soap *soap) {
  ns1__getApiVersion *_p =
      soap_instantiate_ns1__getApiVersion(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getApiVersion *soap_new_set_ns1__getApiVersion(struct soap *soap,
                                                           char *__item1) {
  ns1__getApiVersion *_p =
      soap_instantiate_ns1__getApiVersion(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getApiVersion(struct soap *soap,
                                           ns1__getApiVersion *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getApiVersion(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getEntityNamesResponse
#define SOAP_TYPE_ICat4_ns1__getEntityNamesResponse (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getEntityNamesResponse(
    struct soap *, const char *, int, const ns1__getEntityNamesResponse *,
    const char *);
SOAP_FMAC3 ns1__getEntityNamesResponse *SOAP_FMAC4
soap_in_ns1__getEntityNamesResponse(struct soap *, const char *,
                                    ns1__getEntityNamesResponse *,
                                    const char *);

#ifndef soap_write_ns1__getEntityNamesResponse
#define soap_write_ns1__getEntityNamesResponse(soap, data)                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getEntityNamesResponse", NULL) ||           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityNamesResponse *SOAP_FMAC4
soap_get_ns1__getEntityNamesResponse(struct soap *,
                                     ns1__getEntityNamesResponse *,
                                     const char *, const char *);

#ifndef soap_read_ns1__getEntityNamesResponse
#define soap_read_ns1__getEntityNamesResponse(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getEntityNamesResponse(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getEntityNamesResponse *SOAP_FMAC2
soap_instantiate_ns1__getEntityNamesResponse(struct soap *, int, const char *,
                                             const char *, size_t *);

inline ns1__getEntityNamesResponse *
soap_new_ns1__getEntityNamesResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__getEntityNamesResponse(soap, n, nullptr, nullptr,
                                                      nullptr);
}

inline ns1__getEntityNamesResponse *
soap_new_req_ns1__getEntityNamesResponse(struct soap *soap) {
  ns1__getEntityNamesResponse *_p =
      soap_instantiate_ns1__getEntityNamesResponse(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getEntityNamesResponse *soap_new_set_ns1__getEntityNamesResponse(
    struct soap *soap, std::vector<std::string> &return_, char *__item1) {
  ns1__getEntityNamesResponse *_p =
      soap_instantiate_ns1__getEntityNamesResponse(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getEntityNamesResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__getEntityNamesResponse(struct soap *soap,
                                        ns1__getEntityNamesResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEntityNamesResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getEntityNames
#define SOAP_TYPE_ICat4_ns1__getEntityNames (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__getEntityNames(struct soap *, const char *, int,
                             const ns1__getEntityNames *, const char *);
SOAP_FMAC3 ns1__getEntityNames *SOAP_FMAC4 soap_in_ns1__getEntityNames(
    struct soap *, const char *, ns1__getEntityNames *, const char *);

#ifndef soap_write_ns1__getEntityNames
#define soap_write_ns1__getEntityNames(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getEntityNames", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityNames *SOAP_FMAC4 soap_get_ns1__getEntityNames(
    struct soap *, ns1__getEntityNames *, const char *, const char *);

#ifndef soap_read_ns1__getEntityNames
#define soap_read_ns1__getEntityNames(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getEntityNames(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getEntityNames *SOAP_FMAC2 soap_instantiate_ns1__getEntityNames(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__getEntityNames *soap_new_ns1__getEntityNames(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__getEntityNames(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__getEntityNames *
soap_new_req_ns1__getEntityNames(struct soap *soap) {
  ns1__getEntityNames *_p =
      soap_instantiate_ns1__getEntityNames(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getEntityNames *soap_new_set_ns1__getEntityNames(struct soap *soap,
                                                             char *__item1) {
  ns1__getEntityNames *_p =
      soap_instantiate_ns1__getEntityNames(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getEntityNames(struct soap *soap,
                                            ns1__getEntityNames *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEntityNames(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getResponse
#define SOAP_TYPE_ICat4_ns1__getResponse (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getResponse(struct soap *, const char *,
                                                    int,
                                                    const ns1__getResponse *,
                                                    const char *);
SOAP_FMAC3 ns1__getResponse *SOAP_FMAC4 soap_in_ns1__getResponse(
    struct soap *, const char *, ns1__getResponse *, const char *);

#ifndef soap_write_ns1__getResponse
#define soap_write_ns1__getResponse(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getResponse", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getResponse *SOAP_FMAC4 soap_get_ns1__getResponse(
    struct soap *, ns1__getResponse *, const char *, const char *);

#ifndef soap_read_ns1__getResponse
#define soap_read_ns1__getResponse(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getResponse(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getResponse *SOAP_FMAC2 soap_instantiate_ns1__getResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__getResponse *soap_new_ns1__getResponse(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__getResponse(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__getResponse *soap_new_req_ns1__getResponse(struct soap *soap) {
  ns1__getResponse *_p =
      soap_instantiate_ns1__getResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getResponse *
soap_new_set_ns1__getResponse(struct soap *soap, ns1__entityBaseBean *return_,
                              char *__item1) {
  ns1__getResponse *_p =
      soap_instantiate_ns1__getResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getResponse(struct soap *soap,
                                         ns1__getResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getResponse(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__get
#define SOAP_TYPE_ICat4_ns1__get (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__get(struct soap *, const char *, int,
                                            const ns1__get *, const char *);
SOAP_FMAC3 ns1__get *SOAP_FMAC4 soap_in_ns1__get(struct soap *, const char *,
                                                 ns1__get *, const char *);

#ifndef soap_write_ns1__get
#define soap_write_ns1__get(soap, data)                                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:get", NULL) ||         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__get *SOAP_FMAC4 soap_get_ns1__get(struct soap *, ns1__get *,
                                                  const char *, const char *);

#ifndef soap_read_ns1__get
#define soap_read_ns1__get(soap, data)                                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__get(soap, data, NULL, NULL) ||                    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__get *SOAP_FMAC2 soap_instantiate_ns1__get(struct soap *, int,
                                                          const char *,
                                                          const char *,
                                                          size_t *);

inline ns1__get *soap_new_ns1__get(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__get(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__get *soap_new_req_ns1__get(struct soap *soap, LONG64 primaryKey) {
  ns1__get *_p = soap_instantiate_ns1__get(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__get::primaryKey = primaryKey;
  }
  return _p;
}

inline ns1__get *soap_new_set_ns1__get(struct soap *soap,
                                       std::string *sessionId,
                                       std::string *query, LONG64 primaryKey,
                                       char *__item1) {
  ns1__get *_p = soap_instantiate_ns1__get(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__get::sessionId = sessionId;
    _p->ns1__get::query = query;
    _p->ns1__get::primaryKey = primaryKey;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__get(struct soap *soap, ns1__get *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__get(struct soap *, int, int, void *,
                                              size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__lucenePopulateResponse
#define SOAP_TYPE_ICat4_ns1__lucenePopulateResponse (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__lucenePopulateResponse(
    struct soap *, const char *, int, const ns1__lucenePopulateResponse *,
    const char *);
SOAP_FMAC3 ns1__lucenePopulateResponse *SOAP_FMAC4
soap_in_ns1__lucenePopulateResponse(struct soap *, const char *,
                                    ns1__lucenePopulateResponse *,
                                    const char *);

#ifndef soap_write_ns1__lucenePopulateResponse
#define soap_write_ns1__lucenePopulateResponse(soap, data)                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:lucenePopulateResponse", NULL) ||           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__lucenePopulateResponse *SOAP_FMAC4
soap_get_ns1__lucenePopulateResponse(struct soap *,
                                     ns1__lucenePopulateResponse *,
                                     const char *, const char *);

#ifndef soap_read_ns1__lucenePopulateResponse
#define soap_read_ns1__lucenePopulateResponse(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__lucenePopulateResponse(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__lucenePopulateResponse *SOAP_FMAC2
soap_instantiate_ns1__lucenePopulateResponse(struct soap *, int, const char *,
                                             const char *, size_t *);

inline ns1__lucenePopulateResponse *
soap_new_ns1__lucenePopulateResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__lucenePopulateResponse(soap, n, nullptr, nullptr,
                                                      nullptr);
}

inline ns1__lucenePopulateResponse *
soap_new_req_ns1__lucenePopulateResponse(struct soap *soap) {
  ns1__lucenePopulateResponse *_p =
      soap_instantiate_ns1__lucenePopulateResponse(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__lucenePopulateResponse *
soap_new_set_ns1__lucenePopulateResponse(struct soap *soap, char *__item1) {
  ns1__lucenePopulateResponse *_p =
      soap_instantiate_ns1__lucenePopulateResponse(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__lucenePopulateResponse(struct soap *soap,
                                        ns1__lucenePopulateResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__lucenePopulateResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__lucenePopulate
#define SOAP_TYPE_ICat4_ns1__lucenePopulate (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__lucenePopulate(struct soap *, const char *, int,
                             const ns1__lucenePopulate *, const char *);
SOAP_FMAC3 ns1__lucenePopulate *SOAP_FMAC4 soap_in_ns1__lucenePopulate(
    struct soap *, const char *, ns1__lucenePopulate *, const char *);

#ifndef soap_write_ns1__lucenePopulate
#define soap_write_ns1__lucenePopulate(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:lucenePopulate", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__lucenePopulate *SOAP_FMAC4 soap_get_ns1__lucenePopulate(
    struct soap *, ns1__lucenePopulate *, const char *, const char *);

#ifndef soap_read_ns1__lucenePopulate
#define soap_read_ns1__lucenePopulate(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__lucenePopulate(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__lucenePopulate *SOAP_FMAC2 soap_instantiate_ns1__lucenePopulate(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__lucenePopulate *soap_new_ns1__lucenePopulate(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__lucenePopulate(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__lucenePopulate *
soap_new_req_ns1__lucenePopulate(struct soap *soap) {
  ns1__lucenePopulate *_p =
      soap_instantiate_ns1__lucenePopulate(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__lucenePopulate *
soap_new_set_ns1__lucenePopulate(struct soap *soap, std::string *sessionId,
                                 std::string *entityName, char *__item1) {
  ns1__lucenePopulate *_p =
      soap_instantiate_ns1__lucenePopulate(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__lucenePopulate::sessionId = sessionId;
    _p->ns1__lucenePopulate::entityName = entityName;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__lucenePopulate(struct soap *soap,
                                            ns1__lucenePopulate *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__lucenePopulate(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneSearchResponse
#define SOAP_TYPE_ICat4_ns1__luceneSearchResponse (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneSearchResponse(
    struct soap *, const char *, int, const ns1__luceneSearchResponse *,
    const char *);
SOAP_FMAC3 ns1__luceneSearchResponse *SOAP_FMAC4
soap_in_ns1__luceneSearchResponse(struct soap *, const char *,
                                  ns1__luceneSearchResponse *, const char *);

#ifndef soap_write_ns1__luceneSearchResponse
#define soap_write_ns1__luceneSearchResponse(soap, data)                       \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:luceneSearchResponse", NULL) ||             \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneSearchResponse *SOAP_FMAC4
soap_get_ns1__luceneSearchResponse(struct soap *, ns1__luceneSearchResponse *,
                                   const char *, const char *);

#ifndef soap_read_ns1__luceneSearchResponse
#define soap_read_ns1__luceneSearchResponse(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneSearchResponse(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneSearchResponse *SOAP_FMAC2
soap_instantiate_ns1__luceneSearchResponse(struct soap *, int, const char *,
                                           const char *, size_t *);

inline ns1__luceneSearchResponse *
soap_new_ns1__luceneSearchResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__luceneSearchResponse(soap, n, nullptr, nullptr,
                                                    nullptr);
}

inline ns1__luceneSearchResponse *
soap_new_req_ns1__luceneSearchResponse(struct soap *soap) {
  ns1__luceneSearchResponse *_p = soap_instantiate_ns1__luceneSearchResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__luceneSearchResponse *soap_new_set_ns1__luceneSearchResponse(
    struct soap *soap, std::vector<std::string> &return_, char *__item1) {
  ns1__luceneSearchResponse *_p = soap_instantiate_ns1__luceneSearchResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__luceneSearchResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__luceneSearchResponse(struct soap *soap,
                                      ns1__luceneSearchResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneSearchResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneSearch
#define SOAP_TYPE_ICat4_ns1__luceneSearch (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneSearch(struct soap *,
                                                     const char *, int,
                                                     const ns1__luceneSearch *,
                                                     const char *);
SOAP_FMAC3 ns1__luceneSearch *SOAP_FMAC4 soap_in_ns1__luceneSearch(
    struct soap *, const char *, ns1__luceneSearch *, const char *);

#ifndef soap_write_ns1__luceneSearch
#define soap_write_ns1__luceneSearch(soap, data)                               \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:luceneSearch", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneSearch *SOAP_FMAC4 soap_get_ns1__luceneSearch(
    struct soap *, ns1__luceneSearch *, const char *, const char *);

#ifndef soap_read_ns1__luceneSearch
#define soap_read_ns1__luceneSearch(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneSearch(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneSearch *SOAP_FMAC2 soap_instantiate_ns1__luceneSearch(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__luceneSearch *soap_new_ns1__luceneSearch(struct soap *soap,
                                                     int n = -1) {
  return soap_instantiate_ns1__luceneSearch(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__luceneSearch *soap_new_req_ns1__luceneSearch(struct soap *soap,
                                                         int maxCount) {
  ns1__luceneSearch *_p =
      soap_instantiate_ns1__luceneSearch(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__luceneSearch::maxCount = maxCount;
  }
  return _p;
}

inline ns1__luceneSearch *
soap_new_set_ns1__luceneSearch(struct soap *soap, std::string *sessionId,
                               std::string *query, int maxCount,
                               std::string *entityName, char *__item1) {
  ns1__luceneSearch *_p =
      soap_instantiate_ns1__luceneSearch(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__luceneSearch::sessionId = sessionId;
    _p->ns1__luceneSearch::query = query;
    _p->ns1__luceneSearch::maxCount = maxCount;
    _p->ns1__luceneSearch::entityName = entityName;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__luceneSearch(struct soap *soap,
                                          ns1__luceneSearch *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneSearch(struct soap *, int, int,
                                                       void *, size_t,
                                                       const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getPropertiesResponse
#define SOAP_TYPE_ICat4_ns1__getPropertiesResponse (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPropertiesResponse(
    struct soap *, const char *, int, const ns1__getPropertiesResponse *,
    const char *);
SOAP_FMAC3 ns1__getPropertiesResponse *SOAP_FMAC4
soap_in_ns1__getPropertiesResponse(struct soap *, const char *,
                                   ns1__getPropertiesResponse *, const char *);

#ifndef soap_write_ns1__getPropertiesResponse
#define soap_write_ns1__getPropertiesResponse(soap, data)                      \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getPropertiesResponse", NULL) ||            \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getPropertiesResponse *SOAP_FMAC4
soap_get_ns1__getPropertiesResponse(struct soap *, ns1__getPropertiesResponse *,
                                    const char *, const char *);

#ifndef soap_read_ns1__getPropertiesResponse
#define soap_read_ns1__getPropertiesResponse(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getPropertiesResponse(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getPropertiesResponse *SOAP_FMAC2
soap_instantiate_ns1__getPropertiesResponse(struct soap *, int, const char *,
                                            const char *, size_t *);

inline ns1__getPropertiesResponse *
soap_new_ns1__getPropertiesResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__getPropertiesResponse(soap, n, nullptr, nullptr,
                                                     nullptr);
}

inline ns1__getPropertiesResponse *
soap_new_req_ns1__getPropertiesResponse(struct soap *soap) {
  ns1__getPropertiesResponse *_p = soap_instantiate_ns1__getPropertiesResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getPropertiesResponse *soap_new_set_ns1__getPropertiesResponse(
    struct soap *soap, std::vector<std::string> &return_, char *__item1) {
  ns1__getPropertiesResponse *_p = soap_instantiate_ns1__getPropertiesResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getPropertiesResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void
soap_delete_ns1__getPropertiesResponse(struct soap *soap,
                                       ns1__getPropertiesResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getPropertiesResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__getProperties
#define SOAP_TYPE_ICat4_ns1__getProperties (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProperties(
    struct soap *, const char *, int, const ns1__getProperties *, const char *);
SOAP_FMAC3 ns1__getProperties *SOAP_FMAC4 soap_in_ns1__getProperties(
    struct soap *, const char *, ns1__getProperties *, const char *);

#ifndef soap_write_ns1__getProperties
#define soap_write_ns1__getProperties(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:getProperties", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getProperties *SOAP_FMAC4 soap_get_ns1__getProperties(
    struct soap *, ns1__getProperties *, const char *, const char *);

#ifndef soap_read_ns1__getProperties
#define soap_read_ns1__getProperties(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__getProperties(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__getProperties *SOAP_FMAC2 soap_instantiate_ns1__getProperties(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__getProperties *soap_new_ns1__getProperties(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__getProperties(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__getProperties *soap_new_req_ns1__getProperties(struct soap *soap) {
  ns1__getProperties *_p =
      soap_instantiate_ns1__getProperties(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__getProperties *
soap_new_set_ns1__getProperties(struct soap *soap, std::string *sessionId,
                                char *__item1) {
  ns1__getProperties *_p =
      soap_instantiate_ns1__getProperties(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__getProperties::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__getProperties(struct soap *soap,
                                           ns1__getProperties *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getProperties(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__createResponse
#define SOAP_TYPE_ICat4_ns1__createResponse (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__createResponse(struct soap *, const char *, int,
                             const ns1__createResponse *, const char *);
SOAP_FMAC3 ns1__createResponse *SOAP_FMAC4 soap_in_ns1__createResponse(
    struct soap *, const char *, ns1__createResponse *, const char *);

#ifndef soap_write_ns1__createResponse
#define soap_write_ns1__createResponse(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:createResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__createResponse *SOAP_FMAC4 soap_get_ns1__createResponse(
    struct soap *, ns1__createResponse *, const char *, const char *);

#ifndef soap_read_ns1__createResponse
#define soap_read_ns1__createResponse(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__createResponse(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__createResponse *SOAP_FMAC2 soap_instantiate_ns1__createResponse(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__createResponse *soap_new_ns1__createResponse(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__createResponse(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__createResponse *soap_new_req_ns1__createResponse(struct soap *soap,
                                                             LONG64 return_) {
  ns1__createResponse *_p =
      soap_instantiate_ns1__createResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__createResponse::return_ = return_;
  }
  return _p;
}

inline ns1__createResponse *soap_new_set_ns1__createResponse(struct soap *soap,
                                                             LONG64 return_,
                                                             char *__item1) {
  ns1__createResponse *_p =
      soap_instantiate_ns1__createResponse(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__createResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__createResponse(struct soap *soap,
                                            ns1__createResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__createResponse(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__create
#define SOAP_TYPE_ICat4_ns1__create (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__create(struct soap *, const char *, int,
                                               const ns1__create *,
                                               const char *);
SOAP_FMAC3 ns1__create *SOAP_FMAC4 soap_in_ns1__create(struct soap *,
                                                       const char *,
                                                       ns1__create *,
                                                       const char *);

#ifndef soap_write_ns1__create
#define soap_write_ns1__create(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:create", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__create *SOAP_FMAC4 soap_get_ns1__create(struct soap *,
                                                        ns1__create *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_ns1__create
#define soap_read_ns1__create(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__create(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__create *SOAP_FMAC2 soap_instantiate_ns1__create(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__create *soap_new_ns1__create(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__create(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__create *soap_new_req_ns1__create(struct soap *soap) {
  ns1__create *_p =
      soap_instantiate_ns1__create(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__create *soap_new_set_ns1__create(struct soap *soap,
                                             std::string *sessionId,
                                             ns1__entityBaseBean *bean,
                                             char *__item1) {
  ns1__create *_p =
      soap_instantiate_ns1__create(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__create::sessionId = sessionId;
    _p->ns1__create::bean = bean;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__create(struct soap *soap, ns1__create *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__create(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_ns1__createManyResponse
#define SOAP_TYPE_ICat4_ns1__createManyResponse (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__createManyResponse(struct soap *, const char *, int,
                                 const ns1__createManyResponse *, const char *);
SOAP_FMAC3 ns1__createManyResponse *SOAP_FMAC4 soap_in_ns1__createManyResponse(
    struct soap *, const char *, ns1__createManyResponse *, const char *);

#ifndef soap_write_ns1__createManyResponse
#define soap_write_ns1__createManyResponse(soap, data)                         \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:createManyResponse", NULL) ||               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__createManyResponse *SOAP_FMAC4 soap_get_ns1__createManyResponse(
    struct soap *, ns1__createManyResponse *, const char *, const char *);

#ifndef soap_read_ns1__createManyResponse
#define soap_read_ns1__createManyResponse(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__createManyResponse(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__createManyResponse *SOAP_FMAC2
soap_instantiate_ns1__createManyResponse(struct soap *, int, const char *,
                                         const char *, size_t *);

inline ns1__createManyResponse *
soap_new_ns1__createManyResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__createManyResponse(soap, n, nullptr, nullptr,
                                                  nullptr);
}

inline ns1__createManyResponse *
soap_new_req_ns1__createManyResponse(struct soap *soap) {
  ns1__createManyResponse *_p = soap_instantiate_ns1__createManyResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__createManyResponse *soap_new_set_ns1__createManyResponse(
    struct soap *soap, std::vector<LONG64> &return_, char *__item1) {
  ns1__createManyResponse *_p = soap_instantiate_ns1__createManyResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__createManyResponse::return_ = return_;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__createManyResponse(struct soap *soap,
                                                ns1__createManyResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__createManyResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__entityBaseBean
#define SOAP_TYPE_ICat4_ns1__entityBaseBean (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4
soap_out_ns1__entityBaseBean(struct soap *, const char *, int,
                             const ns1__entityBaseBean *, const char *);
SOAP_FMAC3 ns1__entityBaseBean *SOAP_FMAC4 soap_in_ns1__entityBaseBean(
    struct soap *, const char *, ns1__entityBaseBean *, const char *);

#ifndef soap_write_ns1__entityBaseBean
#define soap_write_ns1__entityBaseBean(soap, data)                             \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:entityBaseBean", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__entityBaseBean *SOAP_FMAC4 soap_get_ns1__entityBaseBean(
    struct soap *, ns1__entityBaseBean *, const char *, const char *);

#ifndef soap_read_ns1__entityBaseBean
#define soap_read_ns1__entityBaseBean(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__entityBaseBean(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__entityBaseBean *SOAP_FMAC2 soap_instantiate_ns1__entityBaseBean(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__entityBaseBean *soap_new_ns1__entityBaseBean(struct soap *soap,
                                                         int n = -1) {
  return soap_instantiate_ns1__entityBaseBean(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline ns1__entityBaseBean *
soap_new_req_ns1__entityBaseBean(struct soap *soap) {
  ns1__entityBaseBean *_p =
      soap_instantiate_ns1__entityBaseBean(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__entityBaseBean *soap_new_set_ns1__entityBaseBean(
    struct soap *soap, std::string *createId, time_t *createTime,
    time_t *modTime, LONG64 *id, std::string *modId, char *__item1) {
  ns1__entityBaseBean *_p =
      soap_instantiate_ns1__entityBaseBean(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__entityBaseBean::createId = createId;
    _p->ns1__entityBaseBean::createTime = createTime;
    _p->ns1__entityBaseBean::modTime = modTime;
    _p->ns1__entityBaseBean::id = id;
    _p->ns1__entityBaseBean::modId = modId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__entityBaseBean(struct soap *soap,
                                            ns1__entityBaseBean *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__entityBaseBean(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__createMany
#define SOAP_TYPE_ICat4_ns1__createMany (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createMany(struct soap *, const char *,
                                                   int, const ns1__createMany *,
                                                   const char *);
SOAP_FMAC3 ns1__createMany *SOAP_FMAC4 soap_in_ns1__createMany(
    struct soap *, const char *, ns1__createMany *, const char *);

#ifndef soap_write_ns1__createMany
#define soap_write_ns1__createMany(soap, data)                                 \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:createMany", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__createMany *SOAP_FMAC4 soap_get_ns1__createMany(
    struct soap *, ns1__createMany *, const char *, const char *);

#ifndef soap_read_ns1__createMany
#define soap_read_ns1__createMany(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__createMany(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__createMany *SOAP_FMAC2 soap_instantiate_ns1__createMany(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__createMany *soap_new_ns1__createMany(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_ns1__createMany(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__createMany *soap_new_req_ns1__createMany(struct soap *soap) {
  ns1__createMany *_p =
      soap_instantiate_ns1__createMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__createMany *
soap_new_set_ns1__createMany(struct soap *soap, std::string *sessionId,
                             std::vector<ns1__entityBaseBean *> &beans,
                             char *__item1) {
  ns1__createMany *_p =
      soap_instantiate_ns1__createMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__createMany::sessionId = sessionId;
    _p->ns1__createMany::beans = beans;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__createMany(struct soap *soap, ns1__createMany *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__createMany(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__IcatException
#define SOAP_TYPE_ICat4_ns1__IcatException (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__IcatException(
    struct soap *, const char *, int, const ns1__IcatException *, const char *);
SOAP_FMAC3 ns1__IcatException *SOAP_FMAC4 soap_in_ns1__IcatException(
    struct soap *, const char *, ns1__IcatException *, const char *);

#ifndef soap_write_ns1__IcatException
#define soap_write_ns1__IcatException(soap, data)                              \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:IcatException", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__IcatException *SOAP_FMAC4 soap_get_ns1__IcatException(
    struct soap *, ns1__IcatException *, const char *, const char *);

#ifndef soap_read_ns1__IcatException
#define soap_read_ns1__IcatException(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__IcatException(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__IcatException *SOAP_FMAC2 soap_instantiate_ns1__IcatException(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__IcatException *soap_new_ns1__IcatException(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_ns1__IcatException(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline ns1__IcatException *soap_new_req_ns1__IcatException(struct soap *soap,
                                                           int offset) {
  ns1__IcatException *_p =
      soap_instantiate_ns1__IcatException(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__IcatException::offset = offset;
  }
  return _p;
}

inline ns1__IcatException *
soap_new_set_ns1__IcatException(struct soap *soap, std::string *message,
                                int offset, enum ns1__icatExceptionType *type,
                                char *__item1) {
  ns1__IcatException *_p =
      soap_instantiate_ns1__IcatException(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__IcatException::message = message;
    _p->ns1__IcatException::offset = offset;
    _p->ns1__IcatException::type = type;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__IcatException(struct soap *soap,
                                           ns1__IcatException *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__IcatException(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneClearResponse
#define SOAP_TYPE_ICat4_ns1__luceneClearResponse (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneClearResponse(
    struct soap *, const char *, int, const ns1__luceneClearResponse *,
    const char *);
SOAP_FMAC3 ns1__luceneClearResponse *SOAP_FMAC4
soap_in_ns1__luceneClearResponse(struct soap *, const char *,
                                 ns1__luceneClearResponse *, const char *);

#ifndef soap_write_ns1__luceneClearResponse
#define soap_write_ns1__luceneClearResponse(soap, data)                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) ||                                                    \
       (data)->soap_put(soap, "ns1:luceneClearResponse", NULL) ||              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneClearResponse *SOAP_FMAC4
soap_get_ns1__luceneClearResponse(struct soap *, ns1__luceneClearResponse *,
                                  const char *, const char *);

#ifndef soap_read_ns1__luceneClearResponse
#define soap_read_ns1__luceneClearResponse(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneClearResponse(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneClearResponse *SOAP_FMAC2
soap_instantiate_ns1__luceneClearResponse(struct soap *, int, const char *,
                                          const char *, size_t *);

inline ns1__luceneClearResponse *
soap_new_ns1__luceneClearResponse(struct soap *soap, int n = -1) {
  return soap_instantiate_ns1__luceneClearResponse(soap, n, nullptr, nullptr,
                                                   nullptr);
}

inline ns1__luceneClearResponse *
soap_new_req_ns1__luceneClearResponse(struct soap *soap) {
  ns1__luceneClearResponse *_p = soap_instantiate_ns1__luceneClearResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__luceneClearResponse *
soap_new_set_ns1__luceneClearResponse(struct soap *soap, char *__item1) {
  ns1__luceneClearResponse *_p = soap_instantiate_ns1__luceneClearResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__luceneClearResponse(struct soap *soap,
                                                 ns1__luceneClearResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneClearResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_ns1__luceneClear
#define SOAP_TYPE_ICat4_ns1__luceneClear (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__luceneClear(struct soap *, const char *,
                                                    int,
                                                    const ns1__luceneClear *,
                                                    const char *);
SOAP_FMAC3 ns1__luceneClear *SOAP_FMAC4 soap_in_ns1__luceneClear(
    struct soap *, const char *, ns1__luceneClear *, const char *);

#ifndef soap_write_ns1__luceneClear
#define soap_write_ns1__luceneClear(soap, data)                                \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "ns1:luceneClear", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneClear *SOAP_FMAC4 soap_get_ns1__luceneClear(
    struct soap *, ns1__luceneClear *, const char *, const char *);

#ifndef soap_read_ns1__luceneClear
#define soap_read_ns1__luceneClear(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_ns1__luceneClear(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 ns1__luceneClear *SOAP_FMAC2 soap_instantiate_ns1__luceneClear(
    struct soap *, int, const char *, const char *, size_t *);

inline ns1__luceneClear *soap_new_ns1__luceneClear(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_ns1__luceneClear(soap, n, nullptr, nullptr, nullptr);
}

inline ns1__luceneClear *soap_new_req_ns1__luceneClear(struct soap *soap) {
  ns1__luceneClear *_p =
      soap_instantiate_ns1__luceneClear(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline ns1__luceneClear *soap_new_set_ns1__luceneClear(struct soap *soap,
                                                       std::string *sessionId,
                                                       char *__item1) {
  ns1__luceneClear *_p =
      soap_instantiate_ns1__luceneClear(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->ns1__luceneClear::sessionId = sessionId;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_ns1__luceneClear(struct soap *soap,
                                         ns1__luceneClear *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__luceneClear(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__string
#define SOAP_TYPE_ICat4_std__string (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *,
                                                    std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *,
                                                      const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *, const char *, int,
                                               const std::string *,
                                               const char *);
SOAP_FMAC3 std::string *SOAP_FMAC4 soap_in_std__string(struct soap *,
                                                       const char *,
                                                       std::string *,
                                                       const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *,
                                               const std::string *,
                                               const char *, const char *);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data)                                     \
  (soap_serialize_std__string(soap, data),                                     \
   soap_begin_send(soap) ||                                                    \
       soap_put_std__string(soap, data, "string", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 std::string *SOAP_FMAC4 soap_get_std__string(struct soap *,
                                                        std::string *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data)                                      \
  (soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 std::string *SOAP_FMAC2 soap_instantiate_std__string(
    struct soap *, int, const char *, const char *, size_t *);

inline std::string *soap_new_std__string(struct soap *soap, int n = -1) {
  return soap_instantiate_std__string(soap, n, nullptr, nullptr, nullptr);
}

inline std::string *soap_new_req_std__string(struct soap *soap) {
  std::string *_p =
      soap_instantiate_std__string(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default_std__string(soap, _p);
  }
  return _p;
}

inline std::string *soap_new_set_std__string(struct soap *soap) {
  std::string *_p =
      soap_instantiate_std__string(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default_std__string(soap, _p);
  }
  return _p;
}

inline void soap_delete_std__string(struct soap *soap, std::string *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_xsd__string
#define SOAP_TYPE_ICat4_xsd__string (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *, const char *, int,
                                               const xsd__string *,
                                               const char *);
SOAP_FMAC3 xsd__string *SOAP_FMAC4 soap_in_xsd__string(struct soap *,
                                                       const char *,
                                                       xsd__string *,
                                                       const char *);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "xsd:string", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__string *SOAP_FMAC4 soap_get_xsd__string(struct soap *,
                                                        xsd__string *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_xsd__string(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 xsd__string *SOAP_FMAC2 soap_instantiate_xsd__string(
    struct soap *, int, const char *, const char *, size_t *);

inline xsd__string *soap_new_xsd__string(struct soap *soap, int n = -1) {
  return soap_instantiate_xsd__string(soap, n, nullptr, nullptr, nullptr);
}

inline xsd__string *soap_new_req_xsd__string(struct soap *soap,
                                             std::string &__item) {
  xsd__string *_p =
      soap_instantiate_xsd__string(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__string::__item = __item;
  }
  return _p;
}

inline xsd__string *soap_new_set_xsd__string(struct soap *soap,
                                             std::string &__item,
                                             char *__item1) {
  xsd__string *_p =
      soap_instantiate_xsd__string(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__string::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_xsd__long
#define SOAP_TYPE_ICat4_xsd__long (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *, const char *, int,
                                             const xsd__long *, const char *);
SOAP_FMAC3 xsd__long *SOAP_FMAC4 soap_in_xsd__long(struct soap *, const char *,
                                                   xsd__long *, const char *);

#ifndef soap_write_xsd__long
#define soap_write_xsd__long(soap, data)                                       \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "xsd:long", NULL) ||        \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__long *SOAP_FMAC4 soap_get_xsd__long(struct soap *, xsd__long *,
                                                    const char *, const char *);

#ifndef soap_read_xsd__long
#define soap_read_xsd__long(soap, data)                                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_xsd__long(soap, data, NULL, NULL) ||                   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 xsd__long *SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *, int,
                                                            const char *,
                                                            const char *,
                                                            size_t *);

inline xsd__long *soap_new_xsd__long(struct soap *soap, int n = -1) {
  return soap_instantiate_xsd__long(soap, n, nullptr, nullptr, nullptr);
}

inline xsd__long *soap_new_req_xsd__long(struct soap *soap, LONG64 __item) {
  xsd__long *_p =
      soap_instantiate_xsd__long(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__long::__item = __item;
  }
  return _p;
}

inline xsd__long *soap_new_set_xsd__long(struct soap *soap, LONG64 __item,
                                         char *__item1) {
  xsd__long *_p =
      soap_instantiate_xsd__long(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__long::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_xsd__long(struct soap *soap, xsd__long *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap *, int, int, void *,
                                               size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_xsd__int
#define SOAP_TYPE_ICat4_xsd__int (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *, const char *, int,
                                            const xsd__int *, const char *);
SOAP_FMAC3 xsd__int *SOAP_FMAC4 soap_in_xsd__int(struct soap *, const char *,
                                                 xsd__int *, const char *);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data)                                        \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "xsd:int", NULL) ||         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__int *SOAP_FMAC4 soap_get_xsd__int(struct soap *, xsd__int *,
                                                  const char *, const char *);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data)                                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_xsd__int(soap, data, NULL, NULL) ||                    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 xsd__int *SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *, int,
                                                          const char *,
                                                          const char *,
                                                          size_t *);

inline xsd__int *soap_new_xsd__int(struct soap *soap, int n = -1) {
  return soap_instantiate_xsd__int(soap, n, nullptr, nullptr, nullptr);
}

inline xsd__int *soap_new_req_xsd__int(struct soap *soap, int __item) {
  xsd__int *_p = soap_instantiate_xsd__int(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__int::__item = __item;
  }
  return _p;
}

inline xsd__int *soap_new_set_xsd__int(struct soap *soap, int __item,
                                       char *__item1) {
  xsd__int *_p = soap_instantiate_xsd__int(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__int::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *, int, int, void *,
                                              size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_xsd__double
#define SOAP_TYPE_ICat4_xsd__double (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *, const char *, int,
                                               const xsd__double *,
                                               const char *);
SOAP_FMAC3 xsd__double *SOAP_FMAC4 soap_in_xsd__double(struct soap *,
                                                       const char *,
                                                       xsd__double *,
                                                       const char *);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data)                                     \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "xsd:double", NULL) ||      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__double *SOAP_FMAC4 soap_get_xsd__double(struct soap *,
                                                        xsd__double *,
                                                        const char *,
                                                        const char *);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data)                                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_xsd__double(soap, data, NULL, NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 xsd__double *SOAP_FMAC2 soap_instantiate_xsd__double(
    struct soap *, int, const char *, const char *, size_t *);

inline xsd__double *soap_new_xsd__double(struct soap *soap, int n = -1) {
  return soap_instantiate_xsd__double(soap, n, nullptr, nullptr, nullptr);
}

inline xsd__double *soap_new_req_xsd__double(struct soap *soap, double __item) {
  xsd__double *_p =
      soap_instantiate_xsd__double(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__double::__item = __item;
  }
  return _p;
}

inline xsd__double *soap_new_set_xsd__double(struct soap *soap, double __item,
                                             char *__item1) {
  xsd__double *_p =
      soap_instantiate_xsd__double(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__double::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_xsd__double(struct soap *soap, xsd__double *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap *, int, int,
                                                 void *, size_t, const void *,
                                                 size_t);

#ifndef SOAP_TYPE_ICat4_xsd__dateTime
#define SOAP_TYPE_ICat4_xsd__dateTime (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *, const char *,
                                                 int, const xsd__dateTime *,
                                                 const char *);
SOAP_FMAC3 xsd__dateTime *SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *,
                                                           const char *,
                                                           xsd__dateTime *,
                                                           const char *);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data)                                   \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "xsd:dateTime", NULL) ||    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__dateTime *SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *,
                                                            xsd__dateTime *,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_xsd__dateTime(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 xsd__dateTime *SOAP_FMAC2 soap_instantiate_xsd__dateTime(
    struct soap *, int, const char *, const char *, size_t *);

inline xsd__dateTime *soap_new_xsd__dateTime(struct soap *soap, int n = -1) {
  return soap_instantiate_xsd__dateTime(soap, n, nullptr, nullptr, nullptr);
}

inline xsd__dateTime *soap_new_req_xsd__dateTime(struct soap *soap,
                                                 time_t __item) {
  xsd__dateTime *_p =
      soap_instantiate_xsd__dateTime(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__dateTime::__item = __item;
  }
  return _p;
}

inline xsd__dateTime *soap_new_set_xsd__dateTime(struct soap *soap,
                                                 time_t __item, char *__item1) {
  xsd__dateTime *_p =
      soap_instantiate_xsd__dateTime(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__dateTime::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4_xsd__boolean
#define SOAP_TYPE_ICat4_xsd__boolean (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *, const char *,
                                                int, const xsd__boolean *,
                                                const char *);
SOAP_FMAC3 xsd__boolean *SOAP_FMAC4 soap_in_xsd__boolean(struct soap *,
                                                         const char *,
                                                         xsd__boolean *,
                                                         const char *);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data)                                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "xsd:boolean", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__boolean *SOAP_FMAC4 soap_get_xsd__boolean(struct soap *,
                                                          xsd__boolean *,
                                                          const char *,
                                                          const char *);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_xsd__boolean(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 xsd__boolean *SOAP_FMAC2 soap_instantiate_xsd__boolean(
    struct soap *, int, const char *, const char *, size_t *);

inline xsd__boolean *soap_new_xsd__boolean(struct soap *soap, int n = -1) {
  return soap_instantiate_xsd__boolean(soap, n, nullptr, nullptr, nullptr);
}

inline xsd__boolean *soap_new_req_xsd__boolean(struct soap *soap, bool __item) {
  xsd__boolean *_p =
      soap_instantiate_xsd__boolean(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__boolean::__item = __item;
  }
  return _p;
}

inline xsd__boolean *soap_new_set_xsd__boolean(struct soap *soap, bool __item,
                                               char *__item1) {
  xsd__boolean *_p =
      soap_instantiate_xsd__boolean(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__boolean::__item = __item;
    _p->xsd__anyType::__item = __item1;
  }
  return _p;
}

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef SOAP_TYPE_ICat4_xsd__anyType
#define SOAP_TYPE_ICat4_xsd__anyType (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *, const char *,
                                                int, const xsd__anyType *,
                                                const char *);
SOAP_FMAC3 xsd__anyType *SOAP_FMAC4 soap_in_xsd__anyType(struct soap *,
                                                         const char *,
                                                         xsd__anyType *,
                                                         const char *);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data)                                    \
  ((data)->soap_serialize(soap),                                               \
   soap_begin_send(soap) || (data)->soap_put(soap, "xsd:anyType", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__anyType *SOAP_FMAC4 soap_get_xsd__anyType(struct soap *,
                                                          xsd__anyType *,
                                                          const char *,
                                                          const char *);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_xsd__anyType(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 xsd__anyType *SOAP_FMAC2 soap_instantiate_xsd__anyType(
    struct soap *, int, const char *, const char *, size_t *);

inline xsd__anyType *soap_new_xsd__anyType(struct soap *soap, int n = -1) {
  return soap_instantiate_xsd__anyType(soap, n, nullptr, nullptr, nullptr);
}

inline xsd__anyType *soap_new_req_xsd__anyType(struct soap *soap) {
  xsd__anyType *_p =
      soap_instantiate_xsd__anyType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
  }
  return _p;
}

inline xsd__anyType *soap_new_set_xsd__anyType(struct soap *soap,
                                               char *__item) {
  xsd__anyType *_p =
      soap_instantiate_xsd__anyType(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    _p->soap_default(soap);
    _p->xsd__anyType::__item = __item;
  }
  return _p;
}

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_SOAP_ENV__Fault
#define SOAP_TYPE_ICat4_SOAP_ENV__Fault (331)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_SOAP_ENV__Fault(struct soap *, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_SOAP_ENV__Fault(struct soap *, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_SOAP_ENV__Fault(struct soap *, const char *, int,
                         const struct SOAP_ENV__Fault *, const char *);
SOAP_FMAC3 struct SOAP_ENV__Fault *SOAP_FMAC4 soap_in_SOAP_ENV__Fault(
    struct soap *, const char *, struct SOAP_ENV__Fault *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(
    struct soap *, const struct SOAP_ENV__Fault *, const char *, const char *);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data)                                 \
  (ICat4::soap_serialize_SOAP_ENV__Fault(soap, data),                          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) ||  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault *SOAP_FMAC4 soap_get_SOAP_ENV__Fault(
    struct soap *, struct SOAP_ENV__Fault *, const char *, const char *);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault *SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(
    struct soap *, int, const char *, const char *, size_t *);

inline struct SOAP_ENV__Fault *soap_new_SOAP_ENV__Fault(struct soap *soap,
                                                        int n = -1) {
  return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault *soap_new_req_SOAP_ENV__Fault(struct soap *soap) {
  struct SOAP_ENV__Fault *_p =
      soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Fault(soap, _p);
  }
  return _p;
}

inline struct SOAP_ENV__Fault *soap_new_set_SOAP_ENV__Fault(
    struct soap *soap, char *faultcode, char *faultstring, char *faultactor,
    struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code,
    struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node,
    char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) {
  struct SOAP_ENV__Fault *_p =
      soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Fault(soap, _p);
    _p->faultcode = faultcode;
    _p->faultstring = faultstring;
    _p->faultactor = faultactor;
    _p->detail = detail;
    _p->SOAP_ENV__Code = SOAP_ENV__Code;
    _p->SOAP_ENV__Reason = SOAP_ENV__Reason;
    _p->SOAP_ENV__Node = SOAP_ENV__Node;
    _p->SOAP_ENV__Role = SOAP_ENV__Role;
    _p->SOAP_ENV__Detail = SOAP_ENV__Detail;
  }
  return _p;
}

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap,
                                        struct SOAP_ENV__Fault *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *, int, int,
                                                     void *, size_t,
                                                     const void *, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_SOAP_ENV__Reason
#define SOAP_TYPE_ICat4_SOAP_ENV__Reason (330)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_SOAP_ENV__Reason(struct soap *, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_SOAP_ENV__Reason(struct soap *, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_SOAP_ENV__Reason(struct soap *, const char *, int,
                          const struct SOAP_ENV__Reason *, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason *SOAP_FMAC4 soap_in_SOAP_ENV__Reason(
    struct soap *, const char *, struct SOAP_ENV__Reason *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(
    struct soap *, const struct SOAP_ENV__Reason *, const char *, const char *);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data)                                \
  (ICat4::soap_serialize_SOAP_ENV__Reason(soap, data),                         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason",         \
                                        NULL) ||                               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason *SOAP_FMAC4 soap_get_SOAP_ENV__Reason(
    struct soap *, struct SOAP_ENV__Reason *, const char *, const char *);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason *SOAP_FMAC2
soap_instantiate_SOAP_ENV__Reason(struct soap *, int, const char *,
                                  const char *, size_t *);

inline struct SOAP_ENV__Reason *soap_new_SOAP_ENV__Reason(struct soap *soap,
                                                          int n = -1) {
  return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason *
soap_new_req_SOAP_ENV__Reason(struct soap *soap) {
  struct SOAP_ENV__Reason *_p =
      soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Reason(soap, _p);
  }
  return _p;
}

inline struct SOAP_ENV__Reason *
soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) {
  struct SOAP_ENV__Reason *_p =
      soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Reason(soap, _p);
    _p->SOAP_ENV__Text = SOAP_ENV__Text;
  }
  return _p;
}

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap,
                                         struct SOAP_ENV__Reason *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_SOAP_ENV__Code
#define SOAP_TYPE_ICat4_SOAP_ENV__Code (328)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *,
                                                       struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_SOAP_ENV__Code(struct soap *, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *, const char *,
                                                  int,
                                                  const struct SOAP_ENV__Code *,
                                                  const char *);
SOAP_FMAC3 struct SOAP_ENV__Code *SOAP_FMAC4 soap_in_SOAP_ENV__Code(
    struct soap *, const char *, struct SOAP_ENV__Code *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *,
                                                  const struct SOAP_ENV__Code *,
                                                  const char *, const char *);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data)                                  \
  (ICat4::soap_serialize_SOAP_ENV__Code(soap, data),                           \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) ||    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Code *SOAP_FMAC4 soap_get_SOAP_ENV__Code(
    struct soap *, struct SOAP_ENV__Code *, const char *, const char *);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data)                                   \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct SOAP_ENV__Code *SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(
    struct soap *, int, const char *, const char *, size_t *);

inline struct SOAP_ENV__Code *soap_new_SOAP_ENV__Code(struct soap *soap,
                                                      int n = -1) {
  return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code *soap_new_req_SOAP_ENV__Code(struct soap *soap) {
  struct SOAP_ENV__Code *_p =
      soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Code(soap, _p);
  }
  return _p;
}

inline struct SOAP_ENV__Code *
soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value,
                            struct SOAP_ENV__Code *SOAP_ENV__Subcode) {
  struct SOAP_ENV__Code *_p =
      soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Code(soap, _p);
    _p->SOAP_ENV__Value = SOAP_ENV__Value;
    _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
  }
  return _p;
}

inline void soap_delete_SOAP_ENV__Code(struct soap *soap,
                                       struct SOAP_ENV__Code *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *, int, int,
                                                    void *, size_t,
                                                    const void *, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_SOAP_ENV__Header
#define SOAP_TYPE_ICat4_SOAP_ENV__Header (327)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_SOAP_ENV__Header(struct soap *, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_SOAP_ENV__Header(struct soap *, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_SOAP_ENV__Header(struct soap *, const char *, int,
                          const struct SOAP_ENV__Header *, const char *);
SOAP_FMAC3 struct SOAP_ENV__Header *SOAP_FMAC4 soap_in_SOAP_ENV__Header(
    struct soap *, const char *, struct SOAP_ENV__Header *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(
    struct soap *, const struct SOAP_ENV__Header *, const char *, const char *);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data)                                \
  (ICat4::soap_serialize_SOAP_ENV__Header(soap, data),                         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header",         \
                                        NULL) ||                               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Header *SOAP_FMAC4 soap_get_SOAP_ENV__Header(
    struct soap *, struct SOAP_ENV__Header *, const char *, const char *);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct SOAP_ENV__Header *SOAP_FMAC2
soap_instantiate_SOAP_ENV__Header(struct soap *, int, const char *,
                                  const char *, size_t *);

inline struct SOAP_ENV__Header *soap_new_SOAP_ENV__Header(struct soap *soap,
                                                          int n = -1) {
  return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header *
soap_new_req_SOAP_ENV__Header(struct soap *soap) {
  struct SOAP_ENV__Header *_p =
      soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Header(soap, _p);
  }
  return _p;
}

inline struct SOAP_ENV__Header *
soap_new_set_SOAP_ENV__Header(struct soap *soap) {
  struct SOAP_ENV__Header *_p =
      soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Header(soap, _p);
  }
  return _p;
}

inline void soap_delete_SOAP_ENV__Header(struct soap *soap,
                                         struct SOAP_ENV__Header *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#endif

#ifndef SOAP_TYPE_ICat4___ns1__getEntityInfo
#define SOAP_TYPE_ICat4___ns1__getEntityInfo (326)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__getEntityInfo(struct soap *, struct __ns1__getEntityInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getEntityInfo(
    struct soap *, const struct __ns1__getEntityInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getEntityInfo(
    struct soap *, const char *, int, const struct __ns1__getEntityInfo *,
    const char *);
SOAP_FMAC3 struct __ns1__getEntityInfo *SOAP_FMAC4 soap_in___ns1__getEntityInfo(
    struct soap *, const char *, struct __ns1__getEntityInfo *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getEntityInfo(
    struct soap *, const struct __ns1__getEntityInfo *, const char *,
    const char *);

#ifndef soap_write___ns1__getEntityInfo
#define soap_write___ns1__getEntityInfo(soap, data)                            \
  (ICat4::soap_serialize___ns1__getEntityInfo(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__getEntityInfo(soap, data, "-ns1:getEntityInfo",  \
                                            NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__getEntityInfo *SOAP_FMAC4
soap_get___ns1__getEntityInfo(struct soap *, struct __ns1__getEntityInfo *,
                              const char *, const char *);

#ifndef soap_read___ns1__getEntityInfo
#define soap_read___ns1__getEntityInfo(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__getEntityInfo(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__getEntityInfo *SOAP_FMAC2
soap_instantiate___ns1__getEntityInfo(struct soap *, int, const char *,
                                      const char *, size_t *);

inline struct __ns1__getEntityInfo *
soap_new___ns1__getEntityInfo(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__getEntityInfo(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline struct __ns1__getEntityInfo *
soap_new_req___ns1__getEntityInfo(struct soap *soap) {
  struct __ns1__getEntityInfo *_p = soap_instantiate___ns1__getEntityInfo(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getEntityInfo(soap, _p);
  }
  return _p;
}

inline struct __ns1__getEntityInfo *
soap_new_set___ns1__getEntityInfo(struct soap *soap,
                                  ns1__getEntityInfo *ns1__getEntityInfo_) {
  struct __ns1__getEntityInfo *_p = soap_instantiate___ns1__getEntityInfo(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getEntityInfo(soap, _p);
    _p->ns1__getEntityInfo_ = ns1__getEntityInfo_;
  }
  return _p;
}

inline void soap_delete___ns1__getEntityInfo(struct soap *soap,
                                             struct __ns1__getEntityInfo *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getEntityInfo(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__deleteMany
#define SOAP_TYPE_ICat4___ns1__deleteMany (322)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__deleteMany(struct soap *, struct __ns1__deleteMany *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteMany(
    struct soap *, const struct __ns1__deleteMany *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out___ns1__deleteMany(struct soap *, const char *, int,
                           const struct __ns1__deleteMany *, const char *);
SOAP_FMAC3 struct __ns1__deleteMany *SOAP_FMAC4 soap_in___ns1__deleteMany(
    struct soap *, const char *, struct __ns1__deleteMany *, const char *);

SOAP_FMAC3 int SOAP_FMAC4
soap_put___ns1__deleteMany(struct soap *, const struct __ns1__deleteMany *,
                           const char *, const char *);

#ifndef soap_write___ns1__deleteMany
#define soap_write___ns1__deleteMany(soap, data)                               \
  (ICat4::soap_serialize___ns1__deleteMany(soap, data),                        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__deleteMany(soap, data, "-ns1:deleteMany",        \
                                         NULL) ||                              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__deleteMany *SOAP_FMAC4 soap_get___ns1__deleteMany(
    struct soap *, struct __ns1__deleteMany *, const char *, const char *);

#ifndef soap_read___ns1__deleteMany
#define soap_read___ns1__deleteMany(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__deleteMany(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__deleteMany *SOAP_FMAC2
soap_instantiate___ns1__deleteMany(struct soap *, int, const char *,
                                   const char *, size_t *);

inline struct __ns1__deleteMany *soap_new___ns1__deleteMany(struct soap *soap,
                                                            int n = -1) {
  return soap_instantiate___ns1__deleteMany(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__deleteMany *
soap_new_req___ns1__deleteMany(struct soap *soap) {
  struct __ns1__deleteMany *_p =
      soap_instantiate___ns1__deleteMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__deleteMany(soap, _p);
  }
  return _p;
}

inline struct __ns1__deleteMany *
soap_new_set___ns1__deleteMany(struct soap *soap,
                               ns1__deleteMany *ns1__deleteMany_) {
  struct __ns1__deleteMany *_p =
      soap_instantiate___ns1__deleteMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__deleteMany(soap, _p);
    _p->ns1__deleteMany_ = ns1__deleteMany_;
  }
  return _p;
}

inline void soap_delete___ns1__deleteMany(struct soap *soap,
                                          struct __ns1__deleteMany *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__deleteMany(struct soap *, int, int,
                                                       void *, size_t,
                                                       const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__deleteManyResponse
#define SOAP_TYPE_ICat4___ns1__deleteManyResponse (321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteManyResponse(
    struct soap *, struct __ns1__deleteManyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteManyResponse(
    struct soap *, const struct __ns1__deleteManyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteManyResponse(
    struct soap *, const char *, int, const struct __ns1__deleteManyResponse *,
    const char *);
SOAP_FMAC3 struct __ns1__deleteManyResponse *SOAP_FMAC4
soap_in___ns1__deleteManyResponse(struct soap *, const char *,
                                  struct __ns1__deleteManyResponse *,
                                  const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteManyResponse(
    struct soap *, const struct __ns1__deleteManyResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__deleteManyResponse
#define soap_write___ns1__deleteManyResponse(soap, data)                       \
  (ICat4::soap_serialize___ns1__deleteManyResponse(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__deleteManyResponse(                              \
           soap, data, "-ns1:deleteManyResponse", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__deleteManyResponse *SOAP_FMAC4
soap_get___ns1__deleteManyResponse(struct soap *,
                                   struct __ns1__deleteManyResponse *,
                                   const char *, const char *);

#ifndef soap_read___ns1__deleteManyResponse
#define soap_read___ns1__deleteManyResponse(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__deleteManyResponse(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__deleteManyResponse *SOAP_FMAC2
soap_instantiate___ns1__deleteManyResponse(struct soap *, int, const char *,
                                           const char *, size_t *);

inline struct __ns1__deleteManyResponse *
soap_new___ns1__deleteManyResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__deleteManyResponse(soap, n, nullptr, nullptr,
                                                    nullptr);
}

inline struct __ns1__deleteManyResponse *
soap_new_req___ns1__deleteManyResponse(struct soap *soap) {
  struct __ns1__deleteManyResponse *_p =
      soap_instantiate___ns1__deleteManyResponse(soap, -1, nullptr, nullptr,
                                                 nullptr);
  if (_p) {
    soap_default___ns1__deleteManyResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__deleteManyResponse *soap_new_set___ns1__deleteManyResponse(
    struct soap *soap, ns1__deleteManyResponse *ns1__deleteManyResponse_) {
  struct __ns1__deleteManyResponse *_p =
      soap_instantiate___ns1__deleteManyResponse(soap, -1, nullptr, nullptr,
                                                 nullptr);
  if (_p) {
    soap_default___ns1__deleteManyResponse(soap, _p);
    _p->ns1__deleteManyResponse_ = ns1__deleteManyResponse_;
  }
  return _p;
}

inline void
soap_delete___ns1__deleteManyResponse(struct soap *soap,
                                      struct __ns1__deleteManyResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__deleteManyResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__createMany
#define SOAP_TYPE_ICat4___ns1__createMany (317)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__createMany(struct soap *, struct __ns1__createMany *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createMany(
    struct soap *, const struct __ns1__createMany *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out___ns1__createMany(struct soap *, const char *, int,
                           const struct __ns1__createMany *, const char *);
SOAP_FMAC3 struct __ns1__createMany *SOAP_FMAC4 soap_in___ns1__createMany(
    struct soap *, const char *, struct __ns1__createMany *, const char *);

SOAP_FMAC3 int SOAP_FMAC4
soap_put___ns1__createMany(struct soap *, const struct __ns1__createMany *,
                           const char *, const char *);

#ifndef soap_write___ns1__createMany
#define soap_write___ns1__createMany(soap, data)                               \
  (ICat4::soap_serialize___ns1__createMany(soap, data),                        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__createMany(soap, data, "-ns1:createMany",        \
                                         NULL) ||                              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__createMany *SOAP_FMAC4 soap_get___ns1__createMany(
    struct soap *, struct __ns1__createMany *, const char *, const char *);

#ifndef soap_read___ns1__createMany
#define soap_read___ns1__createMany(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__createMany(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__createMany *SOAP_FMAC2
soap_instantiate___ns1__createMany(struct soap *, int, const char *,
                                   const char *, size_t *);

inline struct __ns1__createMany *soap_new___ns1__createMany(struct soap *soap,
                                                            int n = -1) {
  return soap_instantiate___ns1__createMany(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__createMany *
soap_new_req___ns1__createMany(struct soap *soap) {
  struct __ns1__createMany *_p =
      soap_instantiate___ns1__createMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__createMany(soap, _p);
  }
  return _p;
}

inline struct __ns1__createMany *
soap_new_set___ns1__createMany(struct soap *soap,
                               ns1__createMany *ns1__createMany_) {
  struct __ns1__createMany *_p =
      soap_instantiate___ns1__createMany(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__createMany(soap, _p);
    _p->ns1__createMany_ = ns1__createMany_;
  }
  return _p;
}

inline void soap_delete___ns1__createMany(struct soap *soap,
                                          struct __ns1__createMany *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__createMany(struct soap *, int, int,
                                                       void *, size_t,
                                                       const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__luceneGetPopulating
#define SOAP_TYPE_ICat4___ns1__luceneGetPopulating (313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__luceneGetPopulating(
    struct soap *, struct __ns1__luceneGetPopulating *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__luceneGetPopulating(
    struct soap *, const struct __ns1__luceneGetPopulating *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__luceneGetPopulating(
    struct soap *, const char *, int, const struct __ns1__luceneGetPopulating *,
    const char *);
SOAP_FMAC3 struct __ns1__luceneGetPopulating *SOAP_FMAC4
soap_in___ns1__luceneGetPopulating(struct soap *, const char *,
                                   struct __ns1__luceneGetPopulating *,
                                   const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__luceneGetPopulating(
    struct soap *, const struct __ns1__luceneGetPopulating *, const char *,
    const char *);

#ifndef soap_write___ns1__luceneGetPopulating
#define soap_write___ns1__luceneGetPopulating(soap, data)                      \
  (ICat4::soap_serialize___ns1__luceneGetPopulating(soap, data),               \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__luceneGetPopulating(                             \
           soap, data, "-ns1:luceneGetPopulating", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__luceneGetPopulating *SOAP_FMAC4
soap_get___ns1__luceneGetPopulating(struct soap *,
                                    struct __ns1__luceneGetPopulating *,
                                    const char *, const char *);

#ifndef soap_read___ns1__luceneGetPopulating
#define soap_read___ns1__luceneGetPopulating(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__luceneGetPopulating(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__luceneGetPopulating *SOAP_FMAC2
soap_instantiate___ns1__luceneGetPopulating(struct soap *, int, const char *,
                                            const char *, size_t *);

inline struct __ns1__luceneGetPopulating *
soap_new___ns1__luceneGetPopulating(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__luceneGetPopulating(soap, n, nullptr, nullptr,
                                                     nullptr);
}

inline struct __ns1__luceneGetPopulating *
soap_new_req___ns1__luceneGetPopulating(struct soap *soap) {
  struct __ns1__luceneGetPopulating *_p =
      soap_instantiate___ns1__luceneGetPopulating(soap, -1, nullptr, nullptr,
                                                  nullptr);
  if (_p) {
    soap_default___ns1__luceneGetPopulating(soap, _p);
  }
  return _p;
}

inline struct __ns1__luceneGetPopulating *
soap_new_set___ns1__luceneGetPopulating(
    struct soap *soap, ns1__luceneGetPopulating *ns1__luceneGetPopulating_) {
  struct __ns1__luceneGetPopulating *_p =
      soap_instantiate___ns1__luceneGetPopulating(soap, -1, nullptr, nullptr,
                                                  nullptr);
  if (_p) {
    soap_default___ns1__luceneGetPopulating(soap, _p);
    _p->ns1__luceneGetPopulating_ = ns1__luceneGetPopulating_;
  }
  return _p;
}

inline void
soap_delete___ns1__luceneGetPopulating(struct soap *soap,
                                       struct __ns1__luceneGetPopulating *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__luceneGetPopulating(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__luceneSearch
#define SOAP_TYPE_ICat4___ns1__luceneSearch (309)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__luceneSearch(struct soap *, struct __ns1__luceneSearch *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__luceneSearch(
    struct soap *, const struct __ns1__luceneSearch *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out___ns1__luceneSearch(struct soap *, const char *, int,
                             const struct __ns1__luceneSearch *, const char *);
SOAP_FMAC3 struct __ns1__luceneSearch *SOAP_FMAC4 soap_in___ns1__luceneSearch(
    struct soap *, const char *, struct __ns1__luceneSearch *, const char *);

SOAP_FMAC3 int SOAP_FMAC4
soap_put___ns1__luceneSearch(struct soap *, const struct __ns1__luceneSearch *,
                             const char *, const char *);

#ifndef soap_write___ns1__luceneSearch
#define soap_write___ns1__luceneSearch(soap, data)                             \
  (ICat4::soap_serialize___ns1__luceneSearch(soap, data),                      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__luceneSearch(soap, data, "-ns1:luceneSearch",    \
                                           NULL) ||                            \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__luceneSearch *SOAP_FMAC4 soap_get___ns1__luceneSearch(
    struct soap *, struct __ns1__luceneSearch *, const char *, const char *);

#ifndef soap_read___ns1__luceneSearch
#define soap_read___ns1__luceneSearch(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__luceneSearch(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__luceneSearch *SOAP_FMAC2
soap_instantiate___ns1__luceneSearch(struct soap *, int, const char *,
                                     const char *, size_t *);

inline struct __ns1__luceneSearch *
soap_new___ns1__luceneSearch(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__luceneSearch(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline struct __ns1__luceneSearch *
soap_new_req___ns1__luceneSearch(struct soap *soap) {
  struct __ns1__luceneSearch *_p =
      soap_instantiate___ns1__luceneSearch(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__luceneSearch(soap, _p);
  }
  return _p;
}

inline struct __ns1__luceneSearch *
soap_new_set___ns1__luceneSearch(struct soap *soap,
                                 ns1__luceneSearch *ns1__luceneSearch_) {
  struct __ns1__luceneSearch *_p =
      soap_instantiate___ns1__luceneSearch(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__luceneSearch(soap, _p);
    _p->ns1__luceneSearch_ = ns1__luceneSearch_;
  }
  return _p;
}

inline void soap_delete___ns1__luceneSearch(struct soap *soap,
                                            struct __ns1__luceneSearch *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__luceneSearch(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__luceneCommit
#define SOAP_TYPE_ICat4___ns1__luceneCommit (305)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__luceneCommit(struct soap *, struct __ns1__luceneCommit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__luceneCommit(
    struct soap *, const struct __ns1__luceneCommit *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out___ns1__luceneCommit(struct soap *, const char *, int,
                             const struct __ns1__luceneCommit *, const char *);
SOAP_FMAC3 struct __ns1__luceneCommit *SOAP_FMAC4 soap_in___ns1__luceneCommit(
    struct soap *, const char *, struct __ns1__luceneCommit *, const char *);

SOAP_FMAC3 int SOAP_FMAC4
soap_put___ns1__luceneCommit(struct soap *, const struct __ns1__luceneCommit *,
                             const char *, const char *);

#ifndef soap_write___ns1__luceneCommit
#define soap_write___ns1__luceneCommit(soap, data)                             \
  (ICat4::soap_serialize___ns1__luceneCommit(soap, data),                      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__luceneCommit(soap, data, "-ns1:luceneCommit",    \
                                           NULL) ||                            \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__luceneCommit *SOAP_FMAC4 soap_get___ns1__luceneCommit(
    struct soap *, struct __ns1__luceneCommit *, const char *, const char *);

#ifndef soap_read___ns1__luceneCommit
#define soap_read___ns1__luceneCommit(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__luceneCommit(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__luceneCommit *SOAP_FMAC2
soap_instantiate___ns1__luceneCommit(struct soap *, int, const char *,
                                     const char *, size_t *);

inline struct __ns1__luceneCommit *
soap_new___ns1__luceneCommit(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__luceneCommit(soap, n, nullptr, nullptr,
                                              nullptr);
}

inline struct __ns1__luceneCommit *
soap_new_req___ns1__luceneCommit(struct soap *soap) {
  struct __ns1__luceneCommit *_p =
      soap_instantiate___ns1__luceneCommit(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__luceneCommit(soap, _p);
  }
  return _p;
}

inline struct __ns1__luceneCommit *
soap_new_set___ns1__luceneCommit(struct soap *soap,
                                 ns1__luceneCommit *ns1__luceneCommit_) {
  struct __ns1__luceneCommit *_p =
      soap_instantiate___ns1__luceneCommit(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__luceneCommit(soap, _p);
    _p->ns1__luceneCommit_ = ns1__luceneCommit_;
  }
  return _p;
}

inline void soap_delete___ns1__luceneCommit(struct soap *soap,
                                            struct __ns1__luceneCommit *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__luceneCommit(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__luceneCommitResponse
#define SOAP_TYPE_ICat4___ns1__luceneCommitResponse (304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__luceneCommitResponse(
    struct soap *, struct __ns1__luceneCommitResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__luceneCommitResponse(
    struct soap *, const struct __ns1__luceneCommitResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__luceneCommitResponse(
    struct soap *, const char *, int,
    const struct __ns1__luceneCommitResponse *, const char *);
SOAP_FMAC3 struct __ns1__luceneCommitResponse *SOAP_FMAC4
soap_in___ns1__luceneCommitResponse(struct soap *, const char *,
                                    struct __ns1__luceneCommitResponse *,
                                    const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__luceneCommitResponse(
    struct soap *, const struct __ns1__luceneCommitResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__luceneCommitResponse
#define soap_write___ns1__luceneCommitResponse(soap, data)                     \
  (ICat4::soap_serialize___ns1__luceneCommitResponse(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__luceneCommitResponse(                            \
           soap, data, "-ns1:luceneCommitResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__luceneCommitResponse *SOAP_FMAC4
soap_get___ns1__luceneCommitResponse(struct soap *,
                                     struct __ns1__luceneCommitResponse *,
                                     const char *, const char *);

#ifndef soap_read___ns1__luceneCommitResponse
#define soap_read___ns1__luceneCommitResponse(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__luceneCommitResponse(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__luceneCommitResponse *SOAP_FMAC2
soap_instantiate___ns1__luceneCommitResponse(struct soap *, int, const char *,
                                             const char *, size_t *);

inline struct __ns1__luceneCommitResponse *
soap_new___ns1__luceneCommitResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__luceneCommitResponse(soap, n, nullptr, nullptr,
                                                      nullptr);
}

inline struct __ns1__luceneCommitResponse *
soap_new_req___ns1__luceneCommitResponse(struct soap *soap) {
  struct __ns1__luceneCommitResponse *_p =
      soap_instantiate___ns1__luceneCommitResponse(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    soap_default___ns1__luceneCommitResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__luceneCommitResponse *
soap_new_set___ns1__luceneCommitResponse(
    struct soap *soap, ns1__luceneCommitResponse *ns1__luceneCommitResponse_) {
  struct __ns1__luceneCommitResponse *_p =
      soap_instantiate___ns1__luceneCommitResponse(soap, -1, nullptr, nullptr,
                                                   nullptr);
  if (_p) {
    soap_default___ns1__luceneCommitResponse(soap, _p);
    _p->ns1__luceneCommitResponse_ = ns1__luceneCommitResponse_;
  }
  return _p;
}

inline void
soap_delete___ns1__luceneCommitResponse(struct soap *soap,
                                        struct __ns1__luceneCommitResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__luceneCommitResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__luceneClear
#define SOAP_TYPE_ICat4___ns1__luceneClear (300)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__luceneClear(struct soap *, struct __ns1__luceneClear *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__luceneClear(
    struct soap *, const struct __ns1__luceneClear *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out___ns1__luceneClear(struct soap *, const char *, int,
                            const struct __ns1__luceneClear *, const char *);
SOAP_FMAC3 struct __ns1__luceneClear *SOAP_FMAC4 soap_in___ns1__luceneClear(
    struct soap *, const char *, struct __ns1__luceneClear *, const char *);

SOAP_FMAC3 int SOAP_FMAC4
soap_put___ns1__luceneClear(struct soap *, const struct __ns1__luceneClear *,
                            const char *, const char *);

#ifndef soap_write___ns1__luceneClear
#define soap_write___ns1__luceneClear(soap, data)                              \
  (ICat4::soap_serialize___ns1__luceneClear(soap, data),                       \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__luceneClear(soap, data, "-ns1:luceneClear",      \
                                          NULL) ||                             \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__luceneClear *SOAP_FMAC4 soap_get___ns1__luceneClear(
    struct soap *, struct __ns1__luceneClear *, const char *, const char *);

#ifndef soap_read___ns1__luceneClear
#define soap_read___ns1__luceneClear(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__luceneClear(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__luceneClear *SOAP_FMAC2
soap_instantiate___ns1__luceneClear(struct soap *, int, const char *,
                                    const char *, size_t *);

inline struct __ns1__luceneClear *soap_new___ns1__luceneClear(struct soap *soap,
                                                              int n = -1) {
  return soap_instantiate___ns1__luceneClear(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline struct __ns1__luceneClear *
soap_new_req___ns1__luceneClear(struct soap *soap) {
  struct __ns1__luceneClear *_p =
      soap_instantiate___ns1__luceneClear(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__luceneClear(soap, _p);
  }
  return _p;
}

inline struct __ns1__luceneClear *
soap_new_set___ns1__luceneClear(struct soap *soap,
                                ns1__luceneClear *ns1__luceneClear_) {
  struct __ns1__luceneClear *_p =
      soap_instantiate___ns1__luceneClear(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__luceneClear(soap, _p);
    _p->ns1__luceneClear_ = ns1__luceneClear_;
  }
  return _p;
}

inline void soap_delete___ns1__luceneClear(struct soap *soap,
                                           struct __ns1__luceneClear *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__luceneClear(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__luceneClearResponse
#define SOAP_TYPE_ICat4___ns1__luceneClearResponse (299)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__luceneClearResponse(
    struct soap *, struct __ns1__luceneClearResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__luceneClearResponse(
    struct soap *, const struct __ns1__luceneClearResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__luceneClearResponse(
    struct soap *, const char *, int, const struct __ns1__luceneClearResponse *,
    const char *);
SOAP_FMAC3 struct __ns1__luceneClearResponse *SOAP_FMAC4
soap_in___ns1__luceneClearResponse(struct soap *, const char *,
                                   struct __ns1__luceneClearResponse *,
                                   const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__luceneClearResponse(
    struct soap *, const struct __ns1__luceneClearResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__luceneClearResponse
#define soap_write___ns1__luceneClearResponse(soap, data)                      \
  (ICat4::soap_serialize___ns1__luceneClearResponse(soap, data),               \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__luceneClearResponse(                             \
           soap, data, "-ns1:luceneClearResponse", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__luceneClearResponse *SOAP_FMAC4
soap_get___ns1__luceneClearResponse(struct soap *,
                                    struct __ns1__luceneClearResponse *,
                                    const char *, const char *);

#ifndef soap_read___ns1__luceneClearResponse
#define soap_read___ns1__luceneClearResponse(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__luceneClearResponse(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__luceneClearResponse *SOAP_FMAC2
soap_instantiate___ns1__luceneClearResponse(struct soap *, int, const char *,
                                            const char *, size_t *);

inline struct __ns1__luceneClearResponse *
soap_new___ns1__luceneClearResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__luceneClearResponse(soap, n, nullptr, nullptr,
                                                     nullptr);
}

inline struct __ns1__luceneClearResponse *
soap_new_req___ns1__luceneClearResponse(struct soap *soap) {
  struct __ns1__luceneClearResponse *_p =
      soap_instantiate___ns1__luceneClearResponse(soap, -1, nullptr, nullptr,
                                                  nullptr);
  if (_p) {
    soap_default___ns1__luceneClearResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__luceneClearResponse *
soap_new_set___ns1__luceneClearResponse(
    struct soap *soap, ns1__luceneClearResponse *ns1__luceneClearResponse_) {
  struct __ns1__luceneClearResponse *_p =
      soap_instantiate___ns1__luceneClearResponse(soap, -1, nullptr, nullptr,
                                                  nullptr);
  if (_p) {
    soap_default___ns1__luceneClearResponse(soap, _p);
    _p->ns1__luceneClearResponse_ = ns1__luceneClearResponse_;
  }
  return _p;
}

inline void
soap_delete___ns1__luceneClearResponse(struct soap *soap,
                                       struct __ns1__luceneClearResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__luceneClearResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__lucenePopulate
#define SOAP_TYPE_ICat4___ns1__lucenePopulate (295)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__lucenePopulate(
    struct soap *, struct __ns1__lucenePopulate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__lucenePopulate(
    struct soap *, const struct __ns1__lucenePopulate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__lucenePopulate(
    struct soap *, const char *, int, const struct __ns1__lucenePopulate *,
    const char *);
SOAP_FMAC3 struct __ns1__lucenePopulate *SOAP_FMAC4
soap_in___ns1__lucenePopulate(struct soap *, const char *,
                              struct __ns1__lucenePopulate *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__lucenePopulate(
    struct soap *, const struct __ns1__lucenePopulate *, const char *,
    const char *);

#ifndef soap_write___ns1__lucenePopulate
#define soap_write___ns1__lucenePopulate(soap, data)                           \
  (ICat4::soap_serialize___ns1__lucenePopulate(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__lucenePopulate(soap, data,                       \
                                             "-ns1:lucenePopulate", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__lucenePopulate *SOAP_FMAC4
soap_get___ns1__lucenePopulate(struct soap *, struct __ns1__lucenePopulate *,
                               const char *, const char *);

#ifndef soap_read___ns1__lucenePopulate
#define soap_read___ns1__lucenePopulate(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__lucenePopulate(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__lucenePopulate *SOAP_FMAC2
soap_instantiate___ns1__lucenePopulate(struct soap *, int, const char *,
                                       const char *, size_t *);

inline struct __ns1__lucenePopulate *
soap_new___ns1__lucenePopulate(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__lucenePopulate(soap, n, nullptr, nullptr,
                                                nullptr);
}

inline struct __ns1__lucenePopulate *
soap_new_req___ns1__lucenePopulate(struct soap *soap) {
  struct __ns1__lucenePopulate *_p = soap_instantiate___ns1__lucenePopulate(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__lucenePopulate(soap, _p);
  }
  return _p;
}

inline struct __ns1__lucenePopulate *
soap_new_set___ns1__lucenePopulate(struct soap *soap,
                                   ns1__lucenePopulate *ns1__lucenePopulate_) {
  struct __ns1__lucenePopulate *_p = soap_instantiate___ns1__lucenePopulate(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__lucenePopulate(soap, _p);
    _p->ns1__lucenePopulate_ = ns1__lucenePopulate_;
  }
  return _p;
}

inline void soap_delete___ns1__lucenePopulate(struct soap *soap,
                                              struct __ns1__lucenePopulate *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__lucenePopulate(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4___ns1__lucenePopulateResponse
#define SOAP_TYPE_ICat4___ns1__lucenePopulateResponse (294)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__lucenePopulateResponse(
    struct soap *, struct __ns1__lucenePopulateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__lucenePopulateResponse(
    struct soap *, const struct __ns1__lucenePopulateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__lucenePopulateResponse(
    struct soap *, const char *, int,
    const struct __ns1__lucenePopulateResponse *, const char *);
SOAP_FMAC3 struct __ns1__lucenePopulateResponse *SOAP_FMAC4
soap_in___ns1__lucenePopulateResponse(struct soap *, const char *,
                                      struct __ns1__lucenePopulateResponse *,
                                      const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__lucenePopulateResponse(
    struct soap *, const struct __ns1__lucenePopulateResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__lucenePopulateResponse
#define soap_write___ns1__lucenePopulateResponse(soap, data)                   \
  (ICat4::soap_serialize___ns1__lucenePopulateResponse(soap, data),            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__lucenePopulateResponse(                          \
           soap, data, "-ns1:lucenePopulateResponse", NULL) ||                 \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__lucenePopulateResponse *SOAP_FMAC4
soap_get___ns1__lucenePopulateResponse(struct soap *,
                                       struct __ns1__lucenePopulateResponse *,
                                       const char *, const char *);

#ifndef soap_read___ns1__lucenePopulateResponse
#define soap_read___ns1__lucenePopulateResponse(soap, data)                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__lucenePopulateResponse(soap, data, NULL,        \
                                                      NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__lucenePopulateResponse *SOAP_FMAC2
soap_instantiate___ns1__lucenePopulateResponse(struct soap *, int, const char *,
                                               const char *, size_t *);

inline struct __ns1__lucenePopulateResponse *
soap_new___ns1__lucenePopulateResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__lucenePopulateResponse(soap, n, nullptr,
                                                        nullptr, nullptr);
}

inline struct __ns1__lucenePopulateResponse *
soap_new_req___ns1__lucenePopulateResponse(struct soap *soap) {
  struct __ns1__lucenePopulateResponse *_p =
      soap_instantiate___ns1__lucenePopulateResponse(soap, -1, nullptr, nullptr,
                                                     nullptr);
  if (_p) {
    soap_default___ns1__lucenePopulateResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__lucenePopulateResponse *
soap_new_set___ns1__lucenePopulateResponse(
    struct soap *soap,
    ns1__lucenePopulateResponse *ns1__lucenePopulateResponse_) {
  struct __ns1__lucenePopulateResponse *_p =
      soap_instantiate___ns1__lucenePopulateResponse(soap, -1, nullptr, nullptr,
                                                     nullptr);
  if (_p) {
    soap_default___ns1__lucenePopulateResponse(soap, _p);
    _p->ns1__lucenePopulateResponse_ = ns1__lucenePopulateResponse_;
  }
  return _p;
}

inline void soap_delete___ns1__lucenePopulateResponse(
    struct soap *soap, struct __ns1__lucenePopulateResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__lucenePopulateResponse(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__isAccessAllowed
#define SOAP_TYPE_ICat4___ns1__isAccessAllowed (290)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isAccessAllowed(
    struct soap *, struct __ns1__isAccessAllowed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isAccessAllowed(
    struct soap *, const struct __ns1__isAccessAllowed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isAccessAllowed(
    struct soap *, const char *, int, const struct __ns1__isAccessAllowed *,
    const char *);
SOAP_FMAC3 struct __ns1__isAccessAllowed *SOAP_FMAC4
soap_in___ns1__isAccessAllowed(struct soap *, const char *,
                               struct __ns1__isAccessAllowed *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isAccessAllowed(
    struct soap *, const struct __ns1__isAccessAllowed *, const char *,
    const char *);

#ifndef soap_write___ns1__isAccessAllowed
#define soap_write___ns1__isAccessAllowed(soap, data)                          \
  (ICat4::soap_serialize___ns1__isAccessAllowed(soap, data),                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__isAccessAllowed(soap, data,                      \
                                              "-ns1:isAccessAllowed", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__isAccessAllowed *SOAP_FMAC4
soap_get___ns1__isAccessAllowed(struct soap *, struct __ns1__isAccessAllowed *,
                                const char *, const char *);

#ifndef soap_read___ns1__isAccessAllowed
#define soap_read___ns1__isAccessAllowed(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__isAccessAllowed(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__isAccessAllowed *SOAP_FMAC2
soap_instantiate___ns1__isAccessAllowed(struct soap *, int, const char *,
                                        const char *, size_t *);

inline struct __ns1__isAccessAllowed *
soap_new___ns1__isAccessAllowed(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__isAccessAllowed(soap, n, nullptr, nullptr,
                                                 nullptr);
}

inline struct __ns1__isAccessAllowed *
soap_new_req___ns1__isAccessAllowed(struct soap *soap) {
  struct __ns1__isAccessAllowed *_p = soap_instantiate___ns1__isAccessAllowed(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__isAccessAllowed(soap, _p);
  }
  return _p;
}

inline struct __ns1__isAccessAllowed *soap_new_set___ns1__isAccessAllowed(
    struct soap *soap, ns1__isAccessAllowed *ns1__isAccessAllowed_) {
  struct __ns1__isAccessAllowed *_p = soap_instantiate___ns1__isAccessAllowed(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__isAccessAllowed(soap, _p);
    _p->ns1__isAccessAllowed_ = ns1__isAccessAllowed_;
  }
  return _p;
}

inline void
soap_delete___ns1__isAccessAllowed(struct soap *soap,
                                   struct __ns1__isAccessAllowed *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isAccessAllowed(struct soap *, int,
                                                            int, void *, size_t,
                                                            const void *,
                                                            size_t);

#ifndef SOAP_TYPE_ICat4___ns1__searchText
#define SOAP_TYPE_ICat4___ns1__searchText (286)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__searchText(struct soap *, struct __ns1__searchText *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__searchText(
    struct soap *, const struct __ns1__searchText *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out___ns1__searchText(struct soap *, const char *, int,
                           const struct __ns1__searchText *, const char *);
SOAP_FMAC3 struct __ns1__searchText *SOAP_FMAC4 soap_in___ns1__searchText(
    struct soap *, const char *, struct __ns1__searchText *, const char *);

SOAP_FMAC3 int SOAP_FMAC4
soap_put___ns1__searchText(struct soap *, const struct __ns1__searchText *,
                           const char *, const char *);

#ifndef soap_write___ns1__searchText
#define soap_write___ns1__searchText(soap, data)                               \
  (ICat4::soap_serialize___ns1__searchText(soap, data),                        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__searchText(soap, data, "-ns1:searchText",        \
                                         NULL) ||                              \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__searchText *SOAP_FMAC4 soap_get___ns1__searchText(
    struct soap *, struct __ns1__searchText *, const char *, const char *);

#ifndef soap_read___ns1__searchText
#define soap_read___ns1__searchText(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__searchText(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__searchText *SOAP_FMAC2
soap_instantiate___ns1__searchText(struct soap *, int, const char *,
                                   const char *, size_t *);

inline struct __ns1__searchText *soap_new___ns1__searchText(struct soap *soap,
                                                            int n = -1) {
  return soap_instantiate___ns1__searchText(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__searchText *
soap_new_req___ns1__searchText(struct soap *soap) {
  struct __ns1__searchText *_p =
      soap_instantiate___ns1__searchText(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__searchText(soap, _p);
  }
  return _p;
}

inline struct __ns1__searchText *
soap_new_set___ns1__searchText(struct soap *soap,
                               ns1__searchText *ns1__searchText_) {
  struct __ns1__searchText *_p =
      soap_instantiate___ns1__searchText(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__searchText(soap, _p);
    _p->ns1__searchText_ = ns1__searchText_;
  }
  return _p;
}

inline void soap_delete___ns1__searchText(struct soap *soap,
                                          struct __ns1__searchText *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__searchText(struct soap *, int, int,
                                                       void *, size_t,
                                                       const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__getRemainingMinutes
#define SOAP_TYPE_ICat4___ns1__getRemainingMinutes (282)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRemainingMinutes(
    struct soap *, struct __ns1__getRemainingMinutes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRemainingMinutes(
    struct soap *, const struct __ns1__getRemainingMinutes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRemainingMinutes(
    struct soap *, const char *, int, const struct __ns1__getRemainingMinutes *,
    const char *);
SOAP_FMAC3 struct __ns1__getRemainingMinutes *SOAP_FMAC4
soap_in___ns1__getRemainingMinutes(struct soap *, const char *,
                                   struct __ns1__getRemainingMinutes *,
                                   const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRemainingMinutes(
    struct soap *, const struct __ns1__getRemainingMinutes *, const char *,
    const char *);

#ifndef soap_write___ns1__getRemainingMinutes
#define soap_write___ns1__getRemainingMinutes(soap, data)                      \
  (ICat4::soap_serialize___ns1__getRemainingMinutes(soap, data),               \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__getRemainingMinutes(                             \
           soap, data, "-ns1:getRemainingMinutes", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__getRemainingMinutes *SOAP_FMAC4
soap_get___ns1__getRemainingMinutes(struct soap *,
                                    struct __ns1__getRemainingMinutes *,
                                    const char *, const char *);

#ifndef soap_read___ns1__getRemainingMinutes
#define soap_read___ns1__getRemainingMinutes(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__getRemainingMinutes(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__getRemainingMinutes *SOAP_FMAC2
soap_instantiate___ns1__getRemainingMinutes(struct soap *, int, const char *,
                                            const char *, size_t *);

inline struct __ns1__getRemainingMinutes *
soap_new___ns1__getRemainingMinutes(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__getRemainingMinutes(soap, n, nullptr, nullptr,
                                                     nullptr);
}

inline struct __ns1__getRemainingMinutes *
soap_new_req___ns1__getRemainingMinutes(struct soap *soap) {
  struct __ns1__getRemainingMinutes *_p =
      soap_instantiate___ns1__getRemainingMinutes(soap, -1, nullptr, nullptr,
                                                  nullptr);
  if (_p) {
    soap_default___ns1__getRemainingMinutes(soap, _p);
  }
  return _p;
}

inline struct __ns1__getRemainingMinutes *
soap_new_set___ns1__getRemainingMinutes(
    struct soap *soap, ns1__getRemainingMinutes *ns1__getRemainingMinutes_) {
  struct __ns1__getRemainingMinutes *_p =
      soap_instantiate___ns1__getRemainingMinutes(soap, -1, nullptr, nullptr,
                                                  nullptr);
  if (_p) {
    soap_default___ns1__getRemainingMinutes(soap, _p);
    _p->ns1__getRemainingMinutes_ = ns1__getRemainingMinutes_;
  }
  return _p;
}

inline void
soap_delete___ns1__getRemainingMinutes(struct soap *soap,
                                       struct __ns1__getRemainingMinutes *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getRemainingMinutes(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__logout
#define SOAP_TYPE_ICat4___ns1__logout (278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logout(struct soap *,
                                                      struct __ns1__logout *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__logout(struct soap *, const struct __ns1__logout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logout(struct soap *, const char *,
                                                 int,
                                                 const struct __ns1__logout *,
                                                 const char *);
SOAP_FMAC3 struct __ns1__logout *SOAP_FMAC4 soap_in___ns1__logout(
    struct soap *, const char *, struct __ns1__logout *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logout(struct soap *,
                                                 const struct __ns1__logout *,
                                                 const char *, const char *);

#ifndef soap_write___ns1__logout
#define soap_write___ns1__logout(soap, data)                                   \
  (ICat4::soap_serialize___ns1__logout(soap, data),                            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__logout(soap, data, "-ns1:logout", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__logout *SOAP_FMAC4 soap_get___ns1__logout(
    struct soap *, struct __ns1__logout *, const char *, const char *);

#ifndef soap_read___ns1__logout
#define soap_read___ns1__logout(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__logout(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__logout *SOAP_FMAC2 soap_instantiate___ns1__logout(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__logout *soap_new___ns1__logout(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate___ns1__logout(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__logout *soap_new_req___ns1__logout(struct soap *soap) {
  struct __ns1__logout *_p =
      soap_instantiate___ns1__logout(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__logout(soap, _p);
  }
  return _p;
}

inline struct __ns1__logout *
soap_new_set___ns1__logout(struct soap *soap, ns1__logout *ns1__logout_) {
  struct __ns1__logout *_p =
      soap_instantiate___ns1__logout(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__logout(soap, _p);
    _p->ns1__logout_ = ns1__logout_;
  }
  return _p;
}

inline void soap_delete___ns1__logout(struct soap *soap,
                                      struct __ns1__logout *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__logout(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4___ns1__logoutResponse
#define SOAP_TYPE_ICat4___ns1__logoutResponse (277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logoutResponse(
    struct soap *, struct __ns1__logoutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logoutResponse(
    struct soap *, const struct __ns1__logoutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logoutResponse(
    struct soap *, const char *, int, const struct __ns1__logoutResponse *,
    const char *);
SOAP_FMAC3 struct __ns1__logoutResponse *SOAP_FMAC4
soap_in___ns1__logoutResponse(struct soap *, const char *,
                              struct __ns1__logoutResponse *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logoutResponse(
    struct soap *, const struct __ns1__logoutResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__logoutResponse
#define soap_write___ns1__logoutResponse(soap, data)                           \
  (ICat4::soap_serialize___ns1__logoutResponse(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__logoutResponse(soap, data,                       \
                                             "-ns1:logoutResponse", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__logoutResponse *SOAP_FMAC4
soap_get___ns1__logoutResponse(struct soap *, struct __ns1__logoutResponse *,
                               const char *, const char *);

#ifndef soap_read___ns1__logoutResponse
#define soap_read___ns1__logoutResponse(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__logoutResponse(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__logoutResponse *SOAP_FMAC2
soap_instantiate___ns1__logoutResponse(struct soap *, int, const char *,
                                       const char *, size_t *);

inline struct __ns1__logoutResponse *
soap_new___ns1__logoutResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__logoutResponse(soap, n, nullptr, nullptr,
                                                nullptr);
}

inline struct __ns1__logoutResponse *
soap_new_req___ns1__logoutResponse(struct soap *soap) {
  struct __ns1__logoutResponse *_p = soap_instantiate___ns1__logoutResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__logoutResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__logoutResponse *
soap_new_set___ns1__logoutResponse(struct soap *soap,
                                   ns1__logoutResponse *ns1__logoutResponse_) {
  struct __ns1__logoutResponse *_p = soap_instantiate___ns1__logoutResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__logoutResponse(soap, _p);
    _p->ns1__logoutResponse_ = ns1__logoutResponse_;
  }
  return _p;
}

inline void soap_delete___ns1__logoutResponse(struct soap *soap,
                                              struct __ns1__logoutResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__logoutResponse(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4___ns1__dummy
#define SOAP_TYPE_ICat4___ns1__dummy (273)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__dummy(struct soap *,
                                                     struct __ns1__dummy *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__dummy(struct soap *, const struct __ns1__dummy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dummy(struct soap *, const char *,
                                                int,
                                                const struct __ns1__dummy *,
                                                const char *);
SOAP_FMAC3 struct __ns1__dummy *SOAP_FMAC4 soap_in___ns1__dummy(
    struct soap *, const char *, struct __ns1__dummy *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dummy(struct soap *,
                                                const struct __ns1__dummy *,
                                                const char *, const char *);

#ifndef soap_write___ns1__dummy
#define soap_write___ns1__dummy(soap, data)                                    \
  (ICat4::soap_serialize___ns1__dummy(soap, data),                             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__dummy(soap, data, "-ns1:dummy", NULL) ||         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__dummy *SOAP_FMAC4 soap_get___ns1__dummy(
    struct soap *, struct __ns1__dummy *, const char *, const char *);

#ifndef soap_read___ns1__dummy
#define soap_read___ns1__dummy(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__dummy(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__dummy *SOAP_FMAC2 soap_instantiate___ns1__dummy(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__dummy *soap_new___ns1__dummy(struct soap *soap,
                                                  int n = -1) {
  return soap_instantiate___ns1__dummy(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__dummy *soap_new_req___ns1__dummy(struct soap *soap) {
  struct __ns1__dummy *_p =
      soap_instantiate___ns1__dummy(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__dummy(soap, _p);
  }
  return _p;
}

inline struct __ns1__dummy *soap_new_set___ns1__dummy(struct soap *soap,
                                                      ns1__dummy *ns1__dummy_) {
  struct __ns1__dummy *_p =
      soap_instantiate___ns1__dummy(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__dummy(soap, _p);
    _p->ns1__dummy_ = ns1__dummy_;
  }
  return _p;
}

inline void soap_delete___ns1__dummy(struct soap *soap,
                                     struct __ns1__dummy *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__dummy(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef SOAP_TYPE_ICat4___ns1__dummyResponse
#define SOAP_TYPE_ICat4___ns1__dummyResponse (272)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__dummyResponse(struct soap *, struct __ns1__dummyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__dummyResponse(
    struct soap *, const struct __ns1__dummyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dummyResponse(
    struct soap *, const char *, int, const struct __ns1__dummyResponse *,
    const char *);
SOAP_FMAC3 struct __ns1__dummyResponse *SOAP_FMAC4 soap_in___ns1__dummyResponse(
    struct soap *, const char *, struct __ns1__dummyResponse *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dummyResponse(
    struct soap *, const struct __ns1__dummyResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__dummyResponse
#define soap_write___ns1__dummyResponse(soap, data)                            \
  (ICat4::soap_serialize___ns1__dummyResponse(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__dummyResponse(soap, data, "-ns1:dummyResponse",  \
                                            NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__dummyResponse *SOAP_FMAC4
soap_get___ns1__dummyResponse(struct soap *, struct __ns1__dummyResponse *,
                              const char *, const char *);

#ifndef soap_read___ns1__dummyResponse
#define soap_read___ns1__dummyResponse(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__dummyResponse(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__dummyResponse *SOAP_FMAC2
soap_instantiate___ns1__dummyResponse(struct soap *, int, const char *,
                                      const char *, size_t *);

inline struct __ns1__dummyResponse *
soap_new___ns1__dummyResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__dummyResponse(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline struct __ns1__dummyResponse *
soap_new_req___ns1__dummyResponse(struct soap *soap) {
  struct __ns1__dummyResponse *_p = soap_instantiate___ns1__dummyResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__dummyResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__dummyResponse *
soap_new_set___ns1__dummyResponse(struct soap *soap,
                                  ns1__dummyResponse *ns1__dummyResponse_) {
  struct __ns1__dummyResponse *_p = soap_instantiate___ns1__dummyResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__dummyResponse(soap, _p);
    _p->ns1__dummyResponse_ = ns1__dummyResponse_;
  }
  return _p;
}

inline void soap_delete___ns1__dummyResponse(struct soap *soap,
                                             struct __ns1__dummyResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__dummyResponse(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__refresh
#define SOAP_TYPE_ICat4___ns1__refresh (268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__refresh(struct soap *,
                                                       struct __ns1__refresh *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__refresh(struct soap *, const struct __ns1__refresh *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__refresh(struct soap *, const char *,
                                                  int,
                                                  const struct __ns1__refresh *,
                                                  const char *);
SOAP_FMAC3 struct __ns1__refresh *SOAP_FMAC4 soap_in___ns1__refresh(
    struct soap *, const char *, struct __ns1__refresh *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__refresh(struct soap *,
                                                  const struct __ns1__refresh *,
                                                  const char *, const char *);

#ifndef soap_write___ns1__refresh
#define soap_write___ns1__refresh(soap, data)                                  \
  (ICat4::soap_serialize___ns1__refresh(soap, data),                           \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__refresh(soap, data, "-ns1:refresh", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__refresh *SOAP_FMAC4 soap_get___ns1__refresh(
    struct soap *, struct __ns1__refresh *, const char *, const char *);

#ifndef soap_read___ns1__refresh
#define soap_read___ns1__refresh(soap, data)                                   \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__refresh(soap, data, NULL, NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__refresh *SOAP_FMAC2 soap_instantiate___ns1__refresh(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__refresh *soap_new___ns1__refresh(struct soap *soap,
                                                      int n = -1) {
  return soap_instantiate___ns1__refresh(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__refresh *soap_new_req___ns1__refresh(struct soap *soap) {
  struct __ns1__refresh *_p =
      soap_instantiate___ns1__refresh(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__refresh(soap, _p);
  }
  return _p;
}

inline struct __ns1__refresh *
soap_new_set___ns1__refresh(struct soap *soap, ns1__refresh *ns1__refresh_) {
  struct __ns1__refresh *_p =
      soap_instantiate___ns1__refresh(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__refresh(soap, _p);
    _p->ns1__refresh_ = ns1__refresh_;
  }
  return _p;
}

inline void soap_delete___ns1__refresh(struct soap *soap,
                                       struct __ns1__refresh *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__refresh(struct soap *, int, int,
                                                    void *, size_t,
                                                    const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__refreshResponse
#define SOAP_TYPE_ICat4___ns1__refreshResponse (267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__refreshResponse(
    struct soap *, struct __ns1__refreshResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__refreshResponse(
    struct soap *, const struct __ns1__refreshResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__refreshResponse(
    struct soap *, const char *, int, const struct __ns1__refreshResponse *,
    const char *);
SOAP_FMAC3 struct __ns1__refreshResponse *SOAP_FMAC4
soap_in___ns1__refreshResponse(struct soap *, const char *,
                               struct __ns1__refreshResponse *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__refreshResponse(
    struct soap *, const struct __ns1__refreshResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__refreshResponse
#define soap_write___ns1__refreshResponse(soap, data)                          \
  (ICat4::soap_serialize___ns1__refreshResponse(soap, data),                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__refreshResponse(soap, data,                      \
                                              "-ns1:refreshResponse", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__refreshResponse *SOAP_FMAC4
soap_get___ns1__refreshResponse(struct soap *, struct __ns1__refreshResponse *,
                                const char *, const char *);

#ifndef soap_read___ns1__refreshResponse
#define soap_read___ns1__refreshResponse(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__refreshResponse(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__refreshResponse *SOAP_FMAC2
soap_instantiate___ns1__refreshResponse(struct soap *, int, const char *,
                                        const char *, size_t *);

inline struct __ns1__refreshResponse *
soap_new___ns1__refreshResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__refreshResponse(soap, n, nullptr, nullptr,
                                                 nullptr);
}

inline struct __ns1__refreshResponse *
soap_new_req___ns1__refreshResponse(struct soap *soap) {
  struct __ns1__refreshResponse *_p = soap_instantiate___ns1__refreshResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__refreshResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__refreshResponse *soap_new_set___ns1__refreshResponse(
    struct soap *soap, ns1__refreshResponse *ns1__refreshResponse_) {
  struct __ns1__refreshResponse *_p = soap_instantiate___ns1__refreshResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__refreshResponse(soap, _p);
    _p->ns1__refreshResponse_ = ns1__refreshResponse_;
  }
  return _p;
}

inline void
soap_delete___ns1__refreshResponse(struct soap *soap,
                                   struct __ns1__refreshResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__refreshResponse(struct soap *, int,
                                                            int, void *, size_t,
                                                            const void *,
                                                            size_t);

#ifndef SOAP_TYPE_ICat4___ns1__getEntityNames
#define SOAP_TYPE_ICat4___ns1__getEntityNames (263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getEntityNames(
    struct soap *, struct __ns1__getEntityNames *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getEntityNames(
    struct soap *, const struct __ns1__getEntityNames *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getEntityNames(
    struct soap *, const char *, int, const struct __ns1__getEntityNames *,
    const char *);
SOAP_FMAC3 struct __ns1__getEntityNames *SOAP_FMAC4
soap_in___ns1__getEntityNames(struct soap *, const char *,
                              struct __ns1__getEntityNames *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getEntityNames(
    struct soap *, const struct __ns1__getEntityNames *, const char *,
    const char *);

#ifndef soap_write___ns1__getEntityNames
#define soap_write___ns1__getEntityNames(soap, data)                           \
  (ICat4::soap_serialize___ns1__getEntityNames(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__getEntityNames(soap, data,                       \
                                             "-ns1:getEntityNames", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__getEntityNames *SOAP_FMAC4
soap_get___ns1__getEntityNames(struct soap *, struct __ns1__getEntityNames *,
                               const char *, const char *);

#ifndef soap_read___ns1__getEntityNames
#define soap_read___ns1__getEntityNames(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__getEntityNames(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__getEntityNames *SOAP_FMAC2
soap_instantiate___ns1__getEntityNames(struct soap *, int, const char *,
                                       const char *, size_t *);

inline struct __ns1__getEntityNames *
soap_new___ns1__getEntityNames(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__getEntityNames(soap, n, nullptr, nullptr,
                                                nullptr);
}

inline struct __ns1__getEntityNames *
soap_new_req___ns1__getEntityNames(struct soap *soap) {
  struct __ns1__getEntityNames *_p = soap_instantiate___ns1__getEntityNames(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getEntityNames(soap, _p);
  }
  return _p;
}

inline struct __ns1__getEntityNames *
soap_new_set___ns1__getEntityNames(struct soap *soap,
                                   ns1__getEntityNames *ns1__getEntityNames_) {
  struct __ns1__getEntityNames *_p = soap_instantiate___ns1__getEntityNames(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getEntityNames(soap, _p);
    _p->ns1__getEntityNames_ = ns1__getEntityNames_;
  }
  return _p;
}

inline void soap_delete___ns1__getEntityNames(struct soap *soap,
                                              struct __ns1__getEntityNames *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getEntityNames(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4___ns1__getApiVersion
#define SOAP_TYPE_ICat4___ns1__getApiVersion (259)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__getApiVersion(struct soap *, struct __ns1__getApiVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getApiVersion(
    struct soap *, const struct __ns1__getApiVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getApiVersion(
    struct soap *, const char *, int, const struct __ns1__getApiVersion *,
    const char *);
SOAP_FMAC3 struct __ns1__getApiVersion *SOAP_FMAC4 soap_in___ns1__getApiVersion(
    struct soap *, const char *, struct __ns1__getApiVersion *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getApiVersion(
    struct soap *, const struct __ns1__getApiVersion *, const char *,
    const char *);

#ifndef soap_write___ns1__getApiVersion
#define soap_write___ns1__getApiVersion(soap, data)                            \
  (ICat4::soap_serialize___ns1__getApiVersion(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__getApiVersion(soap, data, "-ns1:getApiVersion",  \
                                            NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__getApiVersion *SOAP_FMAC4
soap_get___ns1__getApiVersion(struct soap *, struct __ns1__getApiVersion *,
                              const char *, const char *);

#ifndef soap_read___ns1__getApiVersion
#define soap_read___ns1__getApiVersion(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__getApiVersion(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__getApiVersion *SOAP_FMAC2
soap_instantiate___ns1__getApiVersion(struct soap *, int, const char *,
                                      const char *, size_t *);

inline struct __ns1__getApiVersion *
soap_new___ns1__getApiVersion(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__getApiVersion(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline struct __ns1__getApiVersion *
soap_new_req___ns1__getApiVersion(struct soap *soap) {
  struct __ns1__getApiVersion *_p = soap_instantiate___ns1__getApiVersion(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getApiVersion(soap, _p);
  }
  return _p;
}

inline struct __ns1__getApiVersion *
soap_new_set___ns1__getApiVersion(struct soap *soap,
                                  ns1__getApiVersion *ns1__getApiVersion_) {
  struct __ns1__getApiVersion *_p = soap_instantiate___ns1__getApiVersion(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getApiVersion(soap, _p);
    _p->ns1__getApiVersion_ = ns1__getApiVersion_;
  }
  return _p;
}

inline void soap_delete___ns1__getApiVersion(struct soap *soap,
                                             struct __ns1__getApiVersion *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getApiVersion(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__update
#define SOAP_TYPE_ICat4___ns1__update (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__update(struct soap *,
                                                      struct __ns1__update *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__update(struct soap *, const struct __ns1__update *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__update(struct soap *, const char *,
                                                 int,
                                                 const struct __ns1__update *,
                                                 const char *);
SOAP_FMAC3 struct __ns1__update *SOAP_FMAC4 soap_in___ns1__update(
    struct soap *, const char *, struct __ns1__update *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__update(struct soap *,
                                                 const struct __ns1__update *,
                                                 const char *, const char *);

#ifndef soap_write___ns1__update
#define soap_write___ns1__update(soap, data)                                   \
  (ICat4::soap_serialize___ns1__update(soap, data),                            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__update(soap, data, "-ns1:update", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__update *SOAP_FMAC4 soap_get___ns1__update(
    struct soap *, struct __ns1__update *, const char *, const char *);

#ifndef soap_read___ns1__update
#define soap_read___ns1__update(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__update(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__update *SOAP_FMAC2 soap_instantiate___ns1__update(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__update *soap_new___ns1__update(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate___ns1__update(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__update *soap_new_req___ns1__update(struct soap *soap) {
  struct __ns1__update *_p =
      soap_instantiate___ns1__update(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__update(soap, _p);
  }
  return _p;
}

inline struct __ns1__update *
soap_new_set___ns1__update(struct soap *soap, ns1__update *ns1__update_) {
  struct __ns1__update *_p =
      soap_instantiate___ns1__update(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__update(soap, _p);
    _p->ns1__update_ = ns1__update_;
  }
  return _p;
}

inline void soap_delete___ns1__update(struct soap *soap,
                                      struct __ns1__update *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__update(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4___ns1__updateResponse
#define SOAP_TYPE_ICat4___ns1__updateResponse (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateResponse(
    struct soap *, struct __ns1__updateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateResponse(
    struct soap *, const struct __ns1__updateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateResponse(
    struct soap *, const char *, int, const struct __ns1__updateResponse *,
    const char *);
SOAP_FMAC3 struct __ns1__updateResponse *SOAP_FMAC4
soap_in___ns1__updateResponse(struct soap *, const char *,
                              struct __ns1__updateResponse *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateResponse(
    struct soap *, const struct __ns1__updateResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__updateResponse
#define soap_write___ns1__updateResponse(soap, data)                           \
  (ICat4::soap_serialize___ns1__updateResponse(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__updateResponse(soap, data,                       \
                                             "-ns1:updateResponse", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__updateResponse *SOAP_FMAC4
soap_get___ns1__updateResponse(struct soap *, struct __ns1__updateResponse *,
                               const char *, const char *);

#ifndef soap_read___ns1__updateResponse
#define soap_read___ns1__updateResponse(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__updateResponse(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__updateResponse *SOAP_FMAC2
soap_instantiate___ns1__updateResponse(struct soap *, int, const char *,
                                       const char *, size_t *);

inline struct __ns1__updateResponse *
soap_new___ns1__updateResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__updateResponse(soap, n, nullptr, nullptr,
                                                nullptr);
}

inline struct __ns1__updateResponse *
soap_new_req___ns1__updateResponse(struct soap *soap) {
  struct __ns1__updateResponse *_p = soap_instantiate___ns1__updateResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__updateResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__updateResponse *
soap_new_set___ns1__updateResponse(struct soap *soap,
                                   ns1__updateResponse *ns1__updateResponse_) {
  struct __ns1__updateResponse *_p = soap_instantiate___ns1__updateResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__updateResponse(soap, _p);
    _p->ns1__updateResponse_ = ns1__updateResponse_;
  }
  return _p;
}

inline void soap_delete___ns1__updateResponse(struct soap *soap,
                                              struct __ns1__updateResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__updateResponse(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4___ns1__create
#define SOAP_TYPE_ICat4___ns1__create (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__create(struct soap *,
                                                      struct __ns1__create *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__create(struct soap *, const struct __ns1__create *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__create(struct soap *, const char *,
                                                 int,
                                                 const struct __ns1__create *,
                                                 const char *);
SOAP_FMAC3 struct __ns1__create *SOAP_FMAC4 soap_in___ns1__create(
    struct soap *, const char *, struct __ns1__create *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__create(struct soap *,
                                                 const struct __ns1__create *,
                                                 const char *, const char *);

#ifndef soap_write___ns1__create
#define soap_write___ns1__create(soap, data)                                   \
  (ICat4::soap_serialize___ns1__create(soap, data),                            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__create(soap, data, "-ns1:create", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__create *SOAP_FMAC4 soap_get___ns1__create(
    struct soap *, struct __ns1__create *, const char *, const char *);

#ifndef soap_read___ns1__create
#define soap_read___ns1__create(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__create(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__create *SOAP_FMAC2 soap_instantiate___ns1__create(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__create *soap_new___ns1__create(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate___ns1__create(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__create *soap_new_req___ns1__create(struct soap *soap) {
  struct __ns1__create *_p =
      soap_instantiate___ns1__create(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__create(soap, _p);
  }
  return _p;
}

inline struct __ns1__create *
soap_new_set___ns1__create(struct soap *soap, ns1__create *ns1__create_) {
  struct __ns1__create *_p =
      soap_instantiate___ns1__create(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__create(soap, _p);
    _p->ns1__create_ = ns1__create_;
  }
  return _p;
}

inline void soap_delete___ns1__create(struct soap *soap,
                                      struct __ns1__create *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__create(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4___ns1__search
#define SOAP_TYPE_ICat4___ns1__search (246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__search(struct soap *,
                                                      struct __ns1__search *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__search(struct soap *, const struct __ns1__search *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__search(struct soap *, const char *,
                                                 int,
                                                 const struct __ns1__search *,
                                                 const char *);
SOAP_FMAC3 struct __ns1__search *SOAP_FMAC4 soap_in___ns1__search(
    struct soap *, const char *, struct __ns1__search *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__search(struct soap *,
                                                 const struct __ns1__search *,
                                                 const char *, const char *);

#ifndef soap_write___ns1__search
#define soap_write___ns1__search(soap, data)                                   \
  (ICat4::soap_serialize___ns1__search(soap, data),                            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__search(soap, data, "-ns1:search", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__search *SOAP_FMAC4 soap_get___ns1__search(
    struct soap *, struct __ns1__search *, const char *, const char *);

#ifndef soap_read___ns1__search
#define soap_read___ns1__search(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__search(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__search *SOAP_FMAC2 soap_instantiate___ns1__search(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__search *soap_new___ns1__search(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate___ns1__search(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__search *soap_new_req___ns1__search(struct soap *soap) {
  struct __ns1__search *_p =
      soap_instantiate___ns1__search(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__search(soap, _p);
  }
  return _p;
}

inline struct __ns1__search *
soap_new_set___ns1__search(struct soap *soap, ns1__search *ns1__search_) {
  struct __ns1__search *_p =
      soap_instantiate___ns1__search(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__search(soap, _p);
    _p->ns1__search_ = ns1__search_;
  }
  return _p;
}

inline void soap_delete___ns1__search(struct soap *soap,
                                      struct __ns1__search *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__search(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4___ns1__delete
#define SOAP_TYPE_ICat4___ns1__delete (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__delete(struct soap *,
                                                      struct __ns1__delete *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__delete(struct soap *, const struct __ns1__delete *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__delete(struct soap *, const char *,
                                                 int,
                                                 const struct __ns1__delete *,
                                                 const char *);
SOAP_FMAC3 struct __ns1__delete *SOAP_FMAC4 soap_in___ns1__delete(
    struct soap *, const char *, struct __ns1__delete *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__delete(struct soap *,
                                                 const struct __ns1__delete *,
                                                 const char *, const char *);

#ifndef soap_write___ns1__delete
#define soap_write___ns1__delete(soap, data)                                   \
  (ICat4::soap_serialize___ns1__delete(soap, data),                            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__delete(soap, data, "-ns1:delete", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__delete *SOAP_FMAC4 soap_get___ns1__delete(
    struct soap *, struct __ns1__delete *, const char *, const char *);

#ifndef soap_read___ns1__delete
#define soap_read___ns1__delete(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__delete(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__delete *SOAP_FMAC2 soap_instantiate___ns1__delete(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__delete *soap_new___ns1__delete(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate___ns1__delete(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__delete *soap_new_req___ns1__delete(struct soap *soap) {
  struct __ns1__delete *_p =
      soap_instantiate___ns1__delete(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__delete(soap, _p);
  }
  return _p;
}

inline struct __ns1__delete *
soap_new_set___ns1__delete(struct soap *soap, ns1__delete *ns1__delete_) {
  struct __ns1__delete *_p =
      soap_instantiate___ns1__delete(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__delete(soap, _p);
    _p->ns1__delete_ = ns1__delete_;
  }
  return _p;
}

inline void soap_delete___ns1__delete(struct soap *soap,
                                      struct __ns1__delete *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__delete(struct soap *, int, int,
                                                   void *, size_t, const void *,
                                                   size_t);

#ifndef SOAP_TYPE_ICat4___ns1__deleteResponse
#define SOAP_TYPE_ICat4___ns1__deleteResponse (241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteResponse(
    struct soap *, struct __ns1__deleteResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteResponse(
    struct soap *, const struct __ns1__deleteResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteResponse(
    struct soap *, const char *, int, const struct __ns1__deleteResponse *,
    const char *);
SOAP_FMAC3 struct __ns1__deleteResponse *SOAP_FMAC4
soap_in___ns1__deleteResponse(struct soap *, const char *,
                              struct __ns1__deleteResponse *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteResponse(
    struct soap *, const struct __ns1__deleteResponse *, const char *,
    const char *);

#ifndef soap_write___ns1__deleteResponse
#define soap_write___ns1__deleteResponse(soap, data)                           \
  (ICat4::soap_serialize___ns1__deleteResponse(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__deleteResponse(soap, data,                       \
                                             "-ns1:deleteResponse", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__deleteResponse *SOAP_FMAC4
soap_get___ns1__deleteResponse(struct soap *, struct __ns1__deleteResponse *,
                               const char *, const char *);

#ifndef soap_read___ns1__deleteResponse
#define soap_read___ns1__deleteResponse(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__deleteResponse(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__deleteResponse *SOAP_FMAC2
soap_instantiate___ns1__deleteResponse(struct soap *, int, const char *,
                                       const char *, size_t *);

inline struct __ns1__deleteResponse *
soap_new___ns1__deleteResponse(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__deleteResponse(soap, n, nullptr, nullptr,
                                                nullptr);
}

inline struct __ns1__deleteResponse *
soap_new_req___ns1__deleteResponse(struct soap *soap) {
  struct __ns1__deleteResponse *_p = soap_instantiate___ns1__deleteResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__deleteResponse(soap, _p);
  }
  return _p;
}

inline struct __ns1__deleteResponse *
soap_new_set___ns1__deleteResponse(struct soap *soap,
                                   ns1__deleteResponse *ns1__deleteResponse_) {
  struct __ns1__deleteResponse *_p = soap_instantiate___ns1__deleteResponse(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__deleteResponse(soap, _p);
    _p->ns1__deleteResponse_ = ns1__deleteResponse_;
  }
  return _p;
}

inline void soap_delete___ns1__deleteResponse(struct soap *soap,
                                              struct __ns1__deleteResponse *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__deleteResponse(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4___ns1__getProperties
#define SOAP_TYPE_ICat4___ns1__getProperties (237)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__getProperties(struct soap *, struct __ns1__getProperties *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProperties(
    struct soap *, const struct __ns1__getProperties *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProperties(
    struct soap *, const char *, int, const struct __ns1__getProperties *,
    const char *);
SOAP_FMAC3 struct __ns1__getProperties *SOAP_FMAC4 soap_in___ns1__getProperties(
    struct soap *, const char *, struct __ns1__getProperties *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProperties(
    struct soap *, const struct __ns1__getProperties *, const char *,
    const char *);

#ifndef soap_write___ns1__getProperties
#define soap_write___ns1__getProperties(soap, data)                            \
  (ICat4::soap_serialize___ns1__getProperties(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__getProperties(soap, data, "-ns1:getProperties",  \
                                            NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__getProperties *SOAP_FMAC4
soap_get___ns1__getProperties(struct soap *, struct __ns1__getProperties *,
                              const char *, const char *);

#ifndef soap_read___ns1__getProperties
#define soap_read___ns1__getProperties(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__getProperties(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__getProperties *SOAP_FMAC2
soap_instantiate___ns1__getProperties(struct soap *, int, const char *,
                                      const char *, size_t *);

inline struct __ns1__getProperties *
soap_new___ns1__getProperties(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__getProperties(soap, n, nullptr, nullptr,
                                               nullptr);
}

inline struct __ns1__getProperties *
soap_new_req___ns1__getProperties(struct soap *soap) {
  struct __ns1__getProperties *_p = soap_instantiate___ns1__getProperties(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getProperties(soap, _p);
  }
  return _p;
}

inline struct __ns1__getProperties *
soap_new_set___ns1__getProperties(struct soap *soap,
                                  ns1__getProperties *ns1__getProperties_) {
  struct __ns1__getProperties *_p = soap_instantiate___ns1__getProperties(
      soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getProperties(soap, _p);
    _p->ns1__getProperties_ = ns1__getProperties_;
  }
  return _p;
}

inline void soap_delete___ns1__getProperties(struct soap *soap,
                                             struct __ns1__getProperties *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getProperties(struct soap *, int,
                                                          int, void *, size_t,
                                                          const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__get
#define SOAP_TYPE_ICat4___ns1__get (233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__get(struct soap *,
                                                   struct __ns1__get *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__get(struct soap *,
                                                     const struct __ns1__get *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__get(struct soap *, const char *, int,
                                              const struct __ns1__get *,
                                              const char *);
SOAP_FMAC3 struct __ns1__get *SOAP_FMAC4 soap_in___ns1__get(struct soap *,
                                                            const char *,
                                                            struct __ns1__get *,
                                                            const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__get(struct soap *,
                                              const struct __ns1__get *,
                                              const char *, const char *);

#ifndef soap_write___ns1__get
#define soap_write___ns1__get(soap, data)                                      \
  (ICat4::soap_serialize___ns1__get(soap, data),                               \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__get(soap, data, "-ns1:get", NULL) ||             \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__get *SOAP_FMAC4 soap_get___ns1__get(
    struct soap *, struct __ns1__get *, const char *, const char *);

#ifndef soap_read___ns1__get
#define soap_read___ns1__get(soap, data)                                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__get(soap, data, NULL, NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__get *SOAP_FMAC2 soap_instantiate___ns1__get(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__get *soap_new___ns1__get(struct soap *soap, int n = -1) {
  return soap_instantiate___ns1__get(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__get *soap_new_req___ns1__get(struct soap *soap) {
  struct __ns1__get *_p =
      soap_instantiate___ns1__get(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__get(soap, _p);
  }
  return _p;
}

inline struct __ns1__get *soap_new_set___ns1__get(struct soap *soap,
                                                  ns1__get *ns1__get_) {
  struct __ns1__get *_p =
      soap_instantiate___ns1__get(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__get(soap, _p);
    _p->ns1__get_ = ns1__get_;
  }
  return _p;
}

inline void soap_delete___ns1__get(struct soap *soap, struct __ns1__get *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__get(struct soap *, int, int, void *,
                                                size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__getUserName
#define SOAP_TYPE_ICat4___ns1__getUserName (229)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default___ns1__getUserName(struct soap *, struct __ns1__getUserName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getUserName(
    struct soap *, const struct __ns1__getUserName *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out___ns1__getUserName(struct soap *, const char *, int,
                            const struct __ns1__getUserName *, const char *);
SOAP_FMAC3 struct __ns1__getUserName *SOAP_FMAC4 soap_in___ns1__getUserName(
    struct soap *, const char *, struct __ns1__getUserName *, const char *);

SOAP_FMAC3 int SOAP_FMAC4
soap_put___ns1__getUserName(struct soap *, const struct __ns1__getUserName *,
                            const char *, const char *);

#ifndef soap_write___ns1__getUserName
#define soap_write___ns1__getUserName(soap, data)                              \
  (ICat4::soap_serialize___ns1__getUserName(soap, data),                       \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__getUserName(soap, data, "-ns1:getUserName",      \
                                          NULL) ||                             \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__getUserName *SOAP_FMAC4 soap_get___ns1__getUserName(
    struct soap *, struct __ns1__getUserName *, const char *, const char *);

#ifndef soap_read___ns1__getUserName
#define soap_read___ns1__getUserName(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__getUserName(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__getUserName *SOAP_FMAC2
soap_instantiate___ns1__getUserName(struct soap *, int, const char *,
                                    const char *, size_t *);

inline struct __ns1__getUserName *soap_new___ns1__getUserName(struct soap *soap,
                                                              int n = -1) {
  return soap_instantiate___ns1__getUserName(soap, n, nullptr, nullptr,
                                             nullptr);
}

inline struct __ns1__getUserName *
soap_new_req___ns1__getUserName(struct soap *soap) {
  struct __ns1__getUserName *_p =
      soap_instantiate___ns1__getUserName(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getUserName(soap, _p);
  }
  return _p;
}

inline struct __ns1__getUserName *
soap_new_set___ns1__getUserName(struct soap *soap,
                                ns1__getUserName *ns1__getUserName_) {
  struct __ns1__getUserName *_p =
      soap_instantiate___ns1__getUserName(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__getUserName(soap, _p);
    _p->ns1__getUserName_ = ns1__getUserName_;
  }
  return _p;
}

inline void soap_delete___ns1__getUserName(struct soap *soap,
                                           struct __ns1__getUserName *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getUserName(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4___ns1__login
#define SOAP_TYPE_ICat4___ns1__login (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__login(struct soap *,
                                                     struct __ns1__login *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize___ns1__login(struct soap *, const struct __ns1__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__login(struct soap *, const char *,
                                                int,
                                                const struct __ns1__login *,
                                                const char *);
SOAP_FMAC3 struct __ns1__login *SOAP_FMAC4 soap_in___ns1__login(
    struct soap *, const char *, struct __ns1__login *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__login(struct soap *,
                                                const struct __ns1__login *,
                                                const char *, const char *);

#ifndef soap_write___ns1__login
#define soap_write___ns1__login(soap, data)                                    \
  (ICat4::soap_serialize___ns1__login(soap, data),                             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put___ns1__login(soap, data, "-ns1:login", NULL) ||         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct __ns1__login *SOAP_FMAC4 soap_get___ns1__login(
    struct soap *, struct __ns1__login *, const char *, const char *);

#ifndef soap_read___ns1__login
#define soap_read___ns1__login(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get___ns1__login(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct __ns1__login *SOAP_FMAC2 soap_instantiate___ns1__login(
    struct soap *, int, const char *, const char *, size_t *);

inline struct __ns1__login *soap_new___ns1__login(struct soap *soap,
                                                  int n = -1) {
  return soap_instantiate___ns1__login(soap, n, nullptr, nullptr, nullptr);
}

inline struct __ns1__login *soap_new_req___ns1__login(struct soap *soap) {
  struct __ns1__login *_p =
      soap_instantiate___ns1__login(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__login(soap, _p);
  }
  return _p;
}

inline struct __ns1__login *soap_new_set___ns1__login(struct soap *soap,
                                                      ns1__login *ns1__login_) {
  struct __ns1__login *_p =
      soap_instantiate___ns1__login(soap, -1, nullptr, nullptr, nullptr);
  if (_p) {
    soap_default___ns1__login(soap, _p);
    _p->ns1__login_ = ns1__login_;
  }
  return _p;
}

inline void soap_delete___ns1__login(struct soap *soap,
                                     struct __ns1__login *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__login(struct soap *, int, int,
                                                  void *, size_t, const void *,
                                                  size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_SOAP_ENV__Detail
#define SOAP_TYPE_ICat4_SOAP_ENV__Detail (218)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_SOAP_ENV__Detail(struct soap *, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_SOAP_ENV__Detail(struct soap *, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_SOAP_ENV__Detail(struct soap *, const char *, int,
                          const struct SOAP_ENV__Detail *, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail *SOAP_FMAC4 soap_in_SOAP_ENV__Detail(
    struct soap *, const char *, struct SOAP_ENV__Detail *, const char *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(
    struct soap *, const struct SOAP_ENV__Detail *, const char *, const char *);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data)                                \
  (ICat4::soap_serialize_SOAP_ENV__Detail(soap, data),                         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail",         \
                                        NULL) ||                               \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail *SOAP_FMAC4 soap_get_SOAP_ENV__Detail(
    struct soap *, struct SOAP_ENV__Detail *, const char *, const char *);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data)                                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail *SOAP_FMAC2
soap_instantiate_SOAP_ENV__Detail(struct soap *, int, const char *,
                                  const char *, size_t *);

inline struct SOAP_ENV__Detail *soap_new_SOAP_ENV__Detail(struct soap *soap,
                                                          int n = -1) {
  return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail *
soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) {
  struct SOAP_ENV__Detail *_p =
      soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Detail(soap, _p);
    _p->__type = __type;
    _p->fault = fault;
  }
  return _p;
}

inline struct SOAP_ENV__Detail *
soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any,
                              ns1__IcatException *ns1__IcatException_,
                              int __type, void *fault) {
  struct SOAP_ENV__Detail *_p =
      soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL);
  if (_p) {
    soap_default_SOAP_ENV__Detail(soap, _p);
    _p->__any = __any;
    _p->ns1__IcatException_ = ns1__IcatException_;
    _p->__type = __type;
    _p->fault = fault;
  }
  return _p;
}

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap,
                                         struct SOAP_ENV__Detail *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_ICat4_PointerToSOAP_ENV__Reason (333)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(
    struct soap *, struct SOAP_ENV__Reason *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(
    struct soap *, const char *, int, struct SOAP_ENV__Reason *const *,
    const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason **SOAP_FMAC4
soap_in_PointerToSOAP_ENV__Reason(struct soap *, const char *,
                                  struct SOAP_ENV__Reason **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(
    struct soap *, struct SOAP_ENV__Reason *const *, const char *,
    const char *);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data)                       \
  (ICat4::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerToSOAP_ENV__Reason(soap, data,                   \
                                                 "SOAP-ENV:Reason", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason **SOAP_FMAC4
soap_get_PointerToSOAP_ENV__Reason(struct soap *, struct SOAP_ENV__Reason **,
                                   const char *, const char *);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_ICat4_PointerToSOAP_ENV__Detail (332)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(
    struct soap *, struct SOAP_ENV__Detail *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(
    struct soap *, const char *, int, struct SOAP_ENV__Detail *const *,
    const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail **SOAP_FMAC4
soap_in_PointerToSOAP_ENV__Detail(struct soap *, const char *,
                                  struct SOAP_ENV__Detail **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(
    struct soap *, struct SOAP_ENV__Detail *const *, const char *,
    const char *);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data)                       \
  (ICat4::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerToSOAP_ENV__Detail(soap, data,                   \
                                                 "SOAP-ENV:Detail", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail **SOAP_FMAC4
soap_get_PointerToSOAP_ENV__Detail(struct soap *, struct SOAP_ENV__Detail **,
                                   const char *, const char *);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICat4_PointerToSOAP_ENV__Code
#define SOAP_TYPE_ICat4_PointerToSOAP_ENV__Code (329)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(
    struct soap *, struct SOAP_ENV__Code *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerToSOAP_ENV__Code(struct soap *, const char *, int,
                                 struct SOAP_ENV__Code *const *, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code **SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(
    struct soap *, const char *, struct SOAP_ENV__Code **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(
    struct soap *, struct SOAP_ENV__Code *const *, const char *, const char *);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data)                         \
  (ICat4::soap_serialize_PointerToSOAP_ENV__Code(soap, data),                  \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code",    \
                                               NULL) ||                        \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 struct SOAP_ENV__Code **SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(
    struct soap *, struct SOAP_ENV__Code **, const char *, const char *);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getEntityInfoResponse
#define SOAP_TYPE_ICat4_PointerTons1__getEntityInfoResponse (324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getEntityInfoResponse(
    struct soap *, ns1__getEntityInfoResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getEntityInfoResponse(
    struct soap *, const char *, int, ns1__getEntityInfoResponse *const *,
    const char *);
SOAP_FMAC3 ns1__getEntityInfoResponse **SOAP_FMAC4
soap_in_PointerTons1__getEntityInfoResponse(struct soap *, const char *,
                                            ns1__getEntityInfoResponse **,
                                            const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getEntityInfoResponse(
    struct soap *, ns1__getEntityInfoResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__getEntityInfoResponse
#define soap_write_PointerTons1__getEntityInfoResponse(soap, data)             \
  (ICat4::soap_serialize_PointerTons1__getEntityInfoResponse(soap, data),      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getEntityInfoResponse(                    \
           soap, data, "ns1:getEntityInfoResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityInfoResponse **SOAP_FMAC4
soap_get_PointerTons1__getEntityInfoResponse(struct soap *,
                                             ns1__getEntityInfoResponse **,
                                             const char *, const char *);

#ifndef soap_read_PointerTons1__getEntityInfoResponse
#define soap_read_PointerTons1__getEntityInfoResponse(soap, data)              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getEntityInfoResponse(soap, data, NULL,  \
                                                            NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getEntityInfo
#define SOAP_TYPE_ICat4_PointerTons1__getEntityInfo (323)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getEntityInfo(
    struct soap *, ns1__getEntityInfo *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__getEntityInfo(struct soap *, const char *, int,
                                     ns1__getEntityInfo *const *, const char *);
SOAP_FMAC3 ns1__getEntityInfo **SOAP_FMAC4 soap_in_PointerTons1__getEntityInfo(
    struct soap *, const char *, ns1__getEntityInfo **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getEntityInfo(
    struct soap *, ns1__getEntityInfo *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__getEntityInfo
#define soap_write_PointerTons1__getEntityInfo(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__getEntityInfo(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getEntityInfo(                            \
           soap, data, "ns1:getEntityInfo", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityInfo **SOAP_FMAC4 soap_get_PointerTons1__getEntityInfo(
    struct soap *, ns1__getEntityInfo **, const char *, const char *);

#ifndef soap_read_PointerTons1__getEntityInfo
#define soap_read_PointerTons1__getEntityInfo(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getEntityInfo(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__deleteManyResponse
#define SOAP_TYPE_ICat4_PointerTons1__deleteManyResponse (319)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteManyResponse(
    struct soap *, ns1__deleteManyResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteManyResponse(
    struct soap *, const char *, int, ns1__deleteManyResponse *const *,
    const char *);
SOAP_FMAC3 ns1__deleteManyResponse **SOAP_FMAC4
soap_in_PointerTons1__deleteManyResponse(struct soap *, const char *,
                                         ns1__deleteManyResponse **,
                                         const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteManyResponse(
    struct soap *, ns1__deleteManyResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__deleteManyResponse
#define soap_write_PointerTons1__deleteManyResponse(soap, data)                \
  (ICat4::soap_serialize_PointerTons1__deleteManyResponse(soap, data),         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__deleteManyResponse(                       \
           soap, data, "ns1:deleteManyResponse", NULL) ||                      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__deleteManyResponse **SOAP_FMAC4
soap_get_PointerTons1__deleteManyResponse(struct soap *,
                                          ns1__deleteManyResponse **,
                                          const char *, const char *);

#ifndef soap_read_PointerTons1__deleteManyResponse
#define soap_read_PointerTons1__deleteManyResponse(soap, data)                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__deleteManyResponse(soap, data, NULL,     \
                                                         NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__deleteMany
#define SOAP_TYPE_ICat4_PointerTons1__deleteMany (318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteMany(
    struct soap *, ns1__deleteMany *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteMany(
    struct soap *, const char *, int, ns1__deleteMany *const *, const char *);
SOAP_FMAC3 ns1__deleteMany **SOAP_FMAC4 soap_in_PointerTons1__deleteMany(
    struct soap *, const char *, ns1__deleteMany **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteMany(
    struct soap *, ns1__deleteMany *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__deleteMany
#define soap_write_PointerTons1__deleteMany(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__deleteMany(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__deleteMany(soap, data, "ns1:deleteMany",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__deleteMany **SOAP_FMAC4 soap_get_PointerTons1__deleteMany(
    struct soap *, ns1__deleteMany **, const char *, const char *);

#ifndef soap_read_PointerTons1__deleteMany
#define soap_read_PointerTons1__deleteMany(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__deleteMany(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__createManyResponse
#define SOAP_TYPE_ICat4_PointerTons1__createManyResponse (315)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__createManyResponse(
    struct soap *, ns1__createManyResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__createManyResponse(
    struct soap *, const char *, int, ns1__createManyResponse *const *,
    const char *);
SOAP_FMAC3 ns1__createManyResponse **SOAP_FMAC4
soap_in_PointerTons1__createManyResponse(struct soap *, const char *,
                                         ns1__createManyResponse **,
                                         const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__createManyResponse(
    struct soap *, ns1__createManyResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__createManyResponse
#define soap_write_PointerTons1__createManyResponse(soap, data)                \
  (ICat4::soap_serialize_PointerTons1__createManyResponse(soap, data),         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__createManyResponse(                       \
           soap, data, "ns1:createManyResponse", NULL) ||                      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__createManyResponse **SOAP_FMAC4
soap_get_PointerTons1__createManyResponse(struct soap *,
                                          ns1__createManyResponse **,
                                          const char *, const char *);

#ifndef soap_read_PointerTons1__createManyResponse
#define soap_read_PointerTons1__createManyResponse(soap, data)                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__createManyResponse(soap, data, NULL,     \
                                                         NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__createMany
#define SOAP_TYPE_ICat4_PointerTons1__createMany (314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__createMany(
    struct soap *, ns1__createMany *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__createMany(
    struct soap *, const char *, int, ns1__createMany *const *, const char *);
SOAP_FMAC3 ns1__createMany **SOAP_FMAC4 soap_in_PointerTons1__createMany(
    struct soap *, const char *, ns1__createMany **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__createMany(
    struct soap *, ns1__createMany *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__createMany
#define soap_write_PointerTons1__createMany(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__createMany(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__createMany(soap, data, "ns1:createMany",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__createMany **SOAP_FMAC4 soap_get_PointerTons1__createMany(
    struct soap *, ns1__createMany **, const char *, const char *);

#ifndef soap_read_PointerTons1__createMany
#define soap_read_PointerTons1__createMany(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__createMany(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneGetPopulatingResponse
#define SOAP_TYPE_ICat4_PointerTons1__luceneGetPopulatingResponse (311)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__luceneGetPopulatingResponse(
    struct soap *, ns1__luceneGetPopulatingResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneGetPopulatingResponse(
    struct soap *, const char *, int, ns1__luceneGetPopulatingResponse *const *,
    const char *);
SOAP_FMAC3 ns1__luceneGetPopulatingResponse **SOAP_FMAC4
soap_in_PointerTons1__luceneGetPopulatingResponse(
    struct soap *, const char *, ns1__luceneGetPopulatingResponse **,
    const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneGetPopulatingResponse(
    struct soap *, ns1__luceneGetPopulatingResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__luceneGetPopulatingResponse
#define soap_write_PointerTons1__luceneGetPopulatingResponse(soap, data)       \
  (ICat4::soap_serialize_PointerTons1__luceneGetPopulatingResponse(soap,       \
                                                                   data),      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneGetPopulatingResponse(              \
           soap, data, "ns1:luceneGetPopulatingResponse", NULL) ||             \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneGetPopulatingResponse **SOAP_FMAC4
soap_get_PointerTons1__luceneGetPopulatingResponse(
    struct soap *, ns1__luceneGetPopulatingResponse **, const char *,
    const char *);

#ifndef soap_read_PointerTons1__luceneGetPopulatingResponse
#define soap_read_PointerTons1__luceneGetPopulatingResponse(soap, data)        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneGetPopulatingResponse(             \
           soap, data, NULL, NULL) ||                                          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneGetPopulating
#define SOAP_TYPE_ICat4_PointerTons1__luceneGetPopulating (310)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__luceneGetPopulating(
    struct soap *, ns1__luceneGetPopulating *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneGetPopulating(
    struct soap *, const char *, int, ns1__luceneGetPopulating *const *,
    const char *);
SOAP_FMAC3 ns1__luceneGetPopulating **SOAP_FMAC4
soap_in_PointerTons1__luceneGetPopulating(struct soap *, const char *,
                                          ns1__luceneGetPopulating **,
                                          const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneGetPopulating(
    struct soap *, ns1__luceneGetPopulating *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__luceneGetPopulating
#define soap_write_PointerTons1__luceneGetPopulating(soap, data)               \
  (ICat4::soap_serialize_PointerTons1__luceneGetPopulating(soap, data),        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneGetPopulating(                      \
           soap, data, "ns1:luceneGetPopulating", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneGetPopulating **SOAP_FMAC4
soap_get_PointerTons1__luceneGetPopulating(struct soap *,
                                           ns1__luceneGetPopulating **,
                                           const char *, const char *);

#ifndef soap_read_PointerTons1__luceneGetPopulating
#define soap_read_PointerTons1__luceneGetPopulating(soap, data)                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneGetPopulating(soap, data, NULL,    \
                                                          NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneSearchResponse
#define SOAP_TYPE_ICat4_PointerTons1__luceneSearchResponse (307)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__luceneSearchResponse(
    struct soap *, ns1__luceneSearchResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneSearchResponse(
    struct soap *, const char *, int, ns1__luceneSearchResponse *const *,
    const char *);
SOAP_FMAC3 ns1__luceneSearchResponse **SOAP_FMAC4
soap_in_PointerTons1__luceneSearchResponse(struct soap *, const char *,
                                           ns1__luceneSearchResponse **,
                                           const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneSearchResponse(
    struct soap *, ns1__luceneSearchResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__luceneSearchResponse
#define soap_write_PointerTons1__luceneSearchResponse(soap, data)              \
  (ICat4::soap_serialize_PointerTons1__luceneSearchResponse(soap, data),       \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneSearchResponse(                     \
           soap, data, "ns1:luceneSearchResponse", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneSearchResponse **SOAP_FMAC4
soap_get_PointerTons1__luceneSearchResponse(struct soap *,
                                            ns1__luceneSearchResponse **,
                                            const char *, const char *);

#ifndef soap_read_PointerTons1__luceneSearchResponse
#define soap_read_PointerTons1__luceneSearchResponse(soap, data)               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneSearchResponse(soap, data, NULL,   \
                                                           NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneSearch
#define SOAP_TYPE_ICat4_PointerTons1__luceneSearch (306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__luceneSearch(
    struct soap *, ns1__luceneSearch *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneSearch(
    struct soap *, const char *, int, ns1__luceneSearch *const *, const char *);
SOAP_FMAC3 ns1__luceneSearch **SOAP_FMAC4 soap_in_PointerTons1__luceneSearch(
    struct soap *, const char *, ns1__luceneSearch **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneSearch(
    struct soap *, ns1__luceneSearch *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__luceneSearch
#define soap_write_PointerTons1__luceneSearch(soap, data)                      \
  (ICat4::soap_serialize_PointerTons1__luceneSearch(soap, data),               \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneSearch(soap, data,                  \
                                                  "ns1:luceneSearch", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneSearch **SOAP_FMAC4 soap_get_PointerTons1__luceneSearch(
    struct soap *, ns1__luceneSearch **, const char *, const char *);

#ifndef soap_read_PointerTons1__luceneSearch
#define soap_read_PointerTons1__luceneSearch(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneSearch(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneCommitResponse
#define SOAP_TYPE_ICat4_PointerTons1__luceneCommitResponse (302)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__luceneCommitResponse(
    struct soap *, ns1__luceneCommitResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneCommitResponse(
    struct soap *, const char *, int, ns1__luceneCommitResponse *const *,
    const char *);
SOAP_FMAC3 ns1__luceneCommitResponse **SOAP_FMAC4
soap_in_PointerTons1__luceneCommitResponse(struct soap *, const char *,
                                           ns1__luceneCommitResponse **,
                                           const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneCommitResponse(
    struct soap *, ns1__luceneCommitResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__luceneCommitResponse
#define soap_write_PointerTons1__luceneCommitResponse(soap, data)              \
  (ICat4::soap_serialize_PointerTons1__luceneCommitResponse(soap, data),       \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneCommitResponse(                     \
           soap, data, "ns1:luceneCommitResponse", NULL) ||                    \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneCommitResponse **SOAP_FMAC4
soap_get_PointerTons1__luceneCommitResponse(struct soap *,
                                            ns1__luceneCommitResponse **,
                                            const char *, const char *);

#ifndef soap_read_PointerTons1__luceneCommitResponse
#define soap_read_PointerTons1__luceneCommitResponse(soap, data)               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneCommitResponse(soap, data, NULL,   \
                                                           NULL) ||            \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneCommit
#define SOAP_TYPE_ICat4_PointerTons1__luceneCommit (301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__luceneCommit(
    struct soap *, ns1__luceneCommit *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneCommit(
    struct soap *, const char *, int, ns1__luceneCommit *const *, const char *);
SOAP_FMAC3 ns1__luceneCommit **SOAP_FMAC4 soap_in_PointerTons1__luceneCommit(
    struct soap *, const char *, ns1__luceneCommit **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneCommit(
    struct soap *, ns1__luceneCommit *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__luceneCommit
#define soap_write_PointerTons1__luceneCommit(soap, data)                      \
  (ICat4::soap_serialize_PointerTons1__luceneCommit(soap, data),               \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneCommit(soap, data,                  \
                                                  "ns1:luceneCommit", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneCommit **SOAP_FMAC4 soap_get_PointerTons1__luceneCommit(
    struct soap *, ns1__luceneCommit **, const char *, const char *);

#ifndef soap_read_PointerTons1__luceneCommit
#define soap_read_PointerTons1__luceneCommit(soap, data)                       \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneCommit(soap, data, NULL, NULL) ||  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneClearResponse
#define SOAP_TYPE_ICat4_PointerTons1__luceneClearResponse (297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__luceneClearResponse(
    struct soap *, ns1__luceneClearResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneClearResponse(
    struct soap *, const char *, int, ns1__luceneClearResponse *const *,
    const char *);
SOAP_FMAC3 ns1__luceneClearResponse **SOAP_FMAC4
soap_in_PointerTons1__luceneClearResponse(struct soap *, const char *,
                                          ns1__luceneClearResponse **,
                                          const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneClearResponse(
    struct soap *, ns1__luceneClearResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__luceneClearResponse
#define soap_write_PointerTons1__luceneClearResponse(soap, data)               \
  (ICat4::soap_serialize_PointerTons1__luceneClearResponse(soap, data),        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneClearResponse(                      \
           soap, data, "ns1:luceneClearResponse", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneClearResponse **SOAP_FMAC4
soap_get_PointerTons1__luceneClearResponse(struct soap *,
                                           ns1__luceneClearResponse **,
                                           const char *, const char *);

#ifndef soap_read_PointerTons1__luceneClearResponse
#define soap_read_PointerTons1__luceneClearResponse(soap, data)                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneClearResponse(soap, data, NULL,    \
                                                          NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__luceneClear
#define SOAP_TYPE_ICat4_PointerTons1__luceneClear (296)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__luceneClear(
    struct soap *, ns1__luceneClear *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__luceneClear(
    struct soap *, const char *, int, ns1__luceneClear *const *, const char *);
SOAP_FMAC3 ns1__luceneClear **SOAP_FMAC4 soap_in_PointerTons1__luceneClear(
    struct soap *, const char *, ns1__luceneClear **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__luceneClear(
    struct soap *, ns1__luceneClear *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__luceneClear
#define soap_write_PointerTons1__luceneClear(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__luceneClear(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__luceneClear(soap, data,                   \
                                                 "ns1:luceneClear", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__luceneClear **SOAP_FMAC4 soap_get_PointerTons1__luceneClear(
    struct soap *, ns1__luceneClear **, const char *, const char *);

#ifndef soap_read_PointerTons1__luceneClear
#define soap_read_PointerTons1__luceneClear(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__luceneClear(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__lucenePopulateResponse
#define SOAP_TYPE_ICat4_PointerTons1__lucenePopulateResponse (292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__lucenePopulateResponse(
    struct soap *, ns1__lucenePopulateResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__lucenePopulateResponse(
    struct soap *, const char *, int, ns1__lucenePopulateResponse *const *,
    const char *);
SOAP_FMAC3 ns1__lucenePopulateResponse **SOAP_FMAC4
soap_in_PointerTons1__lucenePopulateResponse(struct soap *, const char *,
                                             ns1__lucenePopulateResponse **,
                                             const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__lucenePopulateResponse(
    struct soap *, ns1__lucenePopulateResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__lucenePopulateResponse
#define soap_write_PointerTons1__lucenePopulateResponse(soap, data)            \
  (ICat4::soap_serialize_PointerTons1__lucenePopulateResponse(soap, data),     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__lucenePopulateResponse(                   \
           soap, data, "ns1:lucenePopulateResponse", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__lucenePopulateResponse **SOAP_FMAC4
soap_get_PointerTons1__lucenePopulateResponse(struct soap *,
                                              ns1__lucenePopulateResponse **,
                                              const char *, const char *);

#ifndef soap_read_PointerTons1__lucenePopulateResponse
#define soap_read_PointerTons1__lucenePopulateResponse(soap, data)             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__lucenePopulateResponse(soap, data, NULL, \
                                                             NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__lucenePopulate
#define SOAP_TYPE_ICat4_PointerTons1__lucenePopulate (291)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__lucenePopulate(
    struct soap *, ns1__lucenePopulate *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__lucenePopulate(
    struct soap *, const char *, int, ns1__lucenePopulate *const *,
    const char *);
SOAP_FMAC3 ns1__lucenePopulate **SOAP_FMAC4
soap_in_PointerTons1__lucenePopulate(struct soap *, const char *,
                                     ns1__lucenePopulate **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__lucenePopulate(
    struct soap *, ns1__lucenePopulate *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__lucenePopulate
#define soap_write_PointerTons1__lucenePopulate(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__lucenePopulate(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__lucenePopulate(                           \
           soap, data, "ns1:lucenePopulate", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__lucenePopulate **SOAP_FMAC4
soap_get_PointerTons1__lucenePopulate(struct soap *, ns1__lucenePopulate **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__lucenePopulate
#define soap_read_PointerTons1__lucenePopulate(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__lucenePopulate(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__isAccessAllowedResponse
#define SOAP_TYPE_ICat4_PointerTons1__isAccessAllowedResponse (288)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__isAccessAllowedResponse(
    struct soap *, ns1__isAccessAllowedResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__isAccessAllowedResponse(
    struct soap *, const char *, int, ns1__isAccessAllowedResponse *const *,
    const char *);
SOAP_FMAC3 ns1__isAccessAllowedResponse **SOAP_FMAC4
soap_in_PointerTons1__isAccessAllowedResponse(struct soap *, const char *,
                                              ns1__isAccessAllowedResponse **,
                                              const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__isAccessAllowedResponse(
    struct soap *, ns1__isAccessAllowedResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__isAccessAllowedResponse
#define soap_write_PointerTons1__isAccessAllowedResponse(soap, data)           \
  (ICat4::soap_serialize_PointerTons1__isAccessAllowedResponse(soap, data),    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__isAccessAllowedResponse(                  \
           soap, data, "ns1:isAccessAllowedResponse", NULL) ||                 \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__isAccessAllowedResponse **SOAP_FMAC4
soap_get_PointerTons1__isAccessAllowedResponse(struct soap *,
                                               ns1__isAccessAllowedResponse **,
                                               const char *, const char *);

#ifndef soap_read_PointerTons1__isAccessAllowedResponse
#define soap_read_PointerTons1__isAccessAllowedResponse(soap, data)            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__isAccessAllowedResponse(soap, data,      \
                                                              NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__isAccessAllowed
#define SOAP_TYPE_ICat4_PointerTons1__isAccessAllowed (287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__isAccessAllowed(
    struct soap *, ns1__isAccessAllowed *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__isAccessAllowed(
    struct soap *, const char *, int, ns1__isAccessAllowed *const *,
    const char *);
SOAP_FMAC3 ns1__isAccessAllowed **SOAP_FMAC4
soap_in_PointerTons1__isAccessAllowed(struct soap *, const char *,
                                      ns1__isAccessAllowed **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__isAccessAllowed(
    struct soap *, ns1__isAccessAllowed *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__isAccessAllowed
#define soap_write_PointerTons1__isAccessAllowed(soap, data)                   \
  (ICat4::soap_serialize_PointerTons1__isAccessAllowed(soap, data),            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__isAccessAllowed(                          \
           soap, data, "ns1:isAccessAllowed", NULL) ||                         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__isAccessAllowed **SOAP_FMAC4
soap_get_PointerTons1__isAccessAllowed(struct soap *, ns1__isAccessAllowed **,
                                       const char *, const char *);

#ifndef soap_read_PointerTons1__isAccessAllowed
#define soap_read_PointerTons1__isAccessAllowed(soap, data)                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__isAccessAllowed(soap, data, NULL,        \
                                                      NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__searchTextResponse
#define SOAP_TYPE_ICat4_PointerTons1__searchTextResponse (284)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__searchTextResponse(
    struct soap *, ns1__searchTextResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__searchTextResponse(
    struct soap *, const char *, int, ns1__searchTextResponse *const *,
    const char *);
SOAP_FMAC3 ns1__searchTextResponse **SOAP_FMAC4
soap_in_PointerTons1__searchTextResponse(struct soap *, const char *,
                                         ns1__searchTextResponse **,
                                         const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__searchTextResponse(
    struct soap *, ns1__searchTextResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__searchTextResponse
#define soap_write_PointerTons1__searchTextResponse(soap, data)                \
  (ICat4::soap_serialize_PointerTons1__searchTextResponse(soap, data),         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__searchTextResponse(                       \
           soap, data, "ns1:searchTextResponse", NULL) ||                      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__searchTextResponse **SOAP_FMAC4
soap_get_PointerTons1__searchTextResponse(struct soap *,
                                          ns1__searchTextResponse **,
                                          const char *, const char *);

#ifndef soap_read_PointerTons1__searchTextResponse
#define soap_read_PointerTons1__searchTextResponse(soap, data)                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__searchTextResponse(soap, data, NULL,     \
                                                         NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__searchText
#define SOAP_TYPE_ICat4_PointerTons1__searchText (283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__searchText(
    struct soap *, ns1__searchText *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__searchText(
    struct soap *, const char *, int, ns1__searchText *const *, const char *);
SOAP_FMAC3 ns1__searchText **SOAP_FMAC4 soap_in_PointerTons1__searchText(
    struct soap *, const char *, ns1__searchText **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__searchText(
    struct soap *, ns1__searchText *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__searchText
#define soap_write_PointerTons1__searchText(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__searchText(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__searchText(soap, data, "ns1:searchText",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__searchText **SOAP_FMAC4 soap_get_PointerTons1__searchText(
    struct soap *, ns1__searchText **, const char *, const char *);

#ifndef soap_read_PointerTons1__searchText
#define soap_read_PointerTons1__searchText(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__searchText(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getRemainingMinutesResponse
#define SOAP_TYPE_ICat4_PointerTons1__getRemainingMinutesResponse (280)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__getRemainingMinutesResponse(
    struct soap *, ns1__getRemainingMinutesResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getRemainingMinutesResponse(
    struct soap *, const char *, int, ns1__getRemainingMinutesResponse *const *,
    const char *);
SOAP_FMAC3 ns1__getRemainingMinutesResponse **SOAP_FMAC4
soap_in_PointerTons1__getRemainingMinutesResponse(
    struct soap *, const char *, ns1__getRemainingMinutesResponse **,
    const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getRemainingMinutesResponse(
    struct soap *, ns1__getRemainingMinutesResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__getRemainingMinutesResponse
#define soap_write_PointerTons1__getRemainingMinutesResponse(soap, data)       \
  (ICat4::soap_serialize_PointerTons1__getRemainingMinutesResponse(soap,       \
                                                                   data),      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getRemainingMinutesResponse(              \
           soap, data, "ns1:getRemainingMinutesResponse", NULL) ||             \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getRemainingMinutesResponse **SOAP_FMAC4
soap_get_PointerTons1__getRemainingMinutesResponse(
    struct soap *, ns1__getRemainingMinutesResponse **, const char *,
    const char *);

#ifndef soap_read_PointerTons1__getRemainingMinutesResponse
#define soap_read_PointerTons1__getRemainingMinutesResponse(soap, data)        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getRemainingMinutesResponse(             \
           soap, data, NULL, NULL) ||                                          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getRemainingMinutes
#define SOAP_TYPE_ICat4_PointerTons1__getRemainingMinutes (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getRemainingMinutes(
    struct soap *, ns1__getRemainingMinutes *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getRemainingMinutes(
    struct soap *, const char *, int, ns1__getRemainingMinutes *const *,
    const char *);
SOAP_FMAC3 ns1__getRemainingMinutes **SOAP_FMAC4
soap_in_PointerTons1__getRemainingMinutes(struct soap *, const char *,
                                          ns1__getRemainingMinutes **,
                                          const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getRemainingMinutes(
    struct soap *, ns1__getRemainingMinutes *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__getRemainingMinutes
#define soap_write_PointerTons1__getRemainingMinutes(soap, data)               \
  (ICat4::soap_serialize_PointerTons1__getRemainingMinutes(soap, data),        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getRemainingMinutes(                      \
           soap, data, "ns1:getRemainingMinutes", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getRemainingMinutes **SOAP_FMAC4
soap_get_PointerTons1__getRemainingMinutes(struct soap *,
                                           ns1__getRemainingMinutes **,
                                           const char *, const char *);

#ifndef soap_read_PointerTons1__getRemainingMinutes
#define soap_read_PointerTons1__getRemainingMinutes(soap, data)                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getRemainingMinutes(soap, data, NULL,    \
                                                          NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__logoutResponse
#define SOAP_TYPE_ICat4_PointerTons1__logoutResponse (275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__logoutResponse(
    struct soap *, ns1__logoutResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__logoutResponse(
    struct soap *, const char *, int, ns1__logoutResponse *const *,
    const char *);
SOAP_FMAC3 ns1__logoutResponse **SOAP_FMAC4
soap_in_PointerTons1__logoutResponse(struct soap *, const char *,
                                     ns1__logoutResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__logoutResponse(
    struct soap *, ns1__logoutResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__logoutResponse
#define soap_write_PointerTons1__logoutResponse(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__logoutResponse(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__logoutResponse(                           \
           soap, data, "ns1:logoutResponse", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__logoutResponse **SOAP_FMAC4
soap_get_PointerTons1__logoutResponse(struct soap *, ns1__logoutResponse **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__logoutResponse
#define soap_read_PointerTons1__logoutResponse(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__logoutResponse(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__logout
#define SOAP_TYPE_ICat4_PointerTons1__logout (274)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__logout(struct soap *, ns1__logout *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__logout(struct soap *,
                                                        const char *, int,
                                                        ns1__logout *const *,
                                                        const char *);
SOAP_FMAC3 ns1__logout **SOAP_FMAC4 soap_in_PointerTons1__logout(struct soap *,
                                                                 const char *,
                                                                 ns1__logout **,
                                                                 const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__logout(struct soap *,
                                                        ns1__logout *const *,
                                                        const char *,
                                                        const char *);

#ifndef soap_write_PointerTons1__logout
#define soap_write_PointerTons1__logout(soap, data)                            \
  (ICat4::soap_serialize_PointerTons1__logout(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__logout(soap, data, "ns1:logout", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__logout **SOAP_FMAC4 soap_get_PointerTons1__logout(
    struct soap *, ns1__logout **, const char *, const char *);

#ifndef soap_read_PointerTons1__logout
#define soap_read_PointerTons1__logout(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__logout(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__dummyResponse
#define SOAP_TYPE_ICat4_PointerTons1__dummyResponse (270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dummyResponse(
    struct soap *, ns1__dummyResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__dummyResponse(struct soap *, const char *, int,
                                     ns1__dummyResponse *const *, const char *);
SOAP_FMAC3 ns1__dummyResponse **SOAP_FMAC4 soap_in_PointerTons1__dummyResponse(
    struct soap *, const char *, ns1__dummyResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dummyResponse(
    struct soap *, ns1__dummyResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__dummyResponse
#define soap_write_PointerTons1__dummyResponse(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__dummyResponse(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__dummyResponse(                            \
           soap, data, "ns1:dummyResponse", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dummyResponse **SOAP_FMAC4 soap_get_PointerTons1__dummyResponse(
    struct soap *, ns1__dummyResponse **, const char *, const char *);

#ifndef soap_read_PointerTons1__dummyResponse
#define soap_read_PointerTons1__dummyResponse(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__dummyResponse(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__dummy
#define SOAP_TYPE_ICat4_PointerTons1__dummy (269)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__dummy(struct soap *, ns1__dummy *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dummy(struct soap *,
                                                       const char *, int,
                                                       ns1__dummy *const *,
                                                       const char *);
SOAP_FMAC3 ns1__dummy **SOAP_FMAC4 soap_in_PointerTons1__dummy(struct soap *,
                                                               const char *,
                                                               ns1__dummy **,
                                                               const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dummy(struct soap *,
                                                       ns1__dummy *const *,
                                                       const char *,
                                                       const char *);

#ifndef soap_write_PointerTons1__dummy
#define soap_write_PointerTons1__dummy(soap, data)                             \
  (ICat4::soap_serialize_PointerTons1__dummy(soap, data),                      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__dummy(soap, data, "ns1:dummy", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dummy **SOAP_FMAC4 soap_get_PointerTons1__dummy(struct soap *,
                                                                ns1__dummy **,
                                                                const char *,
                                                                const char *);

#ifndef soap_read_PointerTons1__dummy
#define soap_read_PointerTons1__dummy(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__dummy(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__refreshResponse
#define SOAP_TYPE_ICat4_PointerTons1__refreshResponse (265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__refreshResponse(
    struct soap *, ns1__refreshResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__refreshResponse(
    struct soap *, const char *, int, ns1__refreshResponse *const *,
    const char *);
SOAP_FMAC3 ns1__refreshResponse **SOAP_FMAC4
soap_in_PointerTons1__refreshResponse(struct soap *, const char *,
                                      ns1__refreshResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__refreshResponse(
    struct soap *, ns1__refreshResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__refreshResponse
#define soap_write_PointerTons1__refreshResponse(soap, data)                   \
  (ICat4::soap_serialize_PointerTons1__refreshResponse(soap, data),            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__refreshResponse(                          \
           soap, data, "ns1:refreshResponse", NULL) ||                         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__refreshResponse **SOAP_FMAC4
soap_get_PointerTons1__refreshResponse(struct soap *, ns1__refreshResponse **,
                                       const char *, const char *);

#ifndef soap_read_PointerTons1__refreshResponse
#define soap_read_PointerTons1__refreshResponse(soap, data)                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__refreshResponse(soap, data, NULL,        \
                                                      NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__refresh
#define SOAP_TYPE_ICat4_PointerTons1__refresh (264)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__refresh(struct soap *, ns1__refresh *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__refresh(struct soap *,
                                                         const char *, int,
                                                         ns1__refresh *const *,
                                                         const char *);
SOAP_FMAC3 ns1__refresh **SOAP_FMAC4 soap_in_PointerTons1__refresh(
    struct soap *, const char *, ns1__refresh **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__refresh(struct soap *,
                                                         ns1__refresh *const *,
                                                         const char *,
                                                         const char *);

#ifndef soap_write_PointerTons1__refresh
#define soap_write_PointerTons1__refresh(soap, data)                           \
  (ICat4::soap_serialize_PointerTons1__refresh(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__refresh(soap, data, "ns1:refresh",        \
                                             NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__refresh **SOAP_FMAC4 soap_get_PointerTons1__refresh(
    struct soap *, ns1__refresh **, const char *, const char *);

#ifndef soap_read_PointerTons1__refresh
#define soap_read_PointerTons1__refresh(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__refresh(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getEntityNamesResponse
#define SOAP_TYPE_ICat4_PointerTons1__getEntityNamesResponse (261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getEntityNamesResponse(
    struct soap *, ns1__getEntityNamesResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getEntityNamesResponse(
    struct soap *, const char *, int, ns1__getEntityNamesResponse *const *,
    const char *);
SOAP_FMAC3 ns1__getEntityNamesResponse **SOAP_FMAC4
soap_in_PointerTons1__getEntityNamesResponse(struct soap *, const char *,
                                             ns1__getEntityNamesResponse **,
                                             const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getEntityNamesResponse(
    struct soap *, ns1__getEntityNamesResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__getEntityNamesResponse
#define soap_write_PointerTons1__getEntityNamesResponse(soap, data)            \
  (ICat4::soap_serialize_PointerTons1__getEntityNamesResponse(soap, data),     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getEntityNamesResponse(                   \
           soap, data, "ns1:getEntityNamesResponse", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityNamesResponse **SOAP_FMAC4
soap_get_PointerTons1__getEntityNamesResponse(struct soap *,
                                              ns1__getEntityNamesResponse **,
                                              const char *, const char *);

#ifndef soap_read_PointerTons1__getEntityNamesResponse
#define soap_read_PointerTons1__getEntityNamesResponse(soap, data)             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getEntityNamesResponse(soap, data, NULL, \
                                                             NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getEntityNames
#define SOAP_TYPE_ICat4_PointerTons1__getEntityNames (260)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getEntityNames(
    struct soap *, ns1__getEntityNames *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getEntityNames(
    struct soap *, const char *, int, ns1__getEntityNames *const *,
    const char *);
SOAP_FMAC3 ns1__getEntityNames **SOAP_FMAC4
soap_in_PointerTons1__getEntityNames(struct soap *, const char *,
                                     ns1__getEntityNames **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getEntityNames(
    struct soap *, ns1__getEntityNames *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__getEntityNames
#define soap_write_PointerTons1__getEntityNames(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__getEntityNames(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getEntityNames(                           \
           soap, data, "ns1:getEntityNames", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getEntityNames **SOAP_FMAC4
soap_get_PointerTons1__getEntityNames(struct soap *, ns1__getEntityNames **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__getEntityNames
#define soap_read_PointerTons1__getEntityNames(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getEntityNames(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getApiVersionResponse
#define SOAP_TYPE_ICat4_PointerTons1__getApiVersionResponse (257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getApiVersionResponse(
    struct soap *, ns1__getApiVersionResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getApiVersionResponse(
    struct soap *, const char *, int, ns1__getApiVersionResponse *const *,
    const char *);
SOAP_FMAC3 ns1__getApiVersionResponse **SOAP_FMAC4
soap_in_PointerTons1__getApiVersionResponse(struct soap *, const char *,
                                            ns1__getApiVersionResponse **,
                                            const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getApiVersionResponse(
    struct soap *, ns1__getApiVersionResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__getApiVersionResponse
#define soap_write_PointerTons1__getApiVersionResponse(soap, data)             \
  (ICat4::soap_serialize_PointerTons1__getApiVersionResponse(soap, data),      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getApiVersionResponse(                    \
           soap, data, "ns1:getApiVersionResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getApiVersionResponse **SOAP_FMAC4
soap_get_PointerTons1__getApiVersionResponse(struct soap *,
                                             ns1__getApiVersionResponse **,
                                             const char *, const char *);

#ifndef soap_read_PointerTons1__getApiVersionResponse
#define soap_read_PointerTons1__getApiVersionResponse(soap, data)              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getApiVersionResponse(soap, data, NULL,  \
                                                            NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getApiVersion
#define SOAP_TYPE_ICat4_PointerTons1__getApiVersion (256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getApiVersion(
    struct soap *, ns1__getApiVersion *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__getApiVersion(struct soap *, const char *, int,
                                     ns1__getApiVersion *const *, const char *);
SOAP_FMAC3 ns1__getApiVersion **SOAP_FMAC4 soap_in_PointerTons1__getApiVersion(
    struct soap *, const char *, ns1__getApiVersion **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getApiVersion(
    struct soap *, ns1__getApiVersion *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__getApiVersion
#define soap_write_PointerTons1__getApiVersion(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__getApiVersion(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getApiVersion(                            \
           soap, data, "ns1:getApiVersion", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getApiVersion **SOAP_FMAC4 soap_get_PointerTons1__getApiVersion(
    struct soap *, ns1__getApiVersion **, const char *, const char *);

#ifndef soap_read_PointerTons1__getApiVersion
#define soap_read_PointerTons1__getApiVersion(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getApiVersion(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__updateResponse
#define SOAP_TYPE_ICat4_PointerTons1__updateResponse (252)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__updateResponse(
    struct soap *, ns1__updateResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__updateResponse(
    struct soap *, const char *, int, ns1__updateResponse *const *,
    const char *);
SOAP_FMAC3 ns1__updateResponse **SOAP_FMAC4
soap_in_PointerTons1__updateResponse(struct soap *, const char *,
                                     ns1__updateResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__updateResponse(
    struct soap *, ns1__updateResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__updateResponse
#define soap_write_PointerTons1__updateResponse(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__updateResponse(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__updateResponse(                           \
           soap, data, "ns1:updateResponse", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__updateResponse **SOAP_FMAC4
soap_get_PointerTons1__updateResponse(struct soap *, ns1__updateResponse **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__updateResponse
#define soap_read_PointerTons1__updateResponse(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__updateResponse(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__update
#define SOAP_TYPE_ICat4_PointerTons1__update (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__update(struct soap *, ns1__update *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__update(struct soap *,
                                                        const char *, int,
                                                        ns1__update *const *,
                                                        const char *);
SOAP_FMAC3 ns1__update **SOAP_FMAC4 soap_in_PointerTons1__update(struct soap *,
                                                                 const char *,
                                                                 ns1__update **,
                                                                 const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__update(struct soap *,
                                                        ns1__update *const *,
                                                        const char *,
                                                        const char *);

#ifndef soap_write_PointerTons1__update
#define soap_write_PointerTons1__update(soap, data)                            \
  (ICat4::soap_serialize_PointerTons1__update(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__update(soap, data, "ns1:update", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__update **SOAP_FMAC4 soap_get_PointerTons1__update(
    struct soap *, ns1__update **, const char *, const char *);

#ifndef soap_read_PointerTons1__update
#define soap_read_PointerTons1__update(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__update(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__createResponse
#define SOAP_TYPE_ICat4_PointerTons1__createResponse (248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__createResponse(
    struct soap *, ns1__createResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__createResponse(
    struct soap *, const char *, int, ns1__createResponse *const *,
    const char *);
SOAP_FMAC3 ns1__createResponse **SOAP_FMAC4
soap_in_PointerTons1__createResponse(struct soap *, const char *,
                                     ns1__createResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__createResponse(
    struct soap *, ns1__createResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__createResponse
#define soap_write_PointerTons1__createResponse(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__createResponse(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__createResponse(                           \
           soap, data, "ns1:createResponse", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__createResponse **SOAP_FMAC4
soap_get_PointerTons1__createResponse(struct soap *, ns1__createResponse **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__createResponse
#define soap_read_PointerTons1__createResponse(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__createResponse(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__create
#define SOAP_TYPE_ICat4_PointerTons1__create (247)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__create(struct soap *, ns1__create *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__create(struct soap *,
                                                        const char *, int,
                                                        ns1__create *const *,
                                                        const char *);
SOAP_FMAC3 ns1__create **SOAP_FMAC4 soap_in_PointerTons1__create(struct soap *,
                                                                 const char *,
                                                                 ns1__create **,
                                                                 const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__create(struct soap *,
                                                        ns1__create *const *,
                                                        const char *,
                                                        const char *);

#ifndef soap_write_PointerTons1__create
#define soap_write_PointerTons1__create(soap, data)                            \
  (ICat4::soap_serialize_PointerTons1__create(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__create(soap, data, "ns1:create", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__create **SOAP_FMAC4 soap_get_PointerTons1__create(
    struct soap *, ns1__create **, const char *, const char *);

#ifndef soap_read_PointerTons1__create
#define soap_read_PointerTons1__create(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__create(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__searchResponse
#define SOAP_TYPE_ICat4_PointerTons1__searchResponse (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__searchResponse(
    struct soap *, ns1__searchResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__searchResponse(
    struct soap *, const char *, int, ns1__searchResponse *const *,
    const char *);
SOAP_FMAC3 ns1__searchResponse **SOAP_FMAC4
soap_in_PointerTons1__searchResponse(struct soap *, const char *,
                                     ns1__searchResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__searchResponse(
    struct soap *, ns1__searchResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__searchResponse
#define soap_write_PointerTons1__searchResponse(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__searchResponse(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__searchResponse(                           \
           soap, data, "ns1:searchResponse", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__searchResponse **SOAP_FMAC4
soap_get_PointerTons1__searchResponse(struct soap *, ns1__searchResponse **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__searchResponse
#define soap_read_PointerTons1__searchResponse(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__searchResponse(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__search
#define SOAP_TYPE_ICat4_PointerTons1__search (243)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__search(struct soap *, ns1__search *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__search(struct soap *,
                                                        const char *, int,
                                                        ns1__search *const *,
                                                        const char *);
SOAP_FMAC3 ns1__search **SOAP_FMAC4 soap_in_PointerTons1__search(struct soap *,
                                                                 const char *,
                                                                 ns1__search **,
                                                                 const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__search(struct soap *,
                                                        ns1__search *const *,
                                                        const char *,
                                                        const char *);

#ifndef soap_write_PointerTons1__search
#define soap_write_PointerTons1__search(soap, data)                            \
  (ICat4::soap_serialize_PointerTons1__search(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__search(soap, data, "ns1:search", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__search **SOAP_FMAC4 soap_get_PointerTons1__search(
    struct soap *, ns1__search **, const char *, const char *);

#ifndef soap_read_PointerTons1__search
#define soap_read_PointerTons1__search(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__search(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__deleteResponse
#define SOAP_TYPE_ICat4_PointerTons1__deleteResponse (239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deleteResponse(
    struct soap *, ns1__deleteResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deleteResponse(
    struct soap *, const char *, int, ns1__deleteResponse *const *,
    const char *);
SOAP_FMAC3 ns1__deleteResponse **SOAP_FMAC4
soap_in_PointerTons1__deleteResponse(struct soap *, const char *,
                                     ns1__deleteResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deleteResponse(
    struct soap *, ns1__deleteResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__deleteResponse
#define soap_write_PointerTons1__deleteResponse(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__deleteResponse(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__deleteResponse(                           \
           soap, data, "ns1:deleteResponse", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__deleteResponse **SOAP_FMAC4
soap_get_PointerTons1__deleteResponse(struct soap *, ns1__deleteResponse **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__deleteResponse
#define soap_read_PointerTons1__deleteResponse(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__deleteResponse(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__delete
#define SOAP_TYPE_ICat4_PointerTons1__delete (238)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__delete(struct soap *, ns1__delete *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__delete(struct soap *,
                                                        const char *, int,
                                                        ns1__delete *const *,
                                                        const char *);
SOAP_FMAC3 ns1__delete **SOAP_FMAC4 soap_in_PointerTons1__delete(struct soap *,
                                                                 const char *,
                                                                 ns1__delete **,
                                                                 const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__delete(struct soap *,
                                                        ns1__delete *const *,
                                                        const char *,
                                                        const char *);

#ifndef soap_write_PointerTons1__delete
#define soap_write_PointerTons1__delete(soap, data)                            \
  (ICat4::soap_serialize_PointerTons1__delete(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__delete(soap, data, "ns1:delete", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__delete **SOAP_FMAC4 soap_get_PointerTons1__delete(
    struct soap *, ns1__delete **, const char *, const char *);

#ifndef soap_read_PointerTons1__delete
#define soap_read_PointerTons1__delete(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__delete(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getPropertiesResponse
#define SOAP_TYPE_ICat4_PointerTons1__getPropertiesResponse (235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getPropertiesResponse(
    struct soap *, ns1__getPropertiesResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getPropertiesResponse(
    struct soap *, const char *, int, ns1__getPropertiesResponse *const *,
    const char *);
SOAP_FMAC3 ns1__getPropertiesResponse **SOAP_FMAC4
soap_in_PointerTons1__getPropertiesResponse(struct soap *, const char *,
                                            ns1__getPropertiesResponse **,
                                            const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getPropertiesResponse(
    struct soap *, ns1__getPropertiesResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__getPropertiesResponse
#define soap_write_PointerTons1__getPropertiesResponse(soap, data)             \
  (ICat4::soap_serialize_PointerTons1__getPropertiesResponse(soap, data),      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getPropertiesResponse(                    \
           soap, data, "ns1:getPropertiesResponse", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getPropertiesResponse **SOAP_FMAC4
soap_get_PointerTons1__getPropertiesResponse(struct soap *,
                                             ns1__getPropertiesResponse **,
                                             const char *, const char *);

#ifndef soap_read_PointerTons1__getPropertiesResponse
#define soap_read_PointerTons1__getPropertiesResponse(soap, data)              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getPropertiesResponse(soap, data, NULL,  \
                                                            NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getProperties
#define SOAP_TYPE_ICat4_PointerTons1__getProperties (234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getProperties(
    struct soap *, ns1__getProperties *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__getProperties(struct soap *, const char *, int,
                                     ns1__getProperties *const *, const char *);
SOAP_FMAC3 ns1__getProperties **SOAP_FMAC4 soap_in_PointerTons1__getProperties(
    struct soap *, const char *, ns1__getProperties **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getProperties(
    struct soap *, ns1__getProperties *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__getProperties
#define soap_write_PointerTons1__getProperties(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__getProperties(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getProperties(                            \
           soap, data, "ns1:getProperties", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getProperties **SOAP_FMAC4 soap_get_PointerTons1__getProperties(
    struct soap *, ns1__getProperties **, const char *, const char *);

#ifndef soap_read_PointerTons1__getProperties
#define soap_read_PointerTons1__getProperties(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getProperties(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getResponse
#define SOAP_TYPE_ICat4_PointerTons1__getResponse (231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getResponse(
    struct soap *, ns1__getResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getResponse(
    struct soap *, const char *, int, ns1__getResponse *const *, const char *);
SOAP_FMAC3 ns1__getResponse **SOAP_FMAC4 soap_in_PointerTons1__getResponse(
    struct soap *, const char *, ns1__getResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getResponse(
    struct soap *, ns1__getResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__getResponse
#define soap_write_PointerTons1__getResponse(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__getResponse(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getResponse(soap, data,                   \
                                                 "ns1:getResponse", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getResponse **SOAP_FMAC4 soap_get_PointerTons1__getResponse(
    struct soap *, ns1__getResponse **, const char *, const char *);

#ifndef soap_read_PointerTons1__getResponse
#define soap_read_PointerTons1__getResponse(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getResponse(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__get
#define SOAP_TYPE_ICat4_PointerTons1__get (230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__get(struct soap *,
                                                            ns1__get *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__get(struct soap *,
                                                     const char *, int,
                                                     ns1__get *const *,
                                                     const char *);
SOAP_FMAC3 ns1__get **SOAP_FMAC4 soap_in_PointerTons1__get(struct soap *,
                                                           const char *,
                                                           ns1__get **,
                                                           const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__get(struct soap *,
                                                     ns1__get *const *,
                                                     const char *,
                                                     const char *);

#ifndef soap_write_PointerTons1__get
#define soap_write_PointerTons1__get(soap, data)                               \
  (ICat4::soap_serialize_PointerTons1__get(soap, data),                        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__get(soap, data, "ns1:get", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__get **SOAP_FMAC4 soap_get_PointerTons1__get(struct soap *,
                                                            ns1__get **,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_PointerTons1__get
#define soap_read_PointerTons1__get(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__get(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getUserNameResponse
#define SOAP_TYPE_ICat4_PointerTons1__getUserNameResponse (227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getUserNameResponse(
    struct soap *, ns1__getUserNameResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getUserNameResponse(
    struct soap *, const char *, int, ns1__getUserNameResponse *const *,
    const char *);
SOAP_FMAC3 ns1__getUserNameResponse **SOAP_FMAC4
soap_in_PointerTons1__getUserNameResponse(struct soap *, const char *,
                                          ns1__getUserNameResponse **,
                                          const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getUserNameResponse(
    struct soap *, ns1__getUserNameResponse *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__getUserNameResponse
#define soap_write_PointerTons1__getUserNameResponse(soap, data)               \
  (ICat4::soap_serialize_PointerTons1__getUserNameResponse(soap, data),        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getUserNameResponse(                      \
           soap, data, "ns1:getUserNameResponse", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getUserNameResponse **SOAP_FMAC4
soap_get_PointerTons1__getUserNameResponse(struct soap *,
                                           ns1__getUserNameResponse **,
                                           const char *, const char *);

#ifndef soap_read_PointerTons1__getUserNameResponse
#define soap_read_PointerTons1__getUserNameResponse(soap, data)                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getUserNameResponse(soap, data, NULL,    \
                                                          NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__getUserName
#define SOAP_TYPE_ICat4_PointerTons1__getUserName (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getUserName(
    struct soap *, ns1__getUserName *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getUserName(
    struct soap *, const char *, int, ns1__getUserName *const *, const char *);
SOAP_FMAC3 ns1__getUserName **SOAP_FMAC4 soap_in_PointerTons1__getUserName(
    struct soap *, const char *, ns1__getUserName **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getUserName(
    struct soap *, ns1__getUserName *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__getUserName
#define soap_write_PointerTons1__getUserName(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__getUserName(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__getUserName(soap, data,                   \
                                                 "ns1:getUserName", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__getUserName **SOAP_FMAC4 soap_get_PointerTons1__getUserName(
    struct soap *, ns1__getUserName **, const char *, const char *);

#ifndef soap_read_PointerTons1__getUserName
#define soap_read_PointerTons1__getUserName(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__getUserName(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__loginResponse
#define SOAP_TYPE_ICat4_PointerTons1__loginResponse (223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__loginResponse(
    struct soap *, ns1__loginResponse *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__loginResponse(struct soap *, const char *, int,
                                     ns1__loginResponse *const *, const char *);
SOAP_FMAC3 ns1__loginResponse **SOAP_FMAC4 soap_in_PointerTons1__loginResponse(
    struct soap *, const char *, ns1__loginResponse **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__loginResponse(
    struct soap *, ns1__loginResponse *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__loginResponse
#define soap_write_PointerTons1__loginResponse(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__loginResponse(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__loginResponse(                            \
           soap, data, "ns1:loginResponse", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__loginResponse **SOAP_FMAC4 soap_get_PointerTons1__loginResponse(
    struct soap *, ns1__loginResponse **, const char *, const char *);

#ifndef soap_read_PointerTons1__loginResponse
#define soap_read_PointerTons1__loginResponse(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__loginResponse(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__login
#define SOAP_TYPE_ICat4_PointerTons1__login (222)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__login(struct soap *, ns1__login *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__login(struct soap *,
                                                       const char *, int,
                                                       ns1__login *const *,
                                                       const char *);
SOAP_FMAC3 ns1__login **SOAP_FMAC4 soap_in_PointerTons1__login(struct soap *,
                                                               const char *,
                                                               ns1__login **,
                                                               const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__login(struct soap *,
                                                       ns1__login *const *,
                                                       const char *,
                                                       const char *);

#ifndef soap_write_PointerTons1__login
#define soap_write_PointerTons1__login(soap, data)                             \
  (ICat4::soap_serialize_PointerTons1__login(soap, data),                      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__login(soap, data, "ns1:login", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__login **SOAP_FMAC4 soap_get_PointerTons1__login(struct soap *,
                                                                ns1__login **,
                                                                const char *,
                                                                const char *);

#ifndef soap_read_PointerTons1__login
#define soap_read_PointerTons1__login(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__login(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__IcatException
#define SOAP_TYPE_ICat4_PointerTons1__IcatException (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__IcatException(
    struct soap *, ns1__IcatException *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__IcatException(struct soap *, const char *, int,
                                     ns1__IcatException *const *, const char *);
SOAP_FMAC3 ns1__IcatException **SOAP_FMAC4 soap_in_PointerTons1__IcatException(
    struct soap *, const char *, ns1__IcatException **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__IcatException(
    struct soap *, ns1__IcatException *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__IcatException
#define soap_write_PointerTons1__IcatException(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__IcatException(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__IcatException(                            \
           soap, data, "ns1:IcatException", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__IcatException **SOAP_FMAC4 soap_get_PointerTons1__IcatException(
    struct soap *, ns1__IcatException **, const char *, const char *);

#ifndef soap_read_PointerTons1__IcatException
#define soap_read_PointerTons1__IcatException(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__IcatException(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__parameterValueType
#define SOAP_TYPE_ICat4_PointerTons1__parameterValueType (217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__parameterValueType(
    struct soap *, enum ns1__parameterValueType *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__parameterValueType(
    struct soap *, const char *, int, enum ns1__parameterValueType *const *,
    const char *);
SOAP_FMAC3 enum ns1__parameterValueType **SOAP_FMAC4
soap_in_PointerTons1__parameterValueType(struct soap *, const char *,
                                         enum ns1__parameterValueType **,
                                         const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__parameterValueType(
    struct soap *, enum ns1__parameterValueType *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__parameterValueType
#define soap_write_PointerTons1__parameterValueType(soap, data)                \
  (ICat4::soap_serialize_PointerTons1__parameterValueType(soap, data),         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__parameterValueType(                       \
           soap, data, "ns1:parameterValueType", NULL) ||                      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__parameterValueType **SOAP_FMAC4
soap_get_PointerTons1__parameterValueType(struct soap *,
                                          enum ns1__parameterValueType **,
                                          const char *, const char *);

#ifndef soap_read_PointerTons1__parameterValueType
#define soap_read_PointerTons1__parameterValueType(soap, data)                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__parameterValueType(soap, data, NULL,     \
                                                         NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__permissibleStringValue
#define SOAP_TYPE_ICat4_PointerTons1__permissibleStringValue (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__permissibleStringValue(
    struct soap *, ns1__permissibleStringValue *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__permissibleStringValue(
    struct soap *, const char *, int, ns1__permissibleStringValue *const *,
    const char *);
SOAP_FMAC3 ns1__permissibleStringValue **SOAP_FMAC4
soap_in_PointerTons1__permissibleStringValue(struct soap *, const char *,
                                             ns1__permissibleStringValue **,
                                             const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__permissibleStringValue(
    struct soap *, ns1__permissibleStringValue *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__permissibleStringValue
#define soap_write_PointerTons1__permissibleStringValue(soap, data)            \
  (ICat4::soap_serialize_PointerTons1__permissibleStringValue(soap, data),     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__permissibleStringValue(                   \
           soap, data, "ns1:permissibleStringValue", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__permissibleStringValue **SOAP_FMAC4
soap_get_PointerTons1__permissibleStringValue(struct soap *,
                                              ns1__permissibleStringValue **,
                                              const char *, const char *);

#ifndef soap_read_PointerTons1__permissibleStringValue
#define soap_read_PointerTons1__permissibleStringValue(soap, data)             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__permissibleStringValue(soap, data, NULL, \
                                                             NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTodouble
#define SOAP_TYPE_ICat4_PointerTodouble (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap *,
                                                          double *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap *, const char *,
                                                   int, double *const *,
                                                   const char *);
SOAP_FMAC3 double **SOAP_FMAC4 soap_in_PointerTodouble(struct soap *,
                                                       const char *, double **,
                                                       const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap *,
                                                   double *const *,
                                                   const char *, const char *);

#ifndef soap_write_PointerTodouble
#define soap_write_PointerTodouble(soap, data)                                 \
  (ICat4::soap_serialize_PointerTodouble(soap, data),                          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTodouble(soap, data, "double", NULL) ||          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 double **SOAP_FMAC4 soap_get_PointerTodouble(struct soap *,
                                                        double **, const char *,
                                                        const char *);

#ifndef soap_read_PointerTodouble
#define soap_read_PointerTodouble(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTodouble(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__rule
#define SOAP_TYPE_ICat4_PointerTons1__rule (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__rule(struct soap *, ns1__rule *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__rule(struct soap *,
                                                      const char *, int,
                                                      ns1__rule *const *,
                                                      const char *);
SOAP_FMAC3 ns1__rule **SOAP_FMAC4 soap_in_PointerTons1__rule(struct soap *,
                                                             const char *,
                                                             ns1__rule **,
                                                             const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__rule(struct soap *,
                                                      ns1__rule *const *,
                                                      const char *,
                                                      const char *);

#ifndef soap_write_PointerTons1__rule
#define soap_write_PointerTons1__rule(soap, data)                              \
  (ICat4::soap_serialize_PointerTons1__rule(soap, data),                       \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__rule(soap, data, "ns1:rule", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__rule **SOAP_FMAC4 soap_get_PointerTons1__rule(struct soap *,
                                                              ns1__rule **,
                                                              const char *,
                                                              const char *);

#ifndef soap_read_PointerTons1__rule
#define soap_read_PointerTons1__rule(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__rule(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__sampleType
#define SOAP_TYPE_ICat4_PointerTons1__sampleType (206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sampleType(
    struct soap *, ns1__sampleType *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sampleType(
    struct soap *, const char *, int, ns1__sampleType *const *, const char *);
SOAP_FMAC3 ns1__sampleType **SOAP_FMAC4 soap_in_PointerTons1__sampleType(
    struct soap *, const char *, ns1__sampleType **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sampleType(
    struct soap *, ns1__sampleType *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__sampleType
#define soap_write_PointerTons1__sampleType(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__sampleType(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__sampleType(soap, data, "ns1:sampleType",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__sampleType **SOAP_FMAC4 soap_get_PointerTons1__sampleType(
    struct soap *, ns1__sampleType **, const char *, const char *);

#ifndef soap_read_PointerTons1__sampleType
#define soap_read_PointerTons1__sampleType(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__sampleType(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__investigationParameter
#define SOAP_TYPE_ICat4_PointerTons1__investigationParameter (192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__investigationParameter(
    struct soap *, ns1__investigationParameter *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__investigationParameter(
    struct soap *, const char *, int, ns1__investigationParameter *const *,
    const char *);
SOAP_FMAC3 ns1__investigationParameter **SOAP_FMAC4
soap_in_PointerTons1__investigationParameter(struct soap *, const char *,
                                             ns1__investigationParameter **,
                                             const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__investigationParameter(
    struct soap *, ns1__investigationParameter *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__investigationParameter
#define soap_write_PointerTons1__investigationParameter(soap, data)            \
  (ICat4::soap_serialize_PointerTons1__investigationParameter(soap, data),     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__investigationParameter(                   \
           soap, data, "ns1:investigationParameter", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationParameter **SOAP_FMAC4
soap_get_PointerTons1__investigationParameter(struct soap *,
                                              ns1__investigationParameter **,
                                              const char *, const char *);

#ifndef soap_read_PointerTons1__investigationParameter
#define soap_read_PointerTons1__investigationParameter(soap, data)             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__investigationParameter(soap, data, NULL, \
                                                             NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__investigationInstrument
#define SOAP_TYPE_ICat4_PointerTons1__investigationInstrument (188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__investigationInstrument(
    struct soap *, ns1__investigationInstrument *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__investigationInstrument(
    struct soap *, const char *, int, ns1__investigationInstrument *const *,
    const char *);
SOAP_FMAC3 ns1__investigationInstrument **SOAP_FMAC4
soap_in_PointerTons1__investigationInstrument(struct soap *, const char *,
                                              ns1__investigationInstrument **,
                                              const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__investigationInstrument(
    struct soap *, ns1__investigationInstrument *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__investigationInstrument
#define soap_write_PointerTons1__investigationInstrument(soap, data)           \
  (ICat4::soap_serialize_PointerTons1__investigationInstrument(soap, data),    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__investigationInstrument(                  \
           soap, data, "ns1:investigationInstrument", NULL) ||                 \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationInstrument **SOAP_FMAC4
soap_get_PointerTons1__investigationInstrument(struct soap *,
                                               ns1__investigationInstrument **,
                                               const char *, const char *);

#ifndef soap_read_PointerTons1__investigationInstrument
#define soap_read_PointerTons1__investigationInstrument(soap, data)            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__investigationInstrument(soap, data,      \
                                                              NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__accessType
#define SOAP_TYPE_ICat4_PointerTons1__accessType (178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__accessType(
    struct soap *, enum ns1__accessType *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__accessType(struct soap *, const char *, int,
                                  enum ns1__accessType *const *, const char *);
SOAP_FMAC3 enum ns1__accessType **SOAP_FMAC4 soap_in_PointerTons1__accessType(
    struct soap *, const char *, enum ns1__accessType **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__accessType(
    struct soap *, enum ns1__accessType *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__accessType
#define soap_write_PointerTons1__accessType(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__accessType(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__accessType(soap, data, "ns1:accessType",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__accessType **SOAP_FMAC4 soap_get_PointerTons1__accessType(
    struct soap *, enum ns1__accessType **, const char *, const char *);

#ifndef soap_read_PointerTons1__accessType
#define soap_read_PointerTons1__accessType(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__accessType(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerToxsd__anyType
#define SOAP_TYPE_ICat4_PointerToxsd__anyType (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerToxsd__anyType(struct soap *, xsd__anyType *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap *,
                                                         const char *, int,
                                                         xsd__anyType *const *,
                                                         const char *);
SOAP_FMAC3 xsd__anyType **SOAP_FMAC4 soap_in_PointerToxsd__anyType(
    struct soap *, const char *, xsd__anyType **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap *,
                                                         xsd__anyType *const *,
                                                         const char *,
                                                         const char *);

#ifndef soap_write_PointerToxsd__anyType
#define soap_write_PointerToxsd__anyType(soap, data)                           \
  (ICat4::soap_serialize_PointerToxsd__anyType(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerToxsd__anyType(soap, data, "xsd:anyType",        \
                                             NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 xsd__anyType **SOAP_FMAC4 soap_get_PointerToxsd__anyType(
    struct soap *, xsd__anyType **, const char *, const char *);

#ifndef soap_read_PointerToxsd__anyType
#define soap_read_PointerToxsd__anyType(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerToxsd__anyType(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerToint
#define SOAP_TYPE_ICat4_PointerToint (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *,
                                                       int *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *, const char *,
                                                int, int *const *,
                                                const char *);
SOAP_FMAC3 int **SOAP_FMAC4 soap_in_PointerToint(struct soap *, const char *,
                                                 int **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *, int *const *,
                                                const char *, const char *);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data)                                    \
  (ICat4::soap_serialize_PointerToint(soap, data),                             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerToint(soap, data, "int", NULL) ||                \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 int **SOAP_FMAC4 soap_get_PointerToint(struct soap *, int **,
                                                  const char *, const char *);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data)                                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerToint(soap, data, NULL, NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__relType
#define SOAP_TYPE_ICat4_PointerTons1__relType (174)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__relType(struct soap *, enum ns1__relType *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__relType(
    struct soap *, const char *, int, enum ns1__relType *const *, const char *);
SOAP_FMAC3 enum ns1__relType **SOAP_FMAC4 soap_in_PointerTons1__relType(
    struct soap *, const char *, enum ns1__relType **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__relType(
    struct soap *, enum ns1__relType *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__relType
#define soap_write_PointerTons1__relType(soap, data)                           \
  (ICat4::soap_serialize_PointerTons1__relType(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__relType(soap, data, "ns1:relType",        \
                                             NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__relType **SOAP_FMAC4 soap_get_PointerTons1__relType(
    struct soap *, enum ns1__relType **, const char *, const char *);

#ifndef soap_read_PointerTons1__relType
#define soap_read_PointerTons1__relType(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__relType(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__entityField
#define SOAP_TYPE_ICat4_PointerTons1__entityField (172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__entityField(
    struct soap *, ns1__entityField *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__entityField(
    struct soap *, const char *, int, ns1__entityField *const *, const char *);
SOAP_FMAC3 ns1__entityField **SOAP_FMAC4 soap_in_PointerTons1__entityField(
    struct soap *, const char *, ns1__entityField **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__entityField(
    struct soap *, ns1__entityField *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__entityField
#define soap_write_PointerTons1__entityField(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__entityField(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__entityField(soap, data,                   \
                                                 "ns1:entityField", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__entityField **SOAP_FMAC4 soap_get_PointerTons1__entityField(
    struct soap *, ns1__entityField **, const char *, const char *);

#ifndef soap_read_PointerTons1__entityField
#define soap_read_PointerTons1__entityField(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__entityField(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__constraint
#define SOAP_TYPE_ICat4_PointerTons1__constraint (170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__constraint(
    struct soap *, ns1__constraint *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__constraint(
    struct soap *, const char *, int, ns1__constraint *const *, const char *);
SOAP_FMAC3 ns1__constraint **SOAP_FMAC4 soap_in_PointerTons1__constraint(
    struct soap *, const char *, ns1__constraint **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__constraint(
    struct soap *, ns1__constraint *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__constraint
#define soap_write_PointerTons1__constraint(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__constraint(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__constraint(soap, data, "ns1:constraint",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__constraint **SOAP_FMAC4 soap_get_PointerTons1__constraint(
    struct soap *, ns1__constraint **, const char *, const char *);

#ifndef soap_read_PointerTons1__constraint
#define soap_read_PointerTons1__constraint(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__constraint(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__entityInfo
#define SOAP_TYPE_ICat4_PointerTons1__entityInfo (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__entityInfo(
    struct soap *, ns1__entityInfo *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__entityInfo(
    struct soap *, const char *, int, ns1__entityInfo *const *, const char *);
SOAP_FMAC3 ns1__entityInfo **SOAP_FMAC4 soap_in_PointerTons1__entityInfo(
    struct soap *, const char *, ns1__entityInfo **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__entityInfo(
    struct soap *, ns1__entityInfo *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__entityInfo
#define soap_write_PointerTons1__entityInfo(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__entityInfo(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__entityInfo(soap, data, "ns1:entityInfo",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__entityInfo **SOAP_FMAC4 soap_get_PointerTons1__entityInfo(
    struct soap *, ns1__entityInfo **, const char *, const char *);

#ifndef soap_read_PointerTons1__entityInfo
#define soap_read_PointerTons1__entityInfo(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__entityInfo(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__publicStep
#define SOAP_TYPE_ICat4_PointerTons1__publicStep (168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__publicStep(
    struct soap *, ns1__publicStep *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__publicStep(
    struct soap *, const char *, int, ns1__publicStep *const *, const char *);
SOAP_FMAC3 ns1__publicStep **SOAP_FMAC4 soap_in_PointerTons1__publicStep(
    struct soap *, const char *, ns1__publicStep **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__publicStep(
    struct soap *, ns1__publicStep *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__publicStep
#define soap_write_PointerTons1__publicStep(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__publicStep(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__publicStep(soap, data, "ns1:publicStep",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__publicStep **SOAP_FMAC4 soap_get_PointerTons1__publicStep(
    struct soap *, ns1__publicStep **, const char *, const char *);

#ifndef soap_read_PointerTons1__publicStep
#define soap_read_PointerTons1__publicStep(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__publicStep(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__log
#define SOAP_TYPE_ICat4_PointerTons1__log (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__log(struct soap *,
                                                            ns1__log *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__log(struct soap *,
                                                     const char *, int,
                                                     ns1__log *const *,
                                                     const char *);
SOAP_FMAC3 ns1__log **SOAP_FMAC4 soap_in_PointerTons1__log(struct soap *,
                                                           const char *,
                                                           ns1__log **,
                                                           const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__log(struct soap *,
                                                     ns1__log *const *,
                                                     const char *,
                                                     const char *);

#ifndef soap_write_PointerTons1__log
#define soap_write_PointerTons1__log(soap, data)                               \
  (ICat4::soap_serialize_PointerTons1__log(soap, data),                        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__log(soap, data, "ns1:log", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__log **SOAP_FMAC4 soap_get_PointerTons1__log(struct soap *,
                                                            ns1__log **,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_PointerTons1__log
#define soap_read_PointerTons1__log(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__log(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__userGroup
#define SOAP_TYPE_ICat4_PointerTons1__userGroup (166)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__userGroup(struct soap *, ns1__userGroup *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userGroup(
    struct soap *, const char *, int, ns1__userGroup *const *, const char *);
SOAP_FMAC3 ns1__userGroup **SOAP_FMAC4 soap_in_PointerTons1__userGroup(
    struct soap *, const char *, ns1__userGroup **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userGroup(
    struct soap *, ns1__userGroup *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__userGroup
#define soap_write_PointerTons1__userGroup(soap, data)                         \
  (ICat4::soap_serialize_PointerTons1__userGroup(soap, data),                  \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__userGroup(soap, data, "ns1:userGroup",    \
                                               NULL) ||                        \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__userGroup **SOAP_FMAC4 soap_get_PointerTons1__userGroup(
    struct soap *, ns1__userGroup **, const char *, const char *);

#ifndef soap_read_PointerTons1__userGroup
#define soap_read_PointerTons1__userGroup(soap, data)                          \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__userGroup(soap, data, NULL, NULL) ||     \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__grouping
#define SOAP_TYPE_ICat4_PointerTons1__grouping (165)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__grouping(struct soap *, ns1__grouping *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__grouping(
    struct soap *, const char *, int, ns1__grouping *const *, const char *);
SOAP_FMAC3 ns1__grouping **SOAP_FMAC4 soap_in_PointerTons1__grouping(
    struct soap *, const char *, ns1__grouping **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__grouping(
    struct soap *, ns1__grouping *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__grouping
#define soap_write_PointerTons1__grouping(soap, data)                          \
  (ICat4::soap_serialize_PointerTons1__grouping(soap, data),                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__grouping(soap, data, "ns1:grouping",      \
                                              NULL) ||                         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__grouping **SOAP_FMAC4 soap_get_PointerTons1__grouping(
    struct soap *, ns1__grouping **, const char *, const char *);

#ifndef soap_read_PointerTons1__grouping
#define soap_read_PointerTons1__grouping(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__grouping(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__dataCollectionDatafile
#define SOAP_TYPE_ICat4_PointerTons1__dataCollectionDatafile (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dataCollectionDatafile(
    struct soap *, ns1__dataCollectionDatafile *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dataCollectionDatafile(
    struct soap *, const char *, int, ns1__dataCollectionDatafile *const *,
    const char *);
SOAP_FMAC3 ns1__dataCollectionDatafile **SOAP_FMAC4
soap_in_PointerTons1__dataCollectionDatafile(struct soap *, const char *,
                                             ns1__dataCollectionDatafile **,
                                             const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dataCollectionDatafile(
    struct soap *, ns1__dataCollectionDatafile *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__dataCollectionDatafile
#define soap_write_PointerTons1__dataCollectionDatafile(soap, data)            \
  (ICat4::soap_serialize_PointerTons1__dataCollectionDatafile(soap, data),     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__dataCollectionDatafile(                   \
           soap, data, "ns1:dataCollectionDatafile", NULL) ||                  \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollectionDatafile **SOAP_FMAC4
soap_get_PointerTons1__dataCollectionDatafile(struct soap *,
                                              ns1__dataCollectionDatafile **,
                                              const char *, const char *);

#ifndef soap_read_PointerTons1__dataCollectionDatafile
#define soap_read_PointerTons1__dataCollectionDatafile(soap, data)             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__dataCollectionDatafile(soap, data, NULL, \
                                                             NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__dataCollectionDataset
#define SOAP_TYPE_ICat4_PointerTons1__dataCollectionDataset (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dataCollectionDataset(
    struct soap *, ns1__dataCollectionDataset *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dataCollectionDataset(
    struct soap *, const char *, int, ns1__dataCollectionDataset *const *,
    const char *);
SOAP_FMAC3 ns1__dataCollectionDataset **SOAP_FMAC4
soap_in_PointerTons1__dataCollectionDataset(struct soap *, const char *,
                                            ns1__dataCollectionDataset **,
                                            const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dataCollectionDataset(
    struct soap *, ns1__dataCollectionDataset *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__dataCollectionDataset
#define soap_write_PointerTons1__dataCollectionDataset(soap, data)             \
  (ICat4::soap_serialize_PointerTons1__dataCollectionDataset(soap, data),      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__dataCollectionDataset(                    \
           soap, data, "ns1:dataCollectionDataset", NULL) ||                   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollectionDataset **SOAP_FMAC4
soap_get_PointerTons1__dataCollectionDataset(struct soap *,
                                             ns1__dataCollectionDataset **,
                                             const char *, const char *);

#ifndef soap_read_PointerTons1__dataCollectionDataset
#define soap_read_PointerTons1__dataCollectionDataset(soap, data)              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__dataCollectionDataset(soap, data, NULL,  \
                                                            NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__dataCollectionParameter
#define SOAP_TYPE_ICat4_PointerTons1__dataCollectionParameter (162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dataCollectionParameter(
    struct soap *, ns1__dataCollectionParameter *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dataCollectionParameter(
    struct soap *, const char *, int, ns1__dataCollectionParameter *const *,
    const char *);
SOAP_FMAC3 ns1__dataCollectionParameter **SOAP_FMAC4
soap_in_PointerTons1__dataCollectionParameter(struct soap *, const char *,
                                              ns1__dataCollectionParameter **,
                                              const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dataCollectionParameter(
    struct soap *, ns1__dataCollectionParameter *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__dataCollectionParameter
#define soap_write_PointerTons1__dataCollectionParameter(soap, data)           \
  (ICat4::soap_serialize_PointerTons1__dataCollectionParameter(soap, data),    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__dataCollectionParameter(                  \
           soap, data, "ns1:dataCollectionParameter", NULL) ||                 \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollectionParameter **SOAP_FMAC4
soap_get_PointerTons1__dataCollectionParameter(struct soap *,
                                               ns1__dataCollectionParameter **,
                                               const char *, const char *);

#ifndef soap_read_PointerTons1__dataCollectionParameter
#define soap_read_PointerTons1__dataCollectionParameter(soap, data)            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__dataCollectionParameter(soap, data,      \
                                                              NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__dataCollection
#define SOAP_TYPE_ICat4_PointerTons1__dataCollection (161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dataCollection(
    struct soap *, ns1__dataCollection *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dataCollection(
    struct soap *, const char *, int, ns1__dataCollection *const *,
    const char *);
SOAP_FMAC3 ns1__dataCollection **SOAP_FMAC4
soap_in_PointerTons1__dataCollection(struct soap *, const char *,
                                     ns1__dataCollection **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dataCollection(
    struct soap *, ns1__dataCollection *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__dataCollection
#define soap_write_PointerTons1__dataCollection(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__dataCollection(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__dataCollection(                           \
           soap, data, "ns1:dataCollection", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataCollection **SOAP_FMAC4
soap_get_PointerTons1__dataCollection(struct soap *, ns1__dataCollection **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__dataCollection
#define soap_read_PointerTons1__dataCollection(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__dataCollection(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__job
#define SOAP_TYPE_ICat4_PointerTons1__job (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__job(struct soap *,
                                                            ns1__job *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__job(struct soap *,
                                                     const char *, int,
                                                     ns1__job *const *,
                                                     const char *);
SOAP_FMAC3 ns1__job **SOAP_FMAC4 soap_in_PointerTons1__job(struct soap *,
                                                           const char *,
                                                           ns1__job **,
                                                           const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__job(struct soap *,
                                                     ns1__job *const *,
                                                     const char *,
                                                     const char *);

#ifndef soap_write_PointerTons1__job
#define soap_write_PointerTons1__job(soap, data)                               \
  (ICat4::soap_serialize_PointerTons1__job(soap, data),                        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__job(soap, data, "ns1:job", NULL) ||       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__job **SOAP_FMAC4 soap_get_PointerTons1__job(struct soap *,
                                                            ns1__job **,
                                                            const char *,
                                                            const char *);

#ifndef soap_read_PointerTons1__job
#define soap_read_PointerTons1__job(soap, data)                                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__job(soap, data, NULL, NULL) ||           \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__application
#define SOAP_TYPE_ICat4_PointerTons1__application (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__application(
    struct soap *, ns1__application *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__application(
    struct soap *, const char *, int, ns1__application *const *, const char *);
SOAP_FMAC3 ns1__application **SOAP_FMAC4 soap_in_PointerTons1__application(
    struct soap *, const char *, ns1__application **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__application(
    struct soap *, ns1__application *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__application
#define soap_write_PointerTons1__application(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__application(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__application(soap, data,                   \
                                                 "ns1:application", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__application **SOAP_FMAC4 soap_get_PointerTons1__application(
    struct soap *, ns1__application **, const char *, const char *);

#ifndef soap_read_PointerTons1__application
#define soap_read_PointerTons1__application(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__application(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__studyStatus
#define SOAP_TYPE_ICat4_PointerTons1__studyStatus (158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__studyStatus(
    struct soap *, enum ns1__studyStatus *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__studyStatus(
    struct soap *, const char *, int, enum ns1__studyStatus *const *,
    const char *);
SOAP_FMAC3 enum ns1__studyStatus **SOAP_FMAC4 soap_in_PointerTons1__studyStatus(
    struct soap *, const char *, enum ns1__studyStatus **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__studyStatus(
    struct soap *, enum ns1__studyStatus *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__studyStatus
#define soap_write_PointerTons1__studyStatus(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__studyStatus(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__studyStatus(soap, data,                   \
                                                 "ns1:studyStatus", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__studyStatus **SOAP_FMAC4
soap_get_PointerTons1__studyStatus(struct soap *, enum ns1__studyStatus **,
                                   const char *, const char *);

#ifndef soap_read_PointerTons1__studyStatus
#define soap_read_PointerTons1__studyStatus(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__studyStatus(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__studyInvestigation
#define SOAP_TYPE_ICat4_PointerTons1__studyInvestigation (157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__studyInvestigation(
    struct soap *, ns1__studyInvestigation *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__studyInvestigation(
    struct soap *, const char *, int, ns1__studyInvestigation *const *,
    const char *);
SOAP_FMAC3 ns1__studyInvestigation **SOAP_FMAC4
soap_in_PointerTons1__studyInvestigation(struct soap *, const char *,
                                         ns1__studyInvestigation **,
                                         const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__studyInvestigation(
    struct soap *, ns1__studyInvestigation *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__studyInvestigation
#define soap_write_PointerTons1__studyInvestigation(soap, data)                \
  (ICat4::soap_serialize_PointerTons1__studyInvestigation(soap, data),         \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__studyInvestigation(                       \
           soap, data, "ns1:studyInvestigation", NULL) ||                      \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__studyInvestigation **SOAP_FMAC4
soap_get_PointerTons1__studyInvestigation(struct soap *,
                                          ns1__studyInvestigation **,
                                          const char *, const char *);

#ifndef soap_read_PointerTons1__studyInvestigation
#define soap_read_PointerTons1__studyInvestigation(soap, data)                 \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__studyInvestigation(soap, data, NULL,     \
                                                         NULL) ||              \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__study
#define SOAP_TYPE_ICat4_PointerTons1__study (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__study(struct soap *, ns1__study *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__study(struct soap *,
                                                       const char *, int,
                                                       ns1__study *const *,
                                                       const char *);
SOAP_FMAC3 ns1__study **SOAP_FMAC4 soap_in_PointerTons1__study(struct soap *,
                                                               const char *,
                                                               ns1__study **,
                                                               const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__study(struct soap *,
                                                       ns1__study *const *,
                                                       const char *,
                                                       const char *);

#ifndef soap_write_PointerTons1__study
#define soap_write_PointerTons1__study(soap, data)                             \
  (ICat4::soap_serialize_PointerTons1__study(soap, data),                      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__study(soap, data, "ns1:study", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__study **SOAP_FMAC4 soap_get_PointerTons1__study(struct soap *,
                                                                ns1__study **,
                                                                const char *,
                                                                const char *);

#ifndef soap_read_PointerTons1__study
#define soap_read_PointerTons1__study(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__study(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__shift
#define SOAP_TYPE_ICat4_PointerTons1__shift (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__shift(struct soap *, ns1__shift *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__shift(struct soap *,
                                                       const char *, int,
                                                       ns1__shift *const *,
                                                       const char *);
SOAP_FMAC3 ns1__shift **SOAP_FMAC4 soap_in_PointerTons1__shift(struct soap *,
                                                               const char *,
                                                               ns1__shift **,
                                                               const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__shift(struct soap *,
                                                       ns1__shift *const *,
                                                       const char *,
                                                       const char *);

#ifndef soap_write_PointerTons1__shift
#define soap_write_PointerTons1__shift(soap, data)                             \
  (ICat4::soap_serialize_PointerTons1__shift(soap, data),                      \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__shift(soap, data, "ns1:shift", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__shift **SOAP_FMAC4 soap_get_PointerTons1__shift(struct soap *,
                                                                ns1__shift **,
                                                                const char *,
                                                                const char *);

#ifndef soap_read_PointerTons1__shift
#define soap_read_PointerTons1__shift(soap, data)                              \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__shift(soap, data, NULL, NULL) ||         \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__sampleParameter
#define SOAP_TYPE_ICat4_PointerTons1__sampleParameter (154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sampleParameter(
    struct soap *, ns1__sampleParameter *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sampleParameter(
    struct soap *, const char *, int, ns1__sampleParameter *const *,
    const char *);
SOAP_FMAC3 ns1__sampleParameter **SOAP_FMAC4
soap_in_PointerTons1__sampleParameter(struct soap *, const char *,
                                      ns1__sampleParameter **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sampleParameter(
    struct soap *, ns1__sampleParameter *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__sampleParameter
#define soap_write_PointerTons1__sampleParameter(soap, data)                   \
  (ICat4::soap_serialize_PointerTons1__sampleParameter(soap, data),            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__sampleParameter(                          \
           soap, data, "ns1:sampleParameter", NULL) ||                         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__sampleParameter **SOAP_FMAC4
soap_get_PointerTons1__sampleParameter(struct soap *, ns1__sampleParameter **,
                                       const char *, const char *);

#ifndef soap_read_PointerTons1__sampleParameter
#define soap_read_PointerTons1__sampleParameter(soap, data)                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__sampleParameter(soap, data, NULL,        \
                                                      NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__sample
#define SOAP_TYPE_ICat4_PointerTons1__sample (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__sample(struct soap *, ns1__sample *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sample(struct soap *,
                                                        const char *, int,
                                                        ns1__sample *const *,
                                                        const char *);
SOAP_FMAC3 ns1__sample **SOAP_FMAC4 soap_in_PointerTons1__sample(struct soap *,
                                                                 const char *,
                                                                 ns1__sample **,
                                                                 const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sample(struct soap *,
                                                        ns1__sample *const *,
                                                        const char *,
                                                        const char *);

#ifndef soap_write_PointerTons1__sample
#define soap_write_PointerTons1__sample(soap, data)                            \
  (ICat4::soap_serialize_PointerTons1__sample(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__sample(soap, data, "ns1:sample", NULL) || \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__sample **SOAP_FMAC4 soap_get_PointerTons1__sample(
    struct soap *, ns1__sample **, const char *, const char *);

#ifndef soap_read_PointerTons1__sample
#define soap_read_PointerTons1__sample(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__sample(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__relatedDatafile
#define SOAP_TYPE_ICat4_PointerTons1__relatedDatafile (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__relatedDatafile(
    struct soap *, ns1__relatedDatafile *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__relatedDatafile(
    struct soap *, const char *, int, ns1__relatedDatafile *const *,
    const char *);
SOAP_FMAC3 ns1__relatedDatafile **SOAP_FMAC4
soap_in_PointerTons1__relatedDatafile(struct soap *, const char *,
                                      ns1__relatedDatafile **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__relatedDatafile(
    struct soap *, ns1__relatedDatafile *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__relatedDatafile
#define soap_write_PointerTons1__relatedDatafile(soap, data)                   \
  (ICat4::soap_serialize_PointerTons1__relatedDatafile(soap, data),            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__relatedDatafile(                          \
           soap, data, "ns1:relatedDatafile", NULL) ||                         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__relatedDatafile **SOAP_FMAC4
soap_get_PointerTons1__relatedDatafile(struct soap *, ns1__relatedDatafile **,
                                       const char *, const char *);

#ifndef soap_read_PointerTons1__relatedDatafile
#define soap_read_PointerTons1__relatedDatafile(soap, data)                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__relatedDatafile(soap, data, NULL,        \
                                                      NULL) ||                 \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__publication
#define SOAP_TYPE_ICat4_PointerTons1__publication (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__publication(
    struct soap *, ns1__publication *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__publication(
    struct soap *, const char *, int, ns1__publication *const *, const char *);
SOAP_FMAC3 ns1__publication **SOAP_FMAC4 soap_in_PointerTons1__publication(
    struct soap *, const char *, ns1__publication **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__publication(
    struct soap *, ns1__publication *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__publication
#define soap_write_PointerTons1__publication(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__publication(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__publication(soap, data,                   \
                                                 "ns1:publication", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__publication **SOAP_FMAC4 soap_get_PointerTons1__publication(
    struct soap *, ns1__publication **, const char *, const char *);

#ifndef soap_read_PointerTons1__publication
#define soap_read_PointerTons1__publication(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__publication(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__parameterType
#define SOAP_TYPE_ICat4_PointerTons1__parameterType (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__parameterType(
    struct soap *, ns1__parameterType *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__parameterType(struct soap *, const char *, int,
                                     ns1__parameterType *const *, const char *);
SOAP_FMAC3 ns1__parameterType **SOAP_FMAC4 soap_in_PointerTons1__parameterType(
    struct soap *, const char *, ns1__parameterType **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__parameterType(
    struct soap *, ns1__parameterType *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__parameterType
#define soap_write_PointerTons1__parameterType(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__parameterType(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__parameterType(                            \
           soap, data, "ns1:parameterType", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__parameterType **SOAP_FMAC4 soap_get_PointerTons1__parameterType(
    struct soap *, ns1__parameterType **, const char *, const char *);

#ifndef soap_read_PointerTons1__parameterType
#define soap_read_PointerTons1__parameterType(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__parameterType(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__keyword
#define SOAP_TYPE_ICat4_PointerTons1__keyword (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__keyword(struct soap *, ns1__keyword *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__keyword(struct soap *,
                                                         const char *, int,
                                                         ns1__keyword *const *,
                                                         const char *);
SOAP_FMAC3 ns1__keyword **SOAP_FMAC4 soap_in_PointerTons1__keyword(
    struct soap *, const char *, ns1__keyword **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__keyword(struct soap *,
                                                         ns1__keyword *const *,
                                                         const char *,
                                                         const char *);

#ifndef soap_write_PointerTons1__keyword
#define soap_write_PointerTons1__keyword(soap, data)                           \
  (ICat4::soap_serialize_PointerTons1__keyword(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__keyword(soap, data, "ns1:keyword",        \
                                             NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__keyword **SOAP_FMAC4 soap_get_PointerTons1__keyword(
    struct soap *, ns1__keyword **, const char *, const char *);

#ifndef soap_read_PointerTons1__keyword
#define soap_read_PointerTons1__keyword(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__keyword(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__investigationUser
#define SOAP_TYPE_ICat4_PointerTons1__investigationUser (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__investigationUser(
    struct soap *, ns1__investigationUser *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__investigationUser(
    struct soap *, const char *, int, ns1__investigationUser *const *,
    const char *);
SOAP_FMAC3 ns1__investigationUser **SOAP_FMAC4
soap_in_PointerTons1__investigationUser(struct soap *, const char *,
                                        ns1__investigationUser **,
                                        const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__investigationUser(
    struct soap *, ns1__investigationUser *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__investigationUser
#define soap_write_PointerTons1__investigationUser(soap, data)                 \
  (ICat4::soap_serialize_PointerTons1__investigationUser(soap, data),          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__investigationUser(                        \
           soap, data, "ns1:investigationUser", NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationUser **SOAP_FMAC4
soap_get_PointerTons1__investigationUser(struct soap *,
                                         ns1__investigationUser **,
                                         const char *, const char *);

#ifndef soap_read_PointerTons1__investigationUser
#define soap_read_PointerTons1__investigationUser(soap, data)                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__investigationUser(soap, data, NULL,      \
                                                        NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__investigationType
#define SOAP_TYPE_ICat4_PointerTons1__investigationType (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__investigationType(
    struct soap *, ns1__investigationType *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__investigationType(
    struct soap *, const char *, int, ns1__investigationType *const *,
    const char *);
SOAP_FMAC3 ns1__investigationType **SOAP_FMAC4
soap_in_PointerTons1__investigationType(struct soap *, const char *,
                                        ns1__investigationType **,
                                        const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__investigationType(
    struct soap *, ns1__investigationType *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__investigationType
#define soap_write_PointerTons1__investigationType(soap, data)                 \
  (ICat4::soap_serialize_PointerTons1__investigationType(soap, data),          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__investigationType(                        \
           soap, data, "ns1:investigationType", NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigationType **SOAP_FMAC4
soap_get_PointerTons1__investigationType(struct soap *,
                                         ns1__investigationType **,
                                         const char *, const char *);

#ifndef soap_read_PointerTons1__investigationType
#define soap_read_PointerTons1__investigationType(soap, data)                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__investigationType(soap, data, NULL,      \
                                                        NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__investigation
#define SOAP_TYPE_ICat4_PointerTons1__investigation (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__investigation(
    struct soap *, ns1__investigation *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__investigation(struct soap *, const char *, int,
                                     ns1__investigation *const *, const char *);
SOAP_FMAC3 ns1__investigation **SOAP_FMAC4 soap_in_PointerTons1__investigation(
    struct soap *, const char *, ns1__investigation **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__investigation(
    struct soap *, ns1__investigation *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__investigation
#define soap_write_PointerTons1__investigation(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__investigation(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__investigation(                            \
           soap, data, "ns1:investigation", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__investigation **SOAP_FMAC4 soap_get_PointerTons1__investigation(
    struct soap *, ns1__investigation **, const char *, const char *);

#ifndef soap_read_PointerTons1__investigation
#define soap_read_PointerTons1__investigation(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__investigation(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__instrument
#define SOAP_TYPE_ICat4_PointerTons1__instrument (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__instrument(
    struct soap *, ns1__instrument *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__instrument(
    struct soap *, const char *, int, ns1__instrument *const *, const char *);
SOAP_FMAC3 ns1__instrument **SOAP_FMAC4 soap_in_PointerTons1__instrument(
    struct soap *, const char *, ns1__instrument **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__instrument(
    struct soap *, ns1__instrument *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__instrument
#define soap_write_PointerTons1__instrument(soap, data)                        \
  (ICat4::soap_serialize_PointerTons1__instrument(soap, data),                 \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__instrument(soap, data, "ns1:instrument",  \
                                                NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__instrument **SOAP_FMAC4 soap_get_PointerTons1__instrument(
    struct soap *, ns1__instrument **, const char *, const char *);

#ifndef soap_read_PointerTons1__instrument
#define soap_read_PointerTons1__instrument(soap, data)                         \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__instrument(soap, data, NULL, NULL) ||    \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__user
#define SOAP_TYPE_ICat4_PointerTons1__user (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__user(struct soap *, ns1__user *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__user(struct soap *,
                                                      const char *, int,
                                                      ns1__user *const *,
                                                      const char *);
SOAP_FMAC3 ns1__user **SOAP_FMAC4 soap_in_PointerTons1__user(struct soap *,
                                                             const char *,
                                                             ns1__user **,
                                                             const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__user(struct soap *,
                                                      ns1__user *const *,
                                                      const char *,
                                                      const char *);

#ifndef soap_write_PointerTons1__user
#define soap_write_PointerTons1__user(soap, data)                              \
  (ICat4::soap_serialize_PointerTons1__user(soap, data),                       \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__user(soap, data, "ns1:user", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__user **SOAP_FMAC4 soap_get_PointerTons1__user(struct soap *,
                                                              ns1__user **,
                                                              const char *,
                                                              const char *);

#ifndef soap_read_PointerTons1__user
#define soap_read_PointerTons1__user(soap, data)                               \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__user(soap, data, NULL, NULL) ||          \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__instrumentScientist
#define SOAP_TYPE_ICat4_PointerTons1__instrumentScientist (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__instrumentScientist(
    struct soap *, ns1__instrumentScientist *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__instrumentScientist(
    struct soap *, const char *, int, ns1__instrumentScientist *const *,
    const char *);
SOAP_FMAC3 ns1__instrumentScientist **SOAP_FMAC4
soap_in_PointerTons1__instrumentScientist(struct soap *, const char *,
                                          ns1__instrumentScientist **,
                                          const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__instrumentScientist(
    struct soap *, ns1__instrumentScientist *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__instrumentScientist
#define soap_write_PointerTons1__instrumentScientist(soap, data)               \
  (ICat4::soap_serialize_PointerTons1__instrumentScientist(soap, data),        \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__instrumentScientist(                      \
           soap, data, "ns1:instrumentScientist", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__instrumentScientist **SOAP_FMAC4
soap_get_PointerTons1__instrumentScientist(struct soap *,
                                           ns1__instrumentScientist **,
                                           const char *, const char *);

#ifndef soap_read_PointerTons1__instrumentScientist
#define soap_read_PointerTons1__instrumentScientist(soap, data)                \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__instrumentScientist(soap, data, NULL,    \
                                                          NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__facilityCycle
#define SOAP_TYPE_ICat4_PointerTons1__facilityCycle (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__facilityCycle(
    struct soap *, ns1__facilityCycle *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTons1__facilityCycle(struct soap *, const char *, int,
                                     ns1__facilityCycle *const *, const char *);
SOAP_FMAC3 ns1__facilityCycle **SOAP_FMAC4 soap_in_PointerTons1__facilityCycle(
    struct soap *, const char *, ns1__facilityCycle **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__facilityCycle(
    struct soap *, ns1__facilityCycle *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__facilityCycle
#define soap_write_PointerTons1__facilityCycle(soap, data)                     \
  (ICat4::soap_serialize_PointerTons1__facilityCycle(soap, data),              \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__facilityCycle(                            \
           soap, data, "ns1:facilityCycle", NULL) ||                           \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__facilityCycle **SOAP_FMAC4 soap_get_PointerTons1__facilityCycle(
    struct soap *, ns1__facilityCycle **, const char *, const char *);

#ifndef soap_read_PointerTons1__facilityCycle
#define soap_read_PointerTons1__facilityCycle(soap, data)                      \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__facilityCycle(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__facility
#define SOAP_TYPE_ICat4_PointerTons1__facility (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__facility(struct soap *, ns1__facility *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__facility(
    struct soap *, const char *, int, ns1__facility *const *, const char *);
SOAP_FMAC3 ns1__facility **SOAP_FMAC4 soap_in_PointerTons1__facility(
    struct soap *, const char *, ns1__facility **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__facility(
    struct soap *, ns1__facility *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__facility
#define soap_write_PointerTons1__facility(soap, data)                          \
  (ICat4::soap_serialize_PointerTons1__facility(soap, data),                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__facility(soap, data, "ns1:facility",      \
                                              NULL) ||                         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__facility **SOAP_FMAC4 soap_get_PointerTons1__facility(
    struct soap *, ns1__facility **, const char *, const char *);

#ifndef soap_read_PointerTons1__facility
#define soap_read_PointerTons1__facility(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__facility(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__datasetType
#define SOAP_TYPE_ICat4_PointerTons1__datasetType (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__datasetType(
    struct soap *, ns1__datasetType *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__datasetType(
    struct soap *, const char *, int, ns1__datasetType *const *, const char *);
SOAP_FMAC3 ns1__datasetType **SOAP_FMAC4 soap_in_PointerTons1__datasetType(
    struct soap *, const char *, ns1__datasetType **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__datasetType(
    struct soap *, ns1__datasetType *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__datasetType
#define soap_write_PointerTons1__datasetType(soap, data)                       \
  (ICat4::soap_serialize_PointerTons1__datasetType(soap, data),                \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__datasetType(soap, data,                   \
                                                 "ns1:datasetType", NULL) ||   \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datasetType **SOAP_FMAC4 soap_get_PointerTons1__datasetType(
    struct soap *, ns1__datasetType **, const char *, const char *);

#ifndef soap_read_PointerTons1__datasetType
#define soap_read_PointerTons1__datasetType(soap, data)                        \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__datasetType(soap, data, NULL, NULL) ||   \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__datasetParameter
#define SOAP_TYPE_ICat4_PointerTons1__datasetParameter (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__datasetParameter(
    struct soap *, ns1__datasetParameter *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__datasetParameter(
    struct soap *, const char *, int, ns1__datasetParameter *const *,
    const char *);
SOAP_FMAC3 ns1__datasetParameter **SOAP_FMAC4
soap_in_PointerTons1__datasetParameter(struct soap *, const char *,
                                       ns1__datasetParameter **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__datasetParameter(
    struct soap *, ns1__datasetParameter *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__datasetParameter
#define soap_write_PointerTons1__datasetParameter(soap, data)                  \
  (ICat4::soap_serialize_PointerTons1__datasetParameter(soap, data),           \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__datasetParameter(                         \
           soap, data, "ns1:datasetParameter", NULL) ||                        \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datasetParameter **SOAP_FMAC4
soap_get_PointerTons1__datasetParameter(struct soap *, ns1__datasetParameter **,
                                        const char *, const char *);

#ifndef soap_read_PointerTons1__datasetParameter
#define soap_read_PointerTons1__datasetParameter(soap, data)                   \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__datasetParameter(soap, data, NULL,       \
                                                       NULL) ||                \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__dataset
#define SOAP_TYPE_ICat4_PointerTons1__dataset (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__dataset(struct soap *, ns1__dataset *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dataset(struct soap *,
                                                         const char *, int,
                                                         ns1__dataset *const *,
                                                         const char *);
SOAP_FMAC3 ns1__dataset **SOAP_FMAC4 soap_in_PointerTons1__dataset(
    struct soap *, const char *, ns1__dataset **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dataset(struct soap *,
                                                         ns1__dataset *const *,
                                                         const char *,
                                                         const char *);

#ifndef soap_write_PointerTons1__dataset
#define soap_write_PointerTons1__dataset(soap, data)                           \
  (ICat4::soap_serialize_PointerTons1__dataset(soap, data),                    \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__dataset(soap, data, "ns1:dataset",        \
                                             NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__dataset **SOAP_FMAC4 soap_get_PointerTons1__dataset(
    struct soap *, ns1__dataset **, const char *, const char *);

#ifndef soap_read_PointerTons1__dataset
#define soap_read_PointerTons1__dataset(soap, data)                            \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__dataset(soap, data, NULL, NULL) ||       \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__datafileParameter
#define SOAP_TYPE_ICat4_PointerTons1__datafileParameter (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__datafileParameter(
    struct soap *, ns1__datafileParameter *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__datafileParameter(
    struct soap *, const char *, int, ns1__datafileParameter *const *,
    const char *);
SOAP_FMAC3 ns1__datafileParameter **SOAP_FMAC4
soap_in_PointerTons1__datafileParameter(struct soap *, const char *,
                                        ns1__datafileParameter **,
                                        const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__datafileParameter(
    struct soap *, ns1__datafileParameter *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__datafileParameter
#define soap_write_PointerTons1__datafileParameter(soap, data)                 \
  (ICat4::soap_serialize_PointerTons1__datafileParameter(soap, data),          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__datafileParameter(                        \
           soap, data, "ns1:datafileParameter", NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datafileParameter **SOAP_FMAC4
soap_get_PointerTons1__datafileParameter(struct soap *,
                                         ns1__datafileParameter **,
                                         const char *, const char *);

#ifndef soap_read_PointerTons1__datafileParameter
#define soap_read_PointerTons1__datafileParameter(soap, data)                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__datafileParameter(soap, data, NULL,      \
                                                        NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__datafileFormat
#define SOAP_TYPE_ICat4_PointerTons1__datafileFormat (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__datafileFormat(
    struct soap *, ns1__datafileFormat *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__datafileFormat(
    struct soap *, const char *, int, ns1__datafileFormat *const *,
    const char *);
SOAP_FMAC3 ns1__datafileFormat **SOAP_FMAC4
soap_in_PointerTons1__datafileFormat(struct soap *, const char *,
                                     ns1__datafileFormat **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__datafileFormat(
    struct soap *, ns1__datafileFormat *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__datafileFormat
#define soap_write_PointerTons1__datafileFormat(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__datafileFormat(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__datafileFormat(                           \
           soap, data, "ns1:datafileFormat", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datafileFormat **SOAP_FMAC4
soap_get_PointerTons1__datafileFormat(struct soap *, ns1__datafileFormat **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__datafileFormat
#define soap_read_PointerTons1__datafileFormat(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__datafileFormat(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__datafile
#define SOAP_TYPE_ICat4_PointerTons1__datafile (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTons1__datafile(struct soap *, ns1__datafile *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__datafile(
    struct soap *, const char *, int, ns1__datafile *const *, const char *);
SOAP_FMAC3 ns1__datafile **SOAP_FMAC4 soap_in_PointerTons1__datafile(
    struct soap *, const char *, ns1__datafile **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__datafile(
    struct soap *, ns1__datafile *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__datafile
#define soap_write_PointerTons1__datafile(soap, data)                          \
  (ICat4::soap_serialize_PointerTons1__datafile(soap, data),                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__datafile(soap, data, "ns1:datafile",      \
                                              NULL) ||                         \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__datafile **SOAP_FMAC4 soap_get_PointerTons1__datafile(
    struct soap *, ns1__datafile **, const char *, const char *);

#ifndef soap_read_PointerTons1__datafile
#define soap_read_PointerTons1__datafile(soap, data)                           \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__datafile(soap, data, NULL, NULL) ||      \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry
#define SOAP_TYPE_ICat4_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry \
  (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, std::vector<_ns1__login_credentials_entry> *const *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, const char *, int,
    std::vector<_ns1__login_credentials_entry> *const *, const char *);
SOAP_FMAC3 std::vector<_ns1__login_credentials_entry> **SOAP_FMAC4
soap_in_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, const char *, std::vector<_ns1__login_credentials_entry> **,
    const char *);
SOAP_FMAC3 int SOAP_FMAC4
soap_put_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, std::vector<_ns1__login_credentials_entry> *const *,
    const char *, const char *);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry
#define soap_write_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(    \
    soap, data)                                                                    \
  (ICat4::                                                                         \
       soap_serialize_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry( \
           soap, data),                                                            \
   soap_begin_send(soap) ||                                                        \
       ICat4::                                                                     \
           soap_put_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(   \
               soap, data, "", NULL) ||                                            \
       soap_end_send(soap),                                                        \
   soap->error)
#endif

SOAP_FMAC3 std::vector<_ns1__login_credentials_entry> **SOAP_FMAC4
soap_get_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, std::vector<_ns1__login_credentials_entry> **, const char *,
    const char *);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry
#define soap_read_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry(   \
    soap, data)                                                                  \
  (soap_begin_recv(soap) ||                                                      \
       !ICat4::                                                                  \
           soap_get_PointerTostd__vectorTemplateOf_ns1__login_credentials_entry( \
               soap, data, NULL, NULL) ||                                        \
       soap_end_recv(soap),                                                      \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerToLONG64
#define SOAP_TYPE_ICat4_PointerToLONG64 (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap *,
                                                          LONG64 *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap *, const char *,
                                                   int, LONG64 *const *,
                                                   const char *);
SOAP_FMAC3 LONG64 **SOAP_FMAC4 soap_in_PointerToLONG64(struct soap *,
                                                       const char *, LONG64 **,
                                                       const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap *,
                                                   LONG64 *const *,
                                                   const char *, const char *);

#ifndef soap_write_PointerToLONG64
#define soap_write_PointerToLONG64(soap, data)                                 \
  (ICat4::soap_serialize_PointerToLONG64(soap, data),                          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerToLONG64(soap, data, "long", NULL) ||            \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 LONG64 **SOAP_FMAC4 soap_get_PointerToLONG64(struct soap *,
                                                        LONG64 **, const char *,
                                                        const char *);

#ifndef soap_read_PointerToLONG64
#define soap_read_PointerToLONG64(soap, data)                                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerToLONG64(soap, data, NULL, NULL) ||             \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTotime
#define SOAP_TYPE_ICat4_PointerTotime (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap *,
                                                        time_t *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap *, const char *,
                                                 int, time_t *const *,
                                                 const char *);
SOAP_FMAC3 time_t **SOAP_FMAC4 soap_in_PointerTotime(struct soap *,
                                                     const char *, time_t **,
                                                     const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap *, time_t *const *,
                                                 const char *, const char *);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data)                                   \
  (ICat4::soap_serialize_PointerTotime(soap, data),                            \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTotime(soap, data, "dateTime", NULL) ||          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 time_t **SOAP_FMAC4 soap_get_PointerTotime(struct soap *, time_t **,
                                                      const char *,
                                                      const char *);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data)                                    \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTotime(soap, data, NULL, NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__entityBaseBean
#define SOAP_TYPE_ICat4_PointerTons1__entityBaseBean (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__entityBaseBean(
    struct soap *, ns1__entityBaseBean *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__entityBaseBean(
    struct soap *, const char *, int, ns1__entityBaseBean *const *,
    const char *);
SOAP_FMAC3 ns1__entityBaseBean **SOAP_FMAC4
soap_in_PointerTons1__entityBaseBean(struct soap *, const char *,
                                     ns1__entityBaseBean **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__entityBaseBean(
    struct soap *, ns1__entityBaseBean *const *, const char *, const char *);

#ifndef soap_write_PointerTons1__entityBaseBean
#define soap_write_PointerTons1__entityBaseBean(soap, data)                    \
  (ICat4::soap_serialize_PointerTons1__entityBaseBean(soap, data),             \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__entityBaseBean(                           \
           soap, data, "ns1:entityBaseBean", NULL) ||                          \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 ns1__entityBaseBean **SOAP_FMAC4
soap_get_PointerTons1__entityBaseBean(struct soap *, ns1__entityBaseBean **,
                                      const char *, const char *);

#ifndef soap_read_PointerTons1__entityBaseBean
#define soap_read_PointerTons1__entityBaseBean(soap, data)                     \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__entityBaseBean(soap, data, NULL,         \
                                                     NULL) ||                  \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTons1__icatExceptionType
#define SOAP_TYPE_ICat4_PointerTons1__icatExceptionType (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__icatExceptionType(
    struct soap *, enum ns1__icatExceptionType *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__icatExceptionType(
    struct soap *, const char *, int, enum ns1__icatExceptionType *const *,
    const char *);
SOAP_FMAC3 enum ns1__icatExceptionType **SOAP_FMAC4
soap_in_PointerTons1__icatExceptionType(struct soap *, const char *,
                                        enum ns1__icatExceptionType **,
                                        const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__icatExceptionType(
    struct soap *, enum ns1__icatExceptionType *const *, const char *,
    const char *);

#ifndef soap_write_PointerTons1__icatExceptionType
#define soap_write_PointerTons1__icatExceptionType(soap, data)                 \
  (ICat4::soap_serialize_PointerTons1__icatExceptionType(soap, data),          \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTons1__icatExceptionType(                        \
           soap, data, "ns1:icatExceptionType", NULL) ||                       \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 enum ns1__icatExceptionType **SOAP_FMAC4
soap_get_PointerTons1__icatExceptionType(struct soap *,
                                         enum ns1__icatExceptionType **,
                                         const char *, const char *);

#ifndef soap_read_PointerTons1__icatExceptionType
#define soap_read_PointerTons1__icatExceptionType(soap, data)                  \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTons1__icatExceptionType(soap, data, NULL,      \
                                                        NULL) ||               \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_PointerTostd__string
#define SOAP_TYPE_ICat4_PointerTostd__string (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_PointerTostd__string(struct soap *, std::string *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *,
                                                        const char *, int,
                                                        std::string *const *,
                                                        const char *);
SOAP_FMAC3 std::string **SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *,
                                                                 const char *,
                                                                 std::string **,
                                                                 const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *,
                                                        std::string *const *,
                                                        const char *,
                                                        const char *);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data)                            \
  (ICat4::soap_serialize_PointerTostd__string(soap, data),                     \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_PointerTostd__string(soap, data, "string", NULL) ||     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 std::string **SOAP_FMAC4 soap_get_PointerTostd__string(
    struct soap *, std::string **, const char *, const char *);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data)                             \
  (soap_begin_recv(soap) ||                                                    \
       !ICat4::soap_get_PointerTostd__string(soap, data, NULL, NULL) ||        \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4__QName
#define SOAP_TYPE_ICat4__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *, char *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *, const char *, int,
                                          char *const *, const char *);
SOAP_FMAC3 char **SOAP_FMAC4 soap_in__QName(struct soap *, const char *,
                                            char **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *, char *const *,
                                          const char *, const char *);

#ifndef soap_write__QName
#define soap_write__QName(soap, data)                                          \
  (ICat4::soap_serialize__QName(soap, data),                                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put__QName(soap, data, "byte", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 char **SOAP_FMAC4 soap_get__QName(struct soap *, char **,
                                             const char *, const char *);

#ifndef soap_read__QName
#define soap_read__QName(soap, data)                                           \
  (soap_begin_recv(soap) || !ICat4::soap_get__QName(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_string
#define SOAP_TYPE_ICat4_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *, char *const *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *, const char *, int,
                                          char *const *, const char *);
SOAP_FMAC3 char **SOAP_FMAC4 soap_in_string(struct soap *, const char *,
                                            char **, const char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *, char *const *,
                                          const char *, const char *);

#ifndef soap_write_string
#define soap_write_string(soap, data)                                          \
  (ICat4::soap_serialize_string(soap, data),                                   \
   soap_begin_send(soap) ||                                                    \
       ICat4::soap_put_string(soap, data, "byte", NULL) ||                     \
       soap_end_send(soap),                                                    \
   soap->error)
#endif

SOAP_FMAC3 char **SOAP_FMAC4 soap_get_string(struct soap *, char **,
                                             const char *, const char *);

#ifndef soap_read_string
#define soap_read_string(soap, data)                                           \
  (soap_begin_recv(soap) || !ICat4::soap_get_string(soap, data, NULL, NULL) || \
       soap_end_recv(soap),                                                    \
   soap->error)
#endif

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__sampleParameter
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__sampleParameter (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__sampleParameter(
    struct soap *, std::vector<ns1__sampleParameter *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__sampleParameter(
    struct soap *, const std::vector<ns1__sampleParameter *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__sampleParameter(
    struct soap *, const char *, int,
    const std::vector<ns1__sampleParameter *> *, const char *);
SOAP_FMAC3 std::vector<ns1__sampleParameter *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__sampleParameter(
    struct soap *, const char *, std::vector<ns1__sampleParameter *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__sampleParameter *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__sampleParameter(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__sampleParameter *> *
soap_new_std__vectorTemplateOfPointerTons1__sampleParameter(struct soap *soap,
                                                            int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__sampleParameter(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__sampleParameter(
    struct soap *soap, std::vector<ns1__sampleParameter *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__sampleParameter(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__permissibleStringValue
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__permissibleStringValue \
  (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *, std::vector<ns1__permissibleStringValue *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *, const std::vector<ns1__permissibleStringValue *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *, const char *, int,
    const std::vector<ns1__permissibleStringValue *> *, const char *);
SOAP_FMAC3 std::vector<ns1__permissibleStringValue *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *, const char *, std::vector<ns1__permissibleStringValue *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__permissibleStringValue *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__permissibleStringValue *> *
soap_new_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__permissibleStringValue(
      soap, n, nullptr, nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *soap, std::vector<ns1__permissibleStringValue *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__permissibleStringValue(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__rule
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__rule (212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__rule(
    struct soap *, std::vector<ns1__rule *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__rule(
    struct soap *, const std::vector<ns1__rule *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__rule(
    struct soap *, const char *, int, const std::vector<ns1__rule *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__rule *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__rule(struct soap *, const char *,
                                                std::vector<ns1__rule *> *,
                                                const char *);
SOAP_FMAC1 std::vector<ns1__rule *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__rule(struct soap *, int,
                                                         const char *,
                                                         const char *,
                                                         size_t *);

inline std::vector<ns1__rule *> *
soap_new_std__vectorTemplateOfPointerTons1__rule(struct soap *soap,
                                                 int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__rule(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__rule(
    struct soap *soap, std::vector<ns1__rule *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__rule(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__userGroup
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__userGroup (210)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__userGroup(
    struct soap *, std::vector<ns1__userGroup *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__userGroup(
    struct soap *, const std::vector<ns1__userGroup *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__userGroup(
    struct soap *, const char *, int, const std::vector<ns1__userGroup *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__userGroup *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__userGroup(
    struct soap *, const char *, std::vector<ns1__userGroup *> *, const char *);
SOAP_FMAC1 std::vector<ns1__userGroup *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__userGroup(struct soap *,
                                                              int, const char *,
                                                              const char *,
                                                              size_t *);

inline std::vector<ns1__userGroup *> *
soap_new_std__vectorTemplateOfPointerTons1__userGroup(struct soap *soap,
                                                      int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__userGroup(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__userGroup(
    struct soap *soap, std::vector<ns1__userGroup *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__userGroup(struct soap *, int, int,
                                                       void *, size_t,
                                                       const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__study
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__study (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__study(
    struct soap *, std::vector<ns1__study *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__study(
    struct soap *, const std::vector<ns1__study *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__study(
    struct soap *, const char *, int, const std::vector<ns1__study *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__study *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__study(struct soap *, const char *,
                                                 std::vector<ns1__study *> *,
                                                 const char *);
SOAP_FMAC1 std::vector<ns1__study *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__study(struct soap *, int,
                                                          const char *,
                                                          const char *,
                                                          size_t *);

inline std::vector<ns1__study *> *
soap_new_std__vectorTemplateOfPointerTons1__study(struct soap *soap,
                                                  int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__study(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__study(
    struct soap *soap, std::vector<ns1__study *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__study(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__instrumentScientist
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__instrumentScientist \
  (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *, std::vector<ns1__instrumentScientist *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *, const std::vector<ns1__instrumentScientist *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *, const char *, int,
    const std::vector<ns1__instrumentScientist *> *, const char *);
SOAP_FMAC3 std::vector<ns1__instrumentScientist *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *, const char *, std::vector<ns1__instrumentScientist *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__instrumentScientist *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__instrumentScientist *> *
soap_new_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__instrumentScientist(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *soap, std::vector<ns1__instrumentScientist *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__instrumentScientist(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__sampleType
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__sampleType (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__sampleType(
    struct soap *, std::vector<ns1__sampleType *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__sampleType(
    struct soap *, const std::vector<ns1__sampleType *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__sampleType(
    struct soap *, const char *, int, const std::vector<ns1__sampleType *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__sampleType *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__sampleType(
    struct soap *, const char *, std::vector<ns1__sampleType *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__sampleType *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__sampleType(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__sampleType *> *
soap_new_std__vectorTemplateOfPointerTons1__sampleType(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__sampleType(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__sampleType(
    struct soap *soap, std::vector<ns1__sampleType *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__sampleType(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__parameterType
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__parameterType (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__parameterType(
    struct soap *, std::vector<ns1__parameterType *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__parameterType(
    struct soap *, const std::vector<ns1__parameterType *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__parameterType(
    struct soap *, const char *, int, const std::vector<ns1__parameterType *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__parameterType *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__parameterType(
    struct soap *, const char *, std::vector<ns1__parameterType *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__parameterType *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__parameterType(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__parameterType *> *
soap_new_std__vectorTemplateOfPointerTons1__parameterType(struct soap *soap,
                                                          int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__parameterType(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__parameterType(
    struct soap *soap, std::vector<ns1__parameterType *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__parameterType(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigation
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigation (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__investigation(
    struct soap *, std::vector<ns1__investigation *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__investigation(
    struct soap *, const std::vector<ns1__investigation *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__investigation(
    struct soap *, const char *, int, const std::vector<ns1__investigation *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__investigation *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__investigation(
    struct soap *, const char *, std::vector<ns1__investigation *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__investigation *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__investigation(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__investigation *> *
soap_new_std__vectorTemplateOfPointerTons1__investigation(struct soap *soap,
                                                          int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__investigation(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__investigation(
    struct soap *soap, std::vector<ns1__investigation *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__investigation(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationType
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationType   \
  (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__investigationType(
    struct soap *, std::vector<ns1__investigationType *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__investigationType(
    struct soap *, const std::vector<ns1__investigationType *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__investigationType(
    struct soap *, const char *, int,
    const std::vector<ns1__investigationType *> *, const char *);
SOAP_FMAC3 std::vector<ns1__investigationType *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__investigationType(
    struct soap *, const char *, std::vector<ns1__investigationType *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__investigationType *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__investigationType(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__investigationType *> *
soap_new_std__vectorTemplateOfPointerTons1__investigationType(struct soap *soap,
                                                              int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__investigationType(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__investigationType(
    struct soap *soap, std::vector<ns1__investigationType *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__investigationType(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__instrument
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__instrument (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__instrument(
    struct soap *, std::vector<ns1__instrument *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__instrument(
    struct soap *, const std::vector<ns1__instrument *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__instrument(
    struct soap *, const char *, int, const std::vector<ns1__instrument *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__instrument *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__instrument(
    struct soap *, const char *, std::vector<ns1__instrument *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__instrument *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__instrument(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__instrument *> *
soap_new_std__vectorTemplateOfPointerTons1__instrument(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__instrument(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__instrument(
    struct soap *soap, std::vector<ns1__instrument *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__instrument(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__facilityCycle
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__facilityCycle (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__facilityCycle(
    struct soap *, std::vector<ns1__facilityCycle *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__facilityCycle(
    struct soap *, const std::vector<ns1__facilityCycle *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__facilityCycle(
    struct soap *, const char *, int, const std::vector<ns1__facilityCycle *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__facilityCycle *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__facilityCycle(
    struct soap *, const char *, std::vector<ns1__facilityCycle *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__facilityCycle *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__facilityCycle(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__facilityCycle *> *
soap_new_std__vectorTemplateOfPointerTons1__facilityCycle(struct soap *soap,
                                                          int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__facilityCycle(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__facilityCycle(
    struct soap *soap, std::vector<ns1__facilityCycle *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__facilityCycle(struct soap *, int,
                                                           int, void *, size_t,
                                                           const void *,
                                                           size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datasetType
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datasetType (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__datasetType(
    struct soap *, std::vector<ns1__datasetType *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__datasetType(
    struct soap *, const std::vector<ns1__datasetType *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__datasetType(
    struct soap *, const char *, int, const std::vector<ns1__datasetType *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__datasetType *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__datasetType(
    struct soap *, const char *, std::vector<ns1__datasetType *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__datasetType *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__datasetType(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__datasetType *> *
soap_new_std__vectorTemplateOfPointerTons1__datasetType(struct soap *soap,
                                                        int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__datasetType(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__datasetType(
    struct soap *soap, std::vector<ns1__datasetType *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__datasetType(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datafileFormat
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datafileFormat (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__datafileFormat(
    struct soap *, std::vector<ns1__datafileFormat *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__datafileFormat(
    struct soap *, const std::vector<ns1__datafileFormat *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__datafileFormat(
    struct soap *, const char *, int,
    const std::vector<ns1__datafileFormat *> *, const char *);
SOAP_FMAC3 std::vector<ns1__datafileFormat *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__datafileFormat(
    struct soap *, const char *, std::vector<ns1__datafileFormat *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__datafileFormat *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__datafileFormat(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__datafileFormat *> *
soap_new_std__vectorTemplateOfPointerTons1__datafileFormat(struct soap *soap,
                                                           int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__datafileFormat(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__datafileFormat(
    struct soap *soap, std::vector<ns1__datafileFormat *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__datafileFormat(struct soap *, int,
                                                            int, void *, size_t,
                                                            const void *,
                                                            size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__application
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__application (198)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__application(
    struct soap *, std::vector<ns1__application *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__application(
    struct soap *, const std::vector<ns1__application *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__application(
    struct soap *, const char *, int, const std::vector<ns1__application *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__application *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__application(
    struct soap *, const char *, std::vector<ns1__application *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__application *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__application(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__application *> *
soap_new_std__vectorTemplateOfPointerTons1__application(struct soap *soap,
                                                        int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__application(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__application(
    struct soap *soap, std::vector<ns1__application *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__application(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__studyInvestigation
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__studyInvestigation  \
  (197)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *, std::vector<ns1__studyInvestigation *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *, const std::vector<ns1__studyInvestigation *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *, const char *, int,
    const std::vector<ns1__studyInvestigation *> *, const char *);
SOAP_FMAC3 std::vector<ns1__studyInvestigation *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *, const char *, std::vector<ns1__studyInvestigation *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__studyInvestigation *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__studyInvestigation *> *
soap_new_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__studyInvestigation(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *soap, std::vector<ns1__studyInvestigation *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__studyInvestigation(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__shift
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__shift (196)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__shift(
    struct soap *, std::vector<ns1__shift *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__shift(
    struct soap *, const std::vector<ns1__shift *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__shift(
    struct soap *, const char *, int, const std::vector<ns1__shift *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__shift *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__shift(struct soap *, const char *,
                                                 std::vector<ns1__shift *> *,
                                                 const char *);
SOAP_FMAC1 std::vector<ns1__shift *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__shift(struct soap *, int,
                                                          const char *,
                                                          const char *,
                                                          size_t *);

inline std::vector<ns1__shift *> *
soap_new_std__vectorTemplateOfPointerTons1__shift(struct soap *soap,
                                                  int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__shift(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__shift(
    struct soap *soap, std::vector<ns1__shift *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__shift(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__sample
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__sample (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__sample(
    struct soap *, std::vector<ns1__sample *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__sample(
    struct soap *, const std::vector<ns1__sample *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__sample(
    struct soap *, const char *, int, const std::vector<ns1__sample *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__sample *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__sample(struct soap *, const char *,
                                                  std::vector<ns1__sample *> *,
                                                  const char *);
SOAP_FMAC1 std::vector<ns1__sample *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__sample(struct soap *, int,
                                                           const char *,
                                                           const char *,
                                                           size_t *);

inline std::vector<ns1__sample *> *
soap_new_std__vectorTemplateOfPointerTons1__sample(struct soap *soap,
                                                   int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__sample(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__sample(
    struct soap *soap, std::vector<ns1__sample *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__sample(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__publication
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__publication (194)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__publication(
    struct soap *, std::vector<ns1__publication *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__publication(
    struct soap *, const std::vector<ns1__publication *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__publication(
    struct soap *, const char *, int, const std::vector<ns1__publication *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__publication *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__publication(
    struct soap *, const char *, std::vector<ns1__publication *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__publication *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__publication(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__publication *> *
soap_new_std__vectorTemplateOfPointerTons1__publication(struct soap *soap,
                                                        int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__publication(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__publication(
    struct soap *soap, std::vector<ns1__publication *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__publication(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationParameter
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationParameter \
  (193)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *, std::vector<ns1__investigationParameter *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *, const std::vector<ns1__investigationParameter *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *, const char *, int,
    const std::vector<ns1__investigationParameter *> *, const char *);
SOAP_FMAC3 std::vector<ns1__investigationParameter *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *, const char *, std::vector<ns1__investigationParameter *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__investigationParameter *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__investigationParameter *> *
soap_new_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__investigationParameter(
      soap, n, nullptr, nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *soap, std::vector<ns1__investigationParameter *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__investigationParameter(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__keyword
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__keyword (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__keyword(
    struct soap *, std::vector<ns1__keyword *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__keyword(
    struct soap *, const std::vector<ns1__keyword *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__keyword(
    struct soap *, const char *, int, const std::vector<ns1__keyword *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__keyword *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__keyword(
    struct soap *, const char *, std::vector<ns1__keyword *> *, const char *);
SOAP_FMAC1 std::vector<ns1__keyword *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__keyword(struct soap *, int,
                                                            const char *,
                                                            const char *,
                                                            size_t *);

inline std::vector<ns1__keyword *> *
soap_new_std__vectorTemplateOfPointerTons1__keyword(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__keyword(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__keyword(
    struct soap *soap, std::vector<ns1__keyword *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__keyword(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationUser
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationUser   \
  (190)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__investigationUser(
    struct soap *, std::vector<ns1__investigationUser *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__investigationUser(
    struct soap *, const std::vector<ns1__investigationUser *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__investigationUser(
    struct soap *, const char *, int,
    const std::vector<ns1__investigationUser *> *, const char *);
SOAP_FMAC3 std::vector<ns1__investigationUser *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__investigationUser(
    struct soap *, const char *, std::vector<ns1__investigationUser *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__investigationUser *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__investigationUser(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__investigationUser *> *
soap_new_std__vectorTemplateOfPointerTons1__investigationUser(struct soap *soap,
                                                              int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__investigationUser(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__investigationUser(
    struct soap *soap, std::vector<ns1__investigationUser *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__investigationUser(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationInstrument
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__investigationInstrument \
  (189)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *, std::vector<ns1__investigationInstrument *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *, const std::vector<ns1__investigationInstrument *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *, const char *, int,
    const std::vector<ns1__investigationInstrument *> *, const char *);
SOAP_FMAC3 std::vector<ns1__investigationInstrument *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *, const char *, std::vector<ns1__investigationInstrument *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__investigationInstrument *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__investigationInstrument *> *
soap_new_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__investigationInstrument(
      soap, n, nullptr, nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *soap, std::vector<ns1__investigationInstrument *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__investigationInstrument(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataset
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataset (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__dataset(
    struct soap *, std::vector<ns1__dataset *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__dataset(
    struct soap *, const std::vector<ns1__dataset *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__dataset(
    struct soap *, const char *, int, const std::vector<ns1__dataset *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__dataset *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__dataset(
    struct soap *, const char *, std::vector<ns1__dataset *> *, const char *);
SOAP_FMAC1 std::vector<ns1__dataset *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__dataset(struct soap *, int,
                                                            const char *,
                                                            const char *,
                                                            size_t *);

inline std::vector<ns1__dataset *> *
soap_new_std__vectorTemplateOfPointerTons1__dataset(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__dataset(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__dataset(
    struct soap *soap, std::vector<ns1__dataset *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__dataset(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datasetParameter
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datasetParameter    \
  (186)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__datasetParameter(
    struct soap *, std::vector<ns1__datasetParameter *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__datasetParameter(
    struct soap *, const std::vector<ns1__datasetParameter *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__datasetParameter(
    struct soap *, const char *, int,
    const std::vector<ns1__datasetParameter *> *, const char *);
SOAP_FMAC3 std::vector<ns1__datasetParameter *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__datasetParameter(
    struct soap *, const char *, std::vector<ns1__datasetParameter *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__datasetParameter *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__datasetParameter(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__datasetParameter *> *
soap_new_std__vectorTemplateOfPointerTons1__datasetParameter(struct soap *soap,
                                                             int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__datasetParameter(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__datasetParameter(
    struct soap *soap, std::vector<ns1__datasetParameter *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__datasetParameter(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datafile
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datafile (185)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__datafile(
    struct soap *, std::vector<ns1__datafile *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__datafile(
    struct soap *, const std::vector<ns1__datafile *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__datafile(
    struct soap *, const char *, int, const std::vector<ns1__datafile *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__datafile *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__datafile(
    struct soap *, const char *, std::vector<ns1__datafile *> *, const char *);
SOAP_FMAC1 std::vector<ns1__datafile *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__datafile(struct soap *, int,
                                                             const char *,
                                                             const char *,
                                                             size_t *);

inline std::vector<ns1__datafile *> *
soap_new_std__vectorTemplateOfPointerTons1__datafile(struct soap *soap,
                                                     int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__datafile(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__datafile(
    struct soap *soap, std::vector<ns1__datafile *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__datafile(struct soap *, int, int,
                                                      void *, size_t,
                                                      const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataCollectionParameter
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataCollectionParameter \
  (184)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *, std::vector<ns1__dataCollectionParameter *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *, const std::vector<ns1__dataCollectionParameter *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *, const char *, int,
    const std::vector<ns1__dataCollectionParameter *> *, const char *);
SOAP_FMAC3 std::vector<ns1__dataCollectionParameter *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *, const char *, std::vector<ns1__dataCollectionParameter *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__dataCollectionParameter *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__dataCollectionParameter *> *
soap_new_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
      soap, n, nullptr, nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *soap, std::vector<ns1__dataCollectionParameter *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__dataCollectionParameter(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__job
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__job (183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__job(
    struct soap *, std::vector<ns1__job *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__job(
    struct soap *, const std::vector<ns1__job *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__job(
    struct soap *, const char *, int, const std::vector<ns1__job *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__job *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__job(struct soap *, const char *,
                                               std::vector<ns1__job *> *,
                                               const char *);
SOAP_FMAC1 std::vector<ns1__job *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__job(struct soap *, int,
                                                        const char *,
                                                        const char *, size_t *);

inline std::vector<ns1__job *> *
soap_new_std__vectorTemplateOfPointerTons1__job(struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__job(
      soap, n, nullptr, nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfPointerTons1__job(struct soap *soap,
                                                   std::vector<ns1__job *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__job(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataCollectionDataset
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataCollectionDataset \
  (182)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *, std::vector<ns1__dataCollectionDataset *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *, const std::vector<ns1__dataCollectionDataset *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *, const char *, int,
    const std::vector<ns1__dataCollectionDataset *> *, const char *);
SOAP_FMAC3 std::vector<ns1__dataCollectionDataset *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *, const char *, std::vector<ns1__dataCollectionDataset *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__dataCollectionDataset *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__dataCollectionDataset *> *
soap_new_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
      soap, n, nullptr, nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *soap, std::vector<ns1__dataCollectionDataset *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__dataCollectionDataset(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datafileParameter
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__datafileParameter   \
  (181)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__datafileParameter(
    struct soap *, std::vector<ns1__datafileParameter *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__datafileParameter(
    struct soap *, const std::vector<ns1__datafileParameter *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__datafileParameter(
    struct soap *, const char *, int,
    const std::vector<ns1__datafileParameter *> *, const char *);
SOAP_FMAC3 std::vector<ns1__datafileParameter *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__datafileParameter(
    struct soap *, const char *, std::vector<ns1__datafileParameter *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__datafileParameter *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__datafileParameter(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__datafileParameter *> *
soap_new_std__vectorTemplateOfPointerTons1__datafileParameter(struct soap *soap,
                                                              int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__datafileParameter(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__datafileParameter(
    struct soap *soap, std::vector<ns1__datafileParameter *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__datafileParameter(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__relatedDatafile
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__relatedDatafile (180)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__relatedDatafile(
    struct soap *, std::vector<ns1__relatedDatafile *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__relatedDatafile(
    struct soap *, const std::vector<ns1__relatedDatafile *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__relatedDatafile(
    struct soap *, const char *, int,
    const std::vector<ns1__relatedDatafile *> *, const char *);
SOAP_FMAC3 std::vector<ns1__relatedDatafile *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__relatedDatafile(
    struct soap *, const char *, std::vector<ns1__relatedDatafile *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__relatedDatafile *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__relatedDatafile(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__relatedDatafile *> *
soap_new_std__vectorTemplateOfPointerTons1__relatedDatafile(struct soap *soap,
                                                            int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__relatedDatafile(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__relatedDatafile(
    struct soap *soap, std::vector<ns1__relatedDatafile *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__relatedDatafile(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataCollectionDatafile
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__dataCollectionDatafile \
  (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *, std::vector<ns1__dataCollectionDatafile *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *, const std::vector<ns1__dataCollectionDatafile *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *, const char *, int,
    const std::vector<ns1__dataCollectionDatafile *> *, const char *);
SOAP_FMAC3 std::vector<ns1__dataCollectionDatafile *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *, const char *, std::vector<ns1__dataCollectionDatafile *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__dataCollectionDatafile *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__dataCollectionDatafile *> *
soap_new_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
      soap, n, nullptr, nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *soap, std::vector<ns1__dataCollectionDatafile *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__dataCollectionDatafile(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerToxsd__anyType
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerToxsd__anyType (177)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerToxsd__anyType(
    struct soap *, std::vector<xsd__anyType *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerToxsd__anyType(
    struct soap *, const std::vector<xsd__anyType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToxsd__anyType(
    struct soap *, const char *, int, const std::vector<xsd__anyType *> *,
    const char *);
SOAP_FMAC3 std::vector<xsd__anyType *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerToxsd__anyType(
    struct soap *, const char *, std::vector<xsd__anyType *> *, const char *);
SOAP_FMAC1 std::vector<xsd__anyType *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerToxsd__anyType(struct soap *, int,
                                                            const char *,
                                                            const char *,
                                                            size_t *);

inline std::vector<xsd__anyType *> *
soap_new_std__vectorTemplateOfPointerToxsd__anyType(struct soap *soap,
                                                    int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerToxsd__anyType(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerToxsd__anyType(
    struct soap *soap, std::vector<xsd__anyType *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToxsd__anyType(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__entityField
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__entityField (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__entityField(
    struct soap *, std::vector<ns1__entityField *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__entityField(
    struct soap *, const std::vector<ns1__entityField *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__entityField(
    struct soap *, const char *, int, const std::vector<ns1__entityField *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__entityField *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__entityField(
    struct soap *, const char *, std::vector<ns1__entityField *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__entityField *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__entityField(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__entityField *> *
soap_new_std__vectorTemplateOfPointerTons1__entityField(struct soap *soap,
                                                        int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__entityField(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__entityField(
    struct soap *soap, std::vector<ns1__entityField *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__entityField(struct soap *, int,
                                                         int, void *, size_t,
                                                         const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__constraint
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__constraint (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__constraint(
    struct soap *, std::vector<ns1__constraint *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__constraint(
    struct soap *, const std::vector<ns1__constraint *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__constraint(
    struct soap *, const char *, int, const std::vector<ns1__constraint *> *,
    const char *);
SOAP_FMAC3 std::vector<ns1__constraint *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__constraint(
    struct soap *, const char *, std::vector<ns1__constraint *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__constraint *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__constraint(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__constraint *> *
soap_new_std__vectorTemplateOfPointerTons1__constraint(struct soap *soap,
                                                       int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__constraint(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__constraint(
    struct soap *soap, std::vector<ns1__constraint *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__constraint(struct soap *, int, int,
                                                        void *, size_t,
                                                        const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOf_ns1__login_credentials_entry
#define SOAP_TYPE_ICat4_std__vectorTemplateOf_ns1__login_credentials_entry (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, std::vector<_ns1__login_credentials_entry> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, const std::vector<_ns1__login_credentials_entry> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, const char *, int,
    const std::vector<_ns1__login_credentials_entry> *, const char *);
SOAP_FMAC3 std::vector<_ns1__login_credentials_entry> *SOAP_FMAC4
soap_in_std__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, const char *, std::vector<_ns1__login_credentials_entry> *,
    const char *);
SOAP_FMAC1 std::vector<_ns1__login_credentials_entry> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<_ns1__login_credentials_entry> *
soap_new_std__vectorTemplateOf_ns1__login_credentials_entry(struct soap *soap,
                                                            int n = -1) {
  return soap_instantiate_std__vectorTemplateOf_ns1__login_credentials_entry(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *soap, std::vector<_ns1__login_credentials_entry> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOf_ns1__login_credentials_entry(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfstd__string
#define SOAP_TYPE_ICat4_std__vectorTemplateOfstd__string (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(
    struct soap *, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(
    struct soap *, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(
    struct soap *, const char *, int, const std::vector<std::string> *,
    const char *);
SOAP_FMAC3 std::vector<std::string> *SOAP_FMAC4
soap_in_std__vectorTemplateOfstd__string(struct soap *, const char *,
                                         std::vector<std::string> *,
                                         const char *);
SOAP_FMAC1 std::vector<std::string> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfstd__string(struct soap *, int,
                                                  const char *, const char *,
                                                  size_t *);

inline std::vector<std::string> *
soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, nullptr,
                                                           nullptr, nullptr);
}

inline void
soap_delete_std__vectorTemplateOfstd__string(struct soap *soap,
                                             std::vector<std::string> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfLONG64
#define SOAP_TYPE_ICat4_std__vectorTemplateOfLONG64 (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfLONG64(struct soap *, std::vector<LONG64> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfLONG64(
    struct soap *, const std::vector<LONG64> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfLONG64(struct soap *, const char *, int,
                                     const std::vector<LONG64> *, const char *);
SOAP_FMAC3 std::vector<LONG64> *SOAP_FMAC4 soap_in_std__vectorTemplateOfLONG64(
    struct soap *, const char *, std::vector<LONG64> *, const char *);
SOAP_FMAC1 std::vector<LONG64> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfLONG64(struct soap *, int, const char *,
                                             const char *, size_t *);

inline std::vector<LONG64> *
soap_new_std__vectorTemplateOfLONG64(struct soap *soap, int n = -1) {
  return soap_instantiate_std__vectorTemplateOfLONG64(soap, n, nullptr, nullptr,
                                                      nullptr);
}

inline void soap_delete_std__vectorTemplateOfLONG64(struct soap *soap,
                                                    std::vector<LONG64> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfLONG64(
    struct soap *, int, int, void *, size_t, const void *, size_t);

#ifndef SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__entityBaseBean
#define SOAP_TYPE_ICat4_std__vectorTemplateOfPointerTons1__entityBaseBean (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4
soap_default_std__vectorTemplateOfPointerTons1__entityBaseBean(
    struct soap *, std::vector<ns1__entityBaseBean *> *);
SOAP_FMAC3 void SOAP_FMAC4
soap_serialize_std__vectorTemplateOfPointerTons1__entityBaseBean(
    struct soap *, const std::vector<ns1__entityBaseBean *> *);
SOAP_FMAC3 int SOAP_FMAC4
soap_out_std__vectorTemplateOfPointerTons1__entityBaseBean(
    struct soap *, const char *, int,
    const std::vector<ns1__entityBaseBean *> *, const char *);
SOAP_FMAC3 std::vector<ns1__entityBaseBean *> *SOAP_FMAC4
soap_in_std__vectorTemplateOfPointerTons1__entityBaseBean(
    struct soap *, const char *, std::vector<ns1__entityBaseBean *> *,
    const char *);
SOAP_FMAC1 std::vector<ns1__entityBaseBean *> *SOAP_FMAC2
soap_instantiate_std__vectorTemplateOfPointerTons1__entityBaseBean(
    struct soap *, int, const char *, const char *, size_t *);

inline std::vector<ns1__entityBaseBean *> *
soap_new_std__vectorTemplateOfPointerTons1__entityBaseBean(struct soap *soap,
                                                           int n = -1) {
  return soap_instantiate_std__vectorTemplateOfPointerTons1__entityBaseBean(
      soap, n, nullptr, nullptr, nullptr);
}

inline void soap_delete_std__vectorTemplateOfPointerTons1__entityBaseBean(
    struct soap *soap, std::vector<ns1__entityBaseBean *> *p) {
  soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4
soap_copy_std__vectorTemplateOfPointerTons1__entityBaseBean(struct soap *, int,
                                                            int, void *, size_t,
                                                            const void *,
                                                            size_t);

} // namespace ICat4

#endif

/* End of ICat4H.h */
