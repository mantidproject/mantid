/*WIKI* 

This algorithm is able to generate one or a series of events filters according to user's requirement.  These filters are stored in a [[SplittersWorkspace]] class object, which will be fed into algorithm [[FilterEvents]].  Each filter has an individual value of workspace index. 

This algorithm is one way to generate one filter or a series of filter, while it is designed for general-purpose as much as possible.  Combined with [[FilterEvents]], it will replace 
 * [[FilterByTime]]
 * [[FilterByLogValue]]

Moreover, the time resolution of these two algorithms is microseconds, i.e., the wall time of an (neutron) event.  While the original [[FilterByTime]] and [[FilterByLogValue]] are of the resolution of pulse time.

==== Functionalities ====  
Here are the types of event filters (i.e., [[SplittersWorkspace]]) that can be generated by this algorithm:
* A filter for one time interval.  

* A series of filters for multiple continuous time intervals, which have the same length of period.  Each of them has an individual workspace index associated.  These workspace indices are incremented by 1 from 0 along with their orders in time. 

* A filter containing one or multiple time intervals according to a specified log value.  Any log value of the time that falls into the selected time intervals is equal or within the tolerance of a user specified value. 

* A series filters containing one or multiple time intervals according to specified log values incremented by a constant value.  Any log value of the time that falls into the selected time intervals is equal or within the tolerance of the log value as v_0 + n x delta_v +/- tolerance_v.

==== Parameter: ''Centre'' ====
The input Boolean parameter ''centre'' is for filtering by log value(s).  If option ''centre'' is taken, then for each interval, 
 * starting time = log_time - tolerance_time;
 * stopping time = log_time - tolerance_time;
It is a shift to left.

==== About how log value is recorded ====
SNS DAS records log values upon its changing.  The frequency of log sampling is significantly faster than change of the log, i.e., sample environment devices.  Therefore, it is reasonable to assume that all the log value changes as step functions.

The option to do interpolation is not supported at this moment.


*WIKI*/
//----------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------

#include "MantidAlgorithms/GenerateEventsFilter.h"
#include "MantidKernel/System.h"
#include "MantidKernel/ListValidator.h"
#include "MantidAPI/TableRow.h"
#include "MantidAPI/WorkspaceFactory.h"
#include "MantidAPI/WorkspaceProperty.h"
#include "MantidAPI/Column.h"

using namespace Mantid;
using namespace Mantid::Kernel;
using namespace Mantid::API;

using namespace std;

namespace Mantid
{
namespace Algorithms
{
  DECLARE_ALGORITHM(GenerateEventsFilter)

  //----------------------------------------------------------------------------------------------
  /** Constructor
   */
  GenerateEventsFilter::GenerateEventsFilter()
  {
  }
    
  //----------------------------------------------------------------------------------------------
  /** Destructor
   */
  GenerateEventsFilter::~GenerateEventsFilter()
  {
  }
  
  void GenerateEventsFilter::initDocs()
  {
    this->setWikiSummary("Generate one or a set of event filters according to time or specified log's value.");
  }

  //----------------------------------------------------------------------------------------------
  /** Declare input
   */
  void GenerateEventsFilter::init()
  {
    // 1. Input/Output Workspaces
    declareProperty(
      new API::WorkspaceProperty<DataObjects::EventWorkspace>("InputWorkspace", "Anonymous", Direction::Input),
      "An input event workspace" );

    declareProperty(
      new API::WorkspaceProperty<DataObjects::SplittersWorkspace>("OutputWorkspace", "Splitters", Direction::Output),
      "The name to use for the output SplittersWorkspace object, i.e., the filter." );

    declareProperty(new API::WorkspaceProperty<API::ITableWorkspace>("InformationWorkspace", "SplitterInfo",
                                                                     Direction::Output),
                    "Optional output for the information of each splitter workspace index");

    // 2. Time (general)
    declareProperty("StartTime", "0.0",
        "The start time, in (a) seconds, (b) nanoseconds or (c) percentage of total run time\n"
        "since the start of the run. OR (d) absolute time. \n"
        "Events before this time are filtered out.");

    declareProperty("StopTime", "-1.0",
        "The stop time, in (2) seconds, (b) nanoseconds or (c) percentage of total run time\n"
        "since the start of the run. OR (d) absolute time. \n"
        "Events at or after this time are filtered out.");

    // 3. Filter by time (only)
    declareProperty("TimeInterval", -1.0,
        "Length of the time splices if filtered in time only.");

    std::vector<std::string> timeoptions;
    timeoptions.push_back("Seconds");
    timeoptions.push_back("Nanoseconds");
    timeoptions.push_back("Percent");
    declareProperty("UnitOfTime", "Seconds", boost::make_shared<Kernel::StringListValidator>(timeoptions),
                    "StartTime, StopTime and DeltaTime can be given in various unit."
                    "The unit can be second or nanosecond from run start time."
                    "They can also be defined as percentage of total run time.");

    // 4. Filter by log value (only)
    declareProperty("LogName", "",
        "Name of the sample log to use to filter.\n"
        "For example, the pulse charge is recorded in 'ProtonCharge'.");

    declareProperty("MinimumLogValue", EMPTY_DBL(), "Minimum log value for which to keep events.");

    declareProperty("MaximumLogValue", EMPTY_DBL(), "Maximum log value for which to keep events.");

    declareProperty("LogValueInterval", -1.0,
        "Delta of log value to be sliced into from min log value and max log value.\n"
        "If not given, then only value ");

    std::vector<std::string> filteroptions;
    filteroptions.push_back("Both");
    filteroptions.push_back("Increase");
    filteroptions.push_back("Decrease");
    declareProperty("FilterLogValueByChangingDirection", "Both",
                    boost::make_shared<Kernel::StringListValidator>(filteroptions),
                    "d(log value)/dt can be positive and negative.  They can be put to different splitters.");

    declareProperty("TimeTolerance", 0.0,
        "Tolerance in time for the event times to keep. It is used in the case to filter by single value.");

    vector<string> logboundoptions;
    logboundoptions.push_back("Centre");
    logboundoptions.push_back("Left");
    logboundoptions.push_back("Other");
    auto logvalidator = boost::make_shared<StringListValidator>(logboundoptions);
    declareProperty("LogBoundary", "Centre", logvalidator,
                    "How to treat log values as being measured in the centre of time.");

    declareProperty("LogValueTolerance", EMPTY_DBL(),
        "Tolerance of the log value to be included in filter.  It is used in the case to filter by multiple values.");

    declareProperty("LogValueTimeSections", 1,
        "In one log value interval, it can be further divided into sections in even time slice.");

    // 5. Output workspaces' title and name
    declareProperty("TitleOfSplitters", "",
                    "Title of output splitters workspace and information workspace.");

    return;
  }


  //----------------------------------------------------------------------------------------------
  /** Main execute body
   */
  void GenerateEventsFilter::exec()
  {
    // 1. Get general input and output
    m_dataWS = this->getProperty("InputWorkspace");
    if (!m_dataWS)
    {
      std::stringstream errss;
      errss << "GenerateEventsFilter does not get input workspace as an EventWorkspace.";
      g_log.error(errss.str());
      throw std::runtime_error(errss.str());
    }
    else
    {
      g_log.debug() << "DB9441 GenerateEventsFilter() Input Event WS = " << m_dataWS->getName()
                    << ", Events = " << m_dataWS->getNumberEvents() << std::endl;
    }

    Kernel::DateAndTime runstart = m_dataWS->run().startTime();
    // (m_dataWS->run().getProperty("run_start")->value());
    g_log.debug() << "DB9441 Run Start = " << runstart << " / " << runstart.totalNanoseconds()
                  << std::endl;

    std::string title = getProperty("TitleOfSplitters");
    if (title.size() == 0)
    {
      // Using default
      title = "Splitters";
    }

    // Output Splitters workspace
    m_splitWS =  boost::shared_ptr<DataObjects::SplittersWorkspace>(new DataObjects::SplittersWorkspace());
    m_splitWS->setTitle(title);

    // mFilterInfoWS = boost::shared_ptr<DataObjects::TableWorkspace>(new DataObjects::TableWorkspace);
    m_filterInfoWS = API::WorkspaceFactory::Instance().createTable("TableWorkspace");
    m_filterInfoWS->setTitle(title);

    m_filterInfoWS->addColumn("int", "workspacegroup");
    m_filterInfoWS->addColumn("str", "title");

    // 2. Get Time
    processInputTime(runstart);

    double prog = 0.1;
    progress(prog);

    // 3. Get Log
    std::string logname = this->getProperty("LogName");
    if (logname.empty())
    {
      // a) Set filter by time only
      setFilterByTimeOnly();
    }
    else
    {
      // b) Set filter by time and log
      setFilterByLogValue(logname);
    }

    this->setProperty("OutputWorkspace", m_splitWS);
    this->setProperty("InformationWorkspace", m_filterInfoWS);

    return;
  }

  //----------------------------------------------------------------------------------------------
  /** Process the input for time.  A smart but complicated default rule
    * @param runstarttime :: run start time in sample log
   */
  void GenerateEventsFilter::processInputTime(Kernel::DateAndTime runstarttime)
  {
    // 1. Get input
    std::string s_inpt0 = this->getProperty("StartTime");
    std::string s_inptf = this->getProperty("StopTime");

    // 2. Check if input are in double or string
    bool instringformat = true;
    if (s_inpt0.find(':') == std::string::npos)
    {
      instringformat = false;
    }

    if (instringformat)
    {
      // 1. In absolute time ISO format
      Kernel::DateAndTime t0(s_inpt0);
      Kernel::DateAndTime t1(s_inptf);
      mStartTime = t0;
      mStopTime = t1;
    }
    else
    {
      // 2. In double relative time format
      std::string timeunit = this->getProperty("UnitOfTime");
      double inpt0 = atof(s_inpt0.c_str());
      double inptf = atof(s_inptf.c_str());

      if (inpt0 < 0)
      {
        throw std::invalid_argument("Input StartTime cannot be negative!");
      }

      // 2. Find maximum time by proton charge
      // FIXME Use this simple method may miss the events in the last pulse
      Kernel::TimeSeriesProperty<double>* protonchargelog =
          dynamic_cast<Kernel::TimeSeriesProperty<double> *>(m_dataWS->run().getProperty("proton_charge"));
      Kernel::DateAndTime runend = protonchargelog->lastTime();

      // 3. Set up time-convert unit
      m_timeUnitConvertFactor = 1.0;
      if (timeunit.compare("Seconds") == 0)
      {
        // a) In unit of seconds
        m_timeUnitConvertFactor = 1.0E9;
      }
      else if (timeunit.compare("Nanoseconds") == 0)
      {
        // b) In unit of nano-seconds
        m_timeUnitConvertFactor = 1.0;
      }
      else if (timeunit.compare("Percent") == 0)
      {
        // c) In unit of percent of total run time
        int64_t runtime_ns = runend.totalNanoseconds()-runstarttime.totalNanoseconds();
        double runtimed_ns = static_cast<double>(runtime_ns);
        m_timeUnitConvertFactor = 0.01*runtimed_ns;
      }
      else
      {
        // d) Not defined
        g_log.error() << "TimeType " << timeunit << " is not supported!" << std::endl;
        throw std::runtime_error("Input TimeType is not supported");
      }

      // 4. Process second round
      int64_t t0_ns = runstarttime.totalNanoseconds() + static_cast<int64_t>(inpt0*m_timeUnitConvertFactor);
      Kernel::DateAndTime tmpt0(t0_ns);
      mStartTime = tmpt0;

      if (inptf < inpt0)
      {
        mStopTime = runend;
      }
      else
      {
        int64_t tf_ns = runstarttime.totalNanoseconds()+static_cast<int64_t>(inptf*m_timeUnitConvertFactor);
        Kernel::DateAndTime tmptf(tf_ns);
        mStopTime = tmptf;
      }
    }

    g_log.information() << "Filter: StartTime = " << mStartTime << ", StopTime = " << mStopTime << std::endl;

    return;
  }

  //----------------------------------------------------------------------------------------------
  /** Set splitters by time value / interval only
   */
  void GenerateEventsFilter::setFilterByTimeOnly()
  {
    double timeinterval = this->getProperty("TimeInterval");

    // Progress
    int64_t totaltime = mStopTime.totalNanoseconds()-mStartTime.totalNanoseconds();
    int64_t timeslot = 0;

    if (timeinterval <= 0.0)
    {
      int wsindex = 0;
      // 1. Default and thus just one interval
      Kernel::SplittingInterval ti(mStartTime, mStopTime, 0);
      m_splitWS->addSplitter(ti);

      API::TableRow row = m_filterInfoWS->appendRow();
      std::stringstream ss;
      ss << "Time Interval From " << mStartTime << " to " << mStopTime;
      row << wsindex << ss.str();
    }
    else
    {
      // 2. Use N time interval
      int64_t deltatime_ns = static_cast<int64_t>(timeinterval*m_timeUnitConvertFactor);

      int64_t curtime_ns = mStartTime.totalNanoseconds();
      int wsindex = 0;
      while (curtime_ns < mStopTime.totalNanoseconds())
      {
        // a) Calculate next.time
        int64_t nexttime_ns = curtime_ns + deltatime_ns;
        if (nexttime_ns > mStopTime.totalNanoseconds())
          nexttime_ns = mStopTime.totalNanoseconds();

        // b) Create splitter
        Kernel::DateAndTime t0(curtime_ns);
        Kernel::DateAndTime tf(nexttime_ns);
        Kernel::SplittingInterval spiv(t0, tf, wsindex);
        m_splitWS->addSplitter(spiv);

        // c) Information
        API::TableRow row = m_filterInfoWS->appendRow();
        std::stringstream ss;
        ss << "Time Interval From " << t0 << " to " << tf;
        row << wsindex << ss.str();

        // d) Update loop variable
        curtime_ns = nexttime_ns;
        wsindex ++;

        // e) Update progress
        int64_t newtimeslot = (curtime_ns-mStartTime.totalNanoseconds())*90/totaltime;
        if (newtimeslot > timeslot)
        {
          // There is change and update progress
          timeslot = newtimeslot;
          double prog = 0.1+double(timeslot)/100.0;
          progress(prog);
        }

      } // END-WHILE

    } // END-IF-ELSE

    return;
  }

  //----------------------------------------------------------------------------------------------
  /** Generate filters by log values.
    * @param logname :: name of the log to filter with
    */
  void GenerateEventsFilter::setFilterByLogValue(std::string logname)
  {
    // 1. Get hold on sample log to filter with
    m_dblLog = dynamic_cast<TimeSeriesProperty<double>* >(m_dataWS->run().getProperty(logname));
    m_intLog = dynamic_cast<TimeSeriesProperty<int>* > (m_dataWS->run().getProperty(logname));
    if (!m_dblLog && !m_intLog)
    {
      stringstream errmsg;
      errmsg << "Log " << logname << " does not exist or is not TimeSeriesProperty in double or integer.";
      g_log.error(errmsg.str());
      throw runtime_error(errmsg.str());
    }

    //  Clear duplicate value
    if (m_dblLog)
      m_dblLog->eliminateDuplicates();
    else
      m_intLog->eliminateDuplicates();

    // 2. Process input properties related to filter with log value
    double minvalue = this->getProperty("MinimumLogValue");
    double maxvalue = this->getProperty("MaximumLogValue");
    double deltaValue = this->getProperty("LogValueInterval");

    // 3. Log value change direction
    std::string filterdirection = getProperty("FilterLogValueByChangingDirection");
    bool filterIncrease;
    bool filterDecrease;
    if (filterdirection.compare("Both") == 0)
    {
      filterIncrease = true;
      filterDecrease = true;
    }
    else if (filterdirection.compare("Increase") == 0)
    {
      filterIncrease = true;
      filterDecrease = false;
    }
    else
    {
      filterIncrease = false;
      filterDecrease = true;
    }

    bool toProcessSingleValueFilter = false;
    if (deltaValue <= 0)
    {
      toProcessSingleValueFilter = true;
    }

    // 4. Log boundary
    string logboundary = getProperty("LogBoundary");
    if (logboundary.compare("Centre"))
      m_logAtCentre = true;
    else
      m_logAtCentre = false;

    m_logTimeTolerance = getProperty("TimeTolerance");

    // 5. Generate filters
    if (m_dblLog)
    {
      // Process min/max
      if (minvalue == EMPTY_DBL())
      {
        minvalue = m_dblLog->minValue();
      }
      if (maxvalue == EMPTY_DBL())
      {
        maxvalue = m_dblLog->maxValue();
      }

      if (minvalue > maxvalue)
      {
        stringstream errmsg;
        errmsg << "Fatal Error: Input minimum log value " << minvalue
               << " is larger than maximum log value " << maxvalue;
        g_log.error(errmsg.str());
        throw runtime_error(errmsg.str());
      }

      // Filter double value log
      if (toProcessSingleValueFilter)
      {
        // a) Generate a filter for a single log value
        processSingleValueFilter(minvalue, maxvalue, filterIncrease, filterDecrease);
      }
      else
      {
        // b) Generate filters for a series of log value
        processMultipleValueFilters(minvalue, maxvalue, filterIncrease, filterDecrease);
      }
    }
    else
    {
      // Filter integer log
      int minvaluei, maxvaluei;
      if (minvalue == EMPTY_DBL())
        minvaluei = m_intLog->minValue();
      else
        minvaluei = static_cast<int>(minvalue+0.5);

      if (maxvalue == EMPTY_DBL())
        maxvaluei = m_intLog->maxValue();
      else
        maxvaluei = static_cast<int>(maxvalue+0.5);

      if (minvalue > maxvalue)
      {
        stringstream errmsg;
        errmsg << "Fatal Error: Input minimum log value " << minvalue
               << " is larger than maximum log value " << maxvalue;
        g_log.error(errmsg.str());
        throw runtime_error(errmsg.str());
      }

      TimeSplitterType splitters;
      DateAndTime runendtime = m_dataWS->run().endTime();
      processIntegerValueFilter(splitters, minvaluei, maxvaluei, filterIncrease, filterDecrease, runendtime);

      size_t numsplits = splitters.size();
      for (size_t i = 0; i < numsplits; ++i)
      {
        SplittingInterval split = splitters[i];
        m_splitWS->addSplitter(split);
      }
    }

    g_log.debug() << "[GenearteEventFilter DB1248] minimum value = " << minvalue <<  ", "
                  << "maximum value = " << maxvalue << ".\n";

    return;
  }

  //----------------------------------------------------------------------------------------------
  /** Generate filters by single log value
    * @param minvalue :: minimum value of the allowed log value;
    * @param maxvalue :: maximum value of the allowed log value;
    * @param filterincrease :: if true, log value in the increasing curve should be included;
    * @param filterdecrease :: if true, log value in the decreasing curve should be included;
    */
  void GenerateEventsFilter::processSingleValueFilter(double minvalue, double maxvalue,
                                                      bool filterincrease, bool filterdecrease)
  {
    // 1. Validity & value
    double timetolerance = this->getProperty("TimeTolerance");
    int64_t timetolerance_ns = static_cast<int64_t>(timetolerance*m_timeUnitConvertFactor);

    std::string logboundary = this->getProperty("LogBoundary");
    transform(logboundary.begin(), logboundary.end(), logboundary.begin(), ::tolower);

    // 2. Generate filter
    std::vector<Kernel::SplittingInterval> splitters;
    int wsindex = 0;
    makeFilterByValue(splitters, minvalue, maxvalue, static_cast<double>(timetolerance_ns)*1.0E-9,
        logboundary.compare("centre")==0,
        filterincrease, filterdecrease, mStartTime, mStopTime, wsindex);

    // 3. Add to output
    for (size_t isp = 0; isp < splitters.size(); isp ++)
    {
      m_splitWS->addSplitter(splitters[isp]);
    }

    // 4. Add information
    API::TableRow row = m_filterInfoWS->appendRow();
    std::stringstream ss;
    ss << "Log " << m_dblLog->name() << " From " << minvalue << " To " << maxvalue << "  Value-change-direction ";
    if (filterincrease && filterdecrease)
    {
      ss << " both ";
    }
    else if (filterincrease)
    {
      ss << " increase";
    }
    else
    {
      ss << " decrease";
    }
    row << 0 << ss.str();

    return;
  }

  //----------------------------------------------------------------------------------------------
  /** Generate filters from multiple values
    * @param minvalue :: minimum value of the allowed log value;
    * @param maxvalue :: maximum value of the allowed log value;
    * @param filterincrease :: if true, log value in the increasing curve should be included;
    * @param filterdecrease :: if true, log value in the decreasing curve should be included;
   */
  void GenerateEventsFilter::processMultipleValueFilters(double minvalue, double maxvalue,
                                                         bool filterincrease,
                                                         bool filterdecrease)
  {
    // Read more input
    double valueinterval = this->getProperty("LogValueInterval");
    if (valueinterval <= 0)
      throw std::invalid_argument("Multiple values filter must have LogValueInterval larger than ZERO.");
    double valuetolerance = this->getProperty("LogValueTolerance");

    if (valuetolerance == EMPTY_DBL())
      valuetolerance = 0.5*valueinterval;
    else if (valuetolerance < 0.0)
      throw std::runtime_error("LogValueTolerance cannot be less than zero.");

    // Create log value interval (low/up boundary) list and split information workspace
    std::map<size_t, int> indexwsindexmap;
    std::vector<double> logvalueranges;
    int wsindex = 0;
    size_t index = 0;

    double curvalue = minvalue;
    while (curvalue-valuetolerance < maxvalue)
    {
      indexwsindexmap.insert(std::make_pair(index, wsindex));

      // Log interval/value boundary
      double lowbound = curvalue - valuetolerance ;
      double upbound = curvalue + valueinterval - valuetolerance;
      logvalueranges.push_back(lowbound);
      logvalueranges.push_back(upbound);

      // Workgroup information
      std::stringstream ss;
      ss << "Log " << m_dblLog->name() << " From " << lowbound << " To " << upbound << "  Value-change-direction ";
      if (filterincrease && filterdecrease)
      {
        ss << " both ";
      }
      else if (filterincrease)
      {
        ss << " increase";
      }
      else
      {
        ss << " decrease";
      };
      API::TableRow newrow = m_filterInfoWS->appendRow();
      newrow << wsindex << ss.str();

      curvalue += valueinterval;
      wsindex ++;
      ++index;
    } // ENDWHILE

    // Debug print
    stringstream splitss;
    splitss << "Index map size = " << indexwsindexmap.size() << "\n";
    for (map<size_t, int>::iterator mit = indexwsindexmap.begin();
         mit != indexwsindexmap.end(); ++mit)
    {
      splitss << "Index " << mit->first << ":  WS-group = " << mit->second
              << ". Log value range: " << logvalueranges[mit->first*2] << ", "
              << logvalueranges[mit->first*2+1] << ".\n";
    }
    g_log.information(splitss.str());

    if (logvalueranges.size() < 2)
    {
      g_log.warning() << "There is no log value interval existing." << std::endl;
      return;
    }

    double upperboundinterval0 = logvalueranges[1];
    double lowerboundlastinterval = logvalueranges[logvalueranges.size()-2];
    double minlogvalue = m_dblLog->minValue();
    double maxlogvalue = m_dblLog->maxValue();
    if (minlogvalue > upperboundinterval0 || maxlogvalue < lowerboundlastinterval)
    {
      g_log.warning() << "User specifies log interval from " << minvalue-valuetolerance
                      << " to " << maxvalue-valuetolerance << " with interval size = " << valueinterval
                      << "; Log " << m_dblLog->name() << " has range " << minlogvalue << " to " << maxlogvalue
                      << ".  Therefore some workgroup index may not have any splitter." << std::endl;
    }

    // 3. Call
    Kernel::TimeSplitterType splitters;
    std::string logboundary = this->getProperty("LogBoundary");
    transform(logboundary.begin(), logboundary.end(), logboundary.begin(), ::tolower);

    makeMultipleFiltersByValues(splitters, indexwsindexmap, logvalueranges,
                                logboundary.compare("centre") == 0,
                                filterincrease, filterdecrease, mStartTime, mStopTime);

    // 4. Put to SplittersWorkspace
    for (size_t i = 0; i < splitters.size(); i ++)
      m_splitWS->addSplitter(splitters[i]);

    return;
  }


  //-----------------------------------------------------------------------------------------------
  /**
   * Fill a TimeSplitterType that will filter the events by matching
   * SINGLE log values >= min and < max. Creates SplittingInterval's where
   * times match the log values, and going to index==0.
   *
   * @param filterIncrease :: As log value increase, and within (min, max), include this range in the filter.
   * @param filterDecrease :: As log value increase, and within (min, max), include this range in the filter.
   * @param startTime :: Start time.
   * @param stopTime :: Stop time.
   * @param wsindex :: Workspace index.
   * @param split :: Splitter that will be filled.
   * @param min :: Min value.
   * @param max :: Max value.
   * @param TimeTolerance :: Offset added to times in seconds.
   * @param centre :: Whether the log value time is considered centred or at the beginning.
   */
  void GenerateEventsFilter::makeFilterByValue(TimeSplitterType &split,
      double min, double max, double TimeTolerance, bool centre, bool filterIncrease,
      bool filterDecrease, DateAndTime startTime, Kernel::DateAndTime stopTime, int wsindex)
  {
    // 1. Do nothing if the log is empty.
    if (m_dblLog->size() == 0)
    {
      g_log.warning() << "There is no entry in this property " << this->name() << std::endl;
      return;
    }

    // 2. Do the rest
    bool lastGood = false;
    bool isGood = false;;
    time_duration tol = DateAndTime::durationFromSeconds( TimeTolerance );
    int numgood = 0;
    DateAndTime lastTime, t;
    DateAndTime start, stop;

    size_t progslot = 0;

    for (int i = 0; i < m_dblLog->size(); i ++)
    {
      lastTime = t;
      //The new entry
      t = m_dblLog->nthTime(i);
      double val = m_dblLog->nthValue(i);

      // A good value?
      if (filterIncrease && filterDecrease)
      {
        // a) Including both sides
        isGood = ((val >= min) && (val < max)) && t >= startTime && t <= stopTime;
      }
      else if (filterIncrease)
      {
        if (i == 0)
          isGood = false;
        else
          isGood = ((val >= min) && (val < max)) && t >= startTime && t <= stopTime && val-m_dblLog->nthValue(i-1) > 0;
      }
      else if (filterDecrease)
      {
        if (i == 0)
          isGood = false;
        else
          isGood = ((val >= min) && (val < max)) && t >= startTime && t <= stopTime && val-m_dblLog->nthValue(i-1) < 0;
      }
      else
      {
        g_log.error() << "Neither increasing nor decreasing is selected.  It is empty!" << std::endl;
      }

      if (isGood)
        numgood++;

      if (isGood != lastGood)
      {
        //We switched from bad to good or good to bad

        if (isGood)
        {
          //Start of a good section
          if (centre)
            start = t - tol;
          else
            start = t;
        }
        else
        {
          //End of the good section
          if (centre)
          {
            stop = t - tol;
          }
          else
          {
            stop = t;
          }
          split.push_back( SplittingInterval(start, stop, wsindex) );

          //Reset the number of good ones, for next time
          numgood = 0;
        }
        lastGood = isGood;
      }

      // Progress bar..
      size_t tmpslot = i*90/m_dblLog->size();
      if (tmpslot > progslot)
      {
        progslot = tmpslot;
        double prog = double(progslot)/100.0+0.1;
        progress(prog);
      }

    } // ENDFOR

    if (numgood > 0)
    {
      //The log ended on "good" so we need to close it using the last time we found
      if (centre)
        stop = t - tol;
      else
        stop = t;
      split.push_back( SplittingInterval(start, stop, wsindex) );
      numgood = 0;
    }

    return;
  }

  //-----------------------------------------------------------------------------------------------
  /** Fill a TimeSplitterType that will filter the events by matching
   * SINGLE log values >= min and < max. Creates SplittingInterval's where
   * times match the log values, and going to index==0.
   *
   * @param split :: Splitter that will be filled.
   * @param indexwsindexmap :: Index.
   * @param logvalueranges ::  A vector of double. Each 2i and 2i+1 pair is one individual log value range.
   * @param centre :: Whether the log value time is considered centred or at the beginning.
   * @param filterIncrease :: As log value increase, and within (min, max), include this range in the filter.
   * @param filterDecrease :: As log value increase, and within (min, max), include this range in the filter.
   * @param startTime :: Start time.
   * @param stopTime :: Stop time.
   */
  void GenerateEventsFilter::makeMultipleFiltersByValues(TimeSplitterType& split, map<size_t, int> indexwsindexmap,
                                                         vector<double> logvalueranges,
                                                         bool centre, bool filterIncrease, bool filterDecrease,
                                                         DateAndTime startTime, DateAndTime stopTime)
  {
    // 0. Set up
    double timetolerance = 0.0;
    if (centre)
    {
      timetolerance = this->getProperty("TimeTolerance");
    }
    time_duration tol = DateAndTime::durationFromSeconds( timetolerance );

    // 1. Do nothing if the log is empty.
    if (m_dblLog->size() == 0)
    {
      g_log.warning() << "There is no entry in this property " << m_dblLog->name() << std::endl;
      return;
    }

    // 2. Go through the whole log to set up time intervals
    Kernel::DateAndTime ZeroTime(0);
    int lastindex = -1;
    int currindex = -1;
    DateAndTime lastTime, currTime;
    DateAndTime start, stop;
    size_t progslot = 0;

    int logsize = m_dblLog->size();

    for (int i = 0; i < logsize; i ++)
    {
      // a) Initialize status flags and new entry
      lastTime = currTime;  // for loop i, currTime is not defined.
      bool breakloop = false;
      bool completehalf = false;
      bool newsplitter = false;

      currTime = m_dblLog->nthTime(i);
      double currValue = m_dblLog->nthValue(i);

      // b) Filter out by time and direction (optional)
      bool intime = false;
      if (currTime < startTime)
      {
        // case i.  Too early, do nothing
        completehalf = false;
      }
      else if (currTime > stopTime)
      {
        // case ii. Too later.  Put to splitter if half of splitter is done.  But still within range
        breakloop = true;
        stop = currTime;
        if (start.totalNanoseconds() > 0)
        {
          completehalf = true;
        }
      }
      else
      {
        // case iii. In the range to generate filters
        intime = true;
      }

      // c) Filter in time
      if (intime)
      {
        // c1) Determine direction
        bool correctdir = true;

        if (filterIncrease && filterDecrease)
        {
          // Both direction is fine
          correctdir = true;
        }
        else
        {
          // Filter out one direction
          int direction = 0;
          if ( m_dblLog->nthValue(i)-m_dblLog->nthValue(i-1) > 0)
            direction = 1;
          else
            direction = -1;
          if (filterIncrease && direction > 0)
            correctdir = true;
          else if (filterDecrease && direction < 0)
            correctdir = true;
          else
            correctdir = false;

          // Condition to generate a Splitter (close parenthesis)
          if (!correctdir && start.totalNanoseconds() > 0)
          {
            stop = currTime;
            completehalf = true;
          }
        } // END-IF-ELSE: Direction

        // c2) See whether this value falls into any range
        if (correctdir)
        {
          size_t index = searchValue(logvalueranges, currValue);
          g_log.debug() << "DBx257 Examine Log Index " << i << ", Value = " << currValue
                        << ", Data Range Index = " << index << "; "
                        << "Group Index = " << indexwsindexmap[index/2]
                        << " (log value range vector size = " << logvalueranges.size() << ").\n";

          bool valuewithin2boundaries = true;
          if (index > logvalueranges.size())
          {
            // Out of range
            valuewithin2boundaries = false;
          }

          if (index%2 == 0 && valuewithin2boundaries)
          {
            // [Situation] Falls in the interval
            currindex = indexwsindexmap[index/2];

            if (currindex != lastindex && start.totalNanoseconds() == 0)
            {
              // i.   A new region!
              newsplitter = true;
            }
            else if (currindex != lastindex && start.totalNanoseconds() > 0)
            {
              // ii.  Time to close a region and new a region
              stop = currTime;
              completehalf = true;
              newsplitter = true;
            }
            else if (currindex == lastindex && start.totalNanoseconds() > 0)
            {
              // iii. Still in the same zone
              if (i == logsize-1)
              {
                // Last entry in the log.  Need to flag to close the pair
                stop = currTime;
                completehalf = true;
                newsplitter = false;
              }
              else
              {
                // Do nothing
                ;
              }
            }
            else
            {
              // iv.  It is impossible
              std::stringstream errmsg;
              double lastvalue =  m_dblLog->nthValue(i-1);
              errmsg << "Impossible to have currindex == lastindex == " << currindex
                     << ", while start is not init.  Log Index = " << i << "\t value = "
                     << currValue << "\t, Index = " << index
                     << " in range " << logvalueranges[index] << ", " << logvalueranges[index+1]
                     << "; Last value = " << lastvalue;

              g_log.error(errmsg.str());
              throw std::runtime_error(errmsg.str());
            }
          } // [In-bound: Inside interval]
          else if (valuewithin2boundaries)
          {
            // [Situation] Fall between interval (which is not likley happen)
            currindex = -1;
            if (start.totalNanoseconds() > 0)
            {
              // Close the interval pair if it has been started.
              stop = currTime;
              completehalf = true;
            }
          } // [In-bound: Between interval]
          else if (!valuewithin2boundaries)
          {
            // Out of a range.
            currindex = -1;
            if (start.totalNanoseconds() > 0)
            {
              // End situation
              stop = currTime;
              completehalf = true;
            }
            else
            {
              // No operation required
              ;
            }
          } // [Out-bound]
          else
          {
            // IMPOSSIBLE SITUATION
            // c2) Fall out of interval
            g_log.debug() << "DBOP Log Index " << i << "  Falls Out b/c value range... " << std::endl;
            throw runtime_error("Is it ever reached? ");

            // log value falls out of min/max: If start is defined, then define stop
            if (start.totalNanoseconds() > 0)
            {
              stop = currTime;
              completehalf = true;
              g_log.debug() << "DBOP Log Index [2] " << i << "  falls Out b/c value range... " << ".\n";
            }
          }
        } // [CORRECT DIRECTION]
        else
        {
          currindex = -1;
          g_log.debug() << "DBOP Log Index " << i << " Falls out b/c out of wrong direction" << std::endl;
        }
      }
      else
      {
        // Out of time range
        currindex = -1;
        g_log.debug() << "DBOP Log Index " << i << "  Falls Out b/c out of time range... " << std::endl;
      }

      // d) Create Splitter
      if (completehalf)
      {
        if (centre)
        {
          split.push_back( SplittingInterval(start-tol, stop-tol, lastindex) );
        }
        else
        {
          split.push_back( SplittingInterval(start, stop, lastindex) );
        }
        g_log.debug() << "DBx250 Add Splitter " << split.size()-1 << ":  " << start.totalNanoseconds() << ", "
                      << stop.totalNanoseconds() << ", Delta T = "
                      << static_cast<double>(stop.totalNanoseconds()-start.totalNanoseconds())*1.0E-9
                      << "(s), Workgroup = " << lastindex << std::endl;

        // reset
        start = ZeroTime;
      }

      // e) Start new splitter: have to be here due to start cannot be updated before a possible splitter generated
      if (newsplitter)
      {
        start = currTime;
      }

      // f) Break
      if (breakloop)
        break;

      // e) Update loop variable
      lastindex = currindex;

      // f) Progress
      // Progress bar..
      size_t tmpslot = i*90/m_dblLog->size();
      if (tmpslot > progslot)
      {
        progslot = tmpslot;
        double prog = double(progslot)/100.0+0.1;
        progress(prog);
      }

    } // For each log value

    progress(1.0);

    return;

  }
  //-----------------------------------------------------------------------------------------------
  /** Generate filters for an integer log
    * @param minvalue :: minimum allowed log value
    * @param maxvalue :: maximum allowed log value
    * @param filterIncrease :: include log value increasing period;
    * @param filterDecrease :: include log value decreasing period
    */
  void GenerateEventsFilter::processIntegerValueFilter(TimeSplitterType& splitters, int minvalue, int maxvalue,
                                                       bool filterIncrease, bool filterDecrease, DateAndTime runend)
  {
    // 1. Determine the filter mode
    int delta = 0;
    double singlemode;
    if (minvalue == maxvalue)
    {
      singlemode = true;
    }
    else
    {
      double deltadbl = getProperty("LogValueInterval");
      delta = static_cast<int>(deltadbl+0.5);
      if (delta <= 0)
        throw runtime_error("LogValueInterval cannot be 0 or negative for integer log.");
      singlemode = false;
    }

    // 2. Search along log to generate splitters
    size_t numlogentries = m_intLog->size();
    vector<DateAndTime> times = m_intLog->timesAsVector();
    vector<int> values = m_intLog->valuesAsVector();

    time_duration timetol = DateAndTime::durationFromSeconds( m_logTimeTolerance*m_timeUnitConvertFactor*1.0E-9);

    DateAndTime splitstarttime(0);
    int pregroup = -1;

    g_log.debug() << "[DB] Number of log entries = " << numlogentries << ".\n";

    for (size_t i = 0; i < numlogentries; ++i)
    {
      int currvalue = values[i];
      int currgroup = -1;

      // a) Determine allowed and group
      if (currvalue > maxvalue || currvalue < minvalue)
      {
        // Log value is out of range
        g_log.debug() << "[DB] Entry[" << i << "] = " << currvalue << ": out of range. " << ".\n";
      }
      else if ((i == 0) || (i >= 1 && ((filterIncrease && values[i] >= values[i-1]) ||
                                       (filterDecrease && values[i] <= values[i]))))
      {
        // First entry (regardless direction) and other entries considering change of value
        if (singlemode)
        {
          currgroup = 0;
        }
        else
        {
          currgroup = (currvalue-minvalue)/delta;
        }
        g_log.debug() << "[DB] Entry[" << i << "] = " << currvalue << ": belong to group "
                      << currgroup << ".\n";
      }

      // b) Consider to make a splitter
      bool statuschanged;
      if (pregroup >= 0 && currgroup < 0)
      {
        // i.  previous log is in allowed region.  but this one is not.  create a splitter
        if (splitstarttime.totalNanoseconds() == 0)
          throw runtime_error("Programming logic error.");
        make_splitter(splitstarttime, times[i], pregroup, timetol, splitters);

        splitstarttime = DateAndTime(0);
        statuschanged = true;
      }
      else if (pregroup < 0 && currgroup >= 0)
      {
        // ii.  previous log is not allowed, but this one is.  this is the start of a new splitter
        splitstarttime = times[i];
        statuschanged = true;
      }
      else if (currgroup >= 0 && pregroup != currgroup)
      {
        // iii. migrated to a new region
        if (splitstarttime.totalNanoseconds() == 0)
          throw runtime_error("Programming logic error (1).");
        make_splitter(splitstarttime, times[i], pregroup, timetol, splitters);

        splitstarttime = times[i];
        statuschanged = true;
      }
      else
      {
        // iv.  no need to do anything
        statuschanged = false;
      }

      // c) Update
      if (statuschanged)
        pregroup = currgroup;
    }

    // 3. Create the last splitter if existing
    if (pregroup >= 0)
    {
      // Last entry is in an allowed region.
      if (splitstarttime.totalNanoseconds() == 0)
        throw runtime_error("Programming logic error (1).");
      make_splitter(splitstarttime, runend, pregroup, timetol, splitters);
    }

    // 4. Write to the information workspace
    if (singlemode)
    {
      TableRow newrow = m_filterInfoWS->appendRow();
      stringstream message;
      message << m_intLog->name() << " = " << minvalue;
      newrow << 0 << message.str();
    }
    else
    {
      int logvalue = minvalue;
      int wsindex = 0;
      while (logvalue <= maxvalue)
      {
        stringstream message;
        if (logvalue + delta - 1 > logvalue)
          message << m_intLog->name() << " = [" << logvalue << ", " << logvalue+delta-1 << "]";
        else
          message << m_intLog->name() << " = " << logvalue ;

        message << ". Value change direction: ";
        if (filterIncrease && filterDecrease)
          message << "Both.";
        else if (filterIncrease)
          message << "Increasing. ";
        else if (filterDecrease)
          message << "Decreasing. ";

        TableRow newrow = m_filterInfoWS->appendRow();
        newrow << wsindex << message.str();

        ++ wsindex;
        logvalue += delta;
      }
    }

    g_log.notice() << "[DB] Number of splitters = " << splitters.size()
                   << ", Number of split info = " << m_filterInfoWS->rowCount() << ".\n";

    return;
  }


  //----------------------------------------------------------------------------------------------
  /** Do a binary search in the following list
   * Warning: if the vector is not sorted, the error will happen.
   * This algorithm won't guarantee for it
   *
   * @param sorteddata :: Sorted data.
   * @param value :: Value to look up.
   *
   * return:  if value is out of range, then return datarange.size() + 1
   */
  size_t GenerateEventsFilter::searchValue(std::vector<double> sorteddata, double value)
  {
    size_t outrange = sorteddata.size()+1;

    g_log.debug() << "[G-E-F: DBx450] Search Value " << value << " (sorted data range = "
                  << sorteddata[0] << ", " << sorteddata.back() << ").\n";

    // 1. Extreme case
    if (value < sorteddata[0] || value > sorteddata.back())
      return outrange;
    if (sorteddata.size() == 0)
      return outrange;

    // 2. Binary search
    bool found = false;
    size_t start = 0;
    size_t stop = sorteddata.size()-1;

    while (!found)
    {
      if (start == stop || start+1 == stop)
      {
        // a) Found
        if (value == sorteddata[stop])
        {
          // std::cout << "DB450  Found @ A " << dataranges[stop] << "  Index = " << stop << std::endl;
          return stop;
        }
        else
        {
          // std::cout << "DB450  Found @ B " << dataranges[start] << "  Index = " << start << std::endl;
          return start;
        }
      }

      size_t mid = (start+stop)/2;
      if (value < sorteddata[mid])
      {
        stop = mid;
      }
      else
      {
        start = mid;
      }
    }

    return 0;
  }

} // namespace Mantid
} // namespace Algorithms
