#!/bin/sh
#
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Set top-level command name
CMD_NAME="new"
# Prefix for branch names
DEFAULT_PREFIX=""
# Base branch for new branches
BASE_BRANCH="origin/master"

# Set git to merge silently if everything succceeded
# See http://git-blame.blogspot.co.uk/2012/02/anticipating-git-1710.html
export GIT_MERGE_AUTOEDIT=no

# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

usage() {
    echo "Usage: git ${CMD_NAME} [SWITCHES] <ticketno> <short_descr>"
    echo "Start working on a new ticket by creating a branch from the information"
    echo "supplied. The branch is created using origin/master as a start point and"
    echo "a 'git fetch' is performed beforehand. The branch prefix can be specified"
    echo "using the -p flag."
    echo
    echo "If the branch name exists in the list given by 'git branch -r' an error"
    echo "is raised."
    echo
    echo "Equivalent to:"
    echo "  git fetch -p"
    echo "  git checkout --no-track -b [PREFIX]<ticketno>_short_descr"
    echo
    echo "Positional arguments:"
    echo "  ticketno      The TRAC ticket reference number"
    echo "  short_descr   A short description of the branch (without spaces)"
    echo 
    echo "Switches:"
    echo "  -h            Prints this help"
    echo "  -p            When creating a branch use this prefix in the"
    echo "                name (default=BLANK)"
    echo "  -s            Stash any local changes before switching to the new branch"
    echo "                and unstash them once the switch has occurred"
}

get_opts() {
    # Can't use getopt cross-platform
    if [ $# -lt 2 ]; then
        usage
        exit 1
    fi

    args="$@"

    BRANCH_PREFIX=${DEFAULT_PREFIX}
    DO_STASH=0

    prefix_next=0
    pos_arg=0
    for i in $args; do
        if [ $prefix_next -eq 1 ]; then
            prefix_next=0
            BRANCH_PREFIX=$i
            continue
        fi
        case $i in
            "-h") 
            usage
            exit 0
            ;;
            "-p") 
            prefix_next=1
            continue
            ;;
            "-s") 
            DO_STASH=1
            continue
            ;;
        esac
        case $pos_arg in
            0) TICKET_NO=$i;;
            1) DESCR=$i;;
        esac
        pos_arg=$((pos_arg+1))
        done

    if [ ! $pos_arg -eq 2 ]; then
        usage
        exit 1
    fi

    if [ ! -z "${BRANCH_PREFIX}" ]; then
        # Make sure the prefix ends with a / by removing it
        # if it exists and adding it back
        BRANCH_PREFIX=${BRANCH_PREFIX%%"/"}
        BRANCH_PREFIX=${BRANCH_PREFIX}"/"
    fi
}

main() {
  # Source the helpers
  . "${CMDFILE_DIR}/gitworkflow-helpers"

  # Are we in the right place?
  check_git_repo

  # Parse command line options
  get_opts "$@"
 
  # Compute the new branchname
  branchname=${BRANCH_PREFIX}${TICKET_NO}_${DESCR}
    
  # Sanity check and bail if it does
  check_branch_exists ${branchname}
  
  # Update origin/master if possible
  run_fetch
  
  local_modifications
  if [ $? -eq 1 ]; then
      if [ $DO_STASH -eq 1 ]; then
        git_halt_on_error stash
      else
        current=$(current_branch)
        echo "You have local modifications on the current branch."
        echo "Please do one of the following:"
        echo "  1) Commit the changes and rerun this command"
        echo "  2) Re-run this command with the -s option, i.e. 'git new -s $@' to stash/create branch/unstash";
        echo "  3) Wipe out all of the changes with 'git checkout -- .' and rerun this command"
        exit 1
      fi
  fi

  # Create branch
  echo "Creating new branch ${branchname} based on ${BASE_BRANCH}"
  git_halt_on_error checkout --no-track -b ${branchname} ${BASE_BRANCH}

  # Pop off the stash if necessary
  if [ $DO_STASH -eq 1 ]; then
        git_halt_on_error stash pop
  fi

}

main "$@"
