#!/bin/sh
#
# A set of common helper routines
# 
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

# Checks if the branch exists locally
local_branch_exists() {
    git branch --no-color | grep -E "${1}$" > /dev/null
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

# Checks if there is a branch origin/branchname
remote_branch_exists() { 
    git branch -r --no-color | grep -E "origin/${1}$" > /dev/null
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

check_branch_exists() {
    local_branch_exists ${1}
    if [ $? -eq 1 ]; then
        echo "A branch with name '${branchname}' already exists locally. Check ticket reference."
        exit 1
    fi

    remote_branch_exists ${1}
    if [ $? -eq 1 ]; then
        echo "A branch with name '${branchname}' already exists on the remote. Check ticket reference."
        exit 1
    fi
}

# Given a hint try and find the branch on the remote
# If the name resolves unambigously then the branchname is returned, otherwise
# and empty string is returned
find_branch_on_remote() {
    if [ ! $# -eq 1 ]; then
        echo "find_branch_on_remote requires a hint"
        exit 1
    fi
    remote_branches=$(git branch -r --no-color | grep -E "${1}" | grep origin)
    nbranches=$(echo "${remote_branches}" | wc -l) # the quotes are necessary to make it keep the separate lines!
    if [ $nbranches -eq 1 ]; then
        echo ${remote_branches}
    fi
}

# Returns the name of the current branch
current_branch() {
    git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

# Returns 1 if there are modifications to the current index/working copy
local_modifications() {
    git status --porcelain | grep -v "?" > /dev/null
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

# Run git, logging the command to stdout and halting on errors
git_halt_on_error() {
    echo "git $@"
    git "$@"
    if [ $? -gt 0 ]; then
        echo "An error occurred, cannot continue"
        exit 1
    fi
}

git_ignore_errors() {
    echo "git $@"
    git "$@"
}

run_fetch() {
    git_ignore_errors fetch -p
    if [ $? -gt 0 ]; then
        echo "Error running fetching. Most likely a network issue. Continuing with current state of ${BASE_BRANCH}."
    fi
}

# Checks if we are actually within a git repo
check_git_repo() {
    git status | grep "fatal: Not a git repository (or any of the parent directories): .git" > /dev/null
    if [ $? -eq 0 ]; then
        exit 1
    fi
}

# Checks if the first branch has been fully merged into the second
branch_is_merged() {
    if [ ! $# -eq 2 ]; then
        exit 1
    fi
    merge_base_sha1=$(git merge-base $1 $2)
    branch_sha1=$(git rev-parse $1)
    if [ ! "${merge_base_sha1}" = ${branch_sha1} ]; then
        return 0
    else
        return 1
    fi
}

# Check if a merge is in progress
merge_in_progress() {
    git_dir="$(git rev-parse --show-toplevel)/.git"
    if [ -f ${git_dir}/MERGE_HEAD ]; then
        retval=1
    else
        retval=0
    fi
    return $retval
}

# Check if a rebase is in progress
rebase_in_progress() {
    git_dir="$(git rev-parse --show-toplevel)/.git"
    if [ -d "${git_dir}"/rebase-merge -o -d "${git_dir}"/rebase-apply ]; then
        retval=1
    else
        retval=0
    fi
    return $retval
}

# Publish given branch
publish_branch() {
    if [ ! $# -eq 1 ]; then
        echo "publish_branch requires a single local branchname argument"
        exit 1
    fi
    
    git_halt_on_error push origin $1
}

# Update given local branch to remote
# Essentially
# git fetch -p
# git rebase --preserve-merges origin/<branchname>
update_branch_from_remote() {
    if [ ! $# -eq 1 ]; then
        echo "update_branch_from_remote requires a single local branchname argument"
        exit 1
    fi

    git_halt_on_error fetch -p
    git_halt_on_error rebase --preserve-merges origin/$1
}

# Delete branch on remote
delete_remote_branch() {
    if [ ! $# -eq 1 ]; then
        echo "delete_remote_branch requires a single local branchname argument"
        exit 1
    fi
    # Delete branch on the remote
    git_halt_on_error push origin :$1
}

# Delete branch locally
delete_local_branch() {
    if [ ! $# -eq 1 ]; then
        echo "delete_local_branch requires a single local branchname argument"
        exit 1
    fi
    # Delete local branch if there
    local_branch_exists $1
    if [ $? -eq 1 ]; then
        git_halt_on_error branch -D $1
    fi
}

# Construct address for compare view on github given the branch name
github_compare_url() {
    if [ ! $# -eq 1 ]; then
        echo "github_compare_address requires a single argument giving the branch name"
    fi
    changes_branch_gh=$1
    # Find which repository we are in
    repo_stem=$(git config --get remote.origin.url | sed -e 's@.*github.com[:,/]@@' | sed -e 's@\.git$@@')
    changes_address="https://github.com/${repo_stem}/compare/${changes_branch_gh}"
    # Echo so it can be caputured in a variable
    echo ${changes_address}
}

# Get the author name
get_author_name() {
    if [ ! $# -eq 1 ]; then
        echo "get_contact_info requires a single argument giving the branch name"
    fi
    git log -1 $1 --format="format:%an"
}

# Get the author name
get_author_email() {
    if [ ! $# -eq 1 ]; then
        echo "get_contact_info requires a single argument giving the branch name"
    fi
    git log -1 $1 --format="format:%ae"
}

# Removes a key and section if it is empty
remove_config_value() {
    if [ ! $# -eq 1 ]; then
        echo "remove_config_value requires the key as an arguments"
    fi
    # Clear saved config
    git config --unset $1
    # & the section if there is nothing left
    section_name=$(echo $1 | cut -d'.' -f 1,2)
    remaining_keys=$(git config --list | grep ${section_name})
    if [ -z "${remaining_keys}" ]; then
        git config --remove-section ${section_name} 2> /dev/null
    fi
}
