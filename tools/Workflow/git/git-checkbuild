#!/bin/sh
#
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Set top-level command name
CMD_NAME="checkbuild"
#
BUILD_BRANCH="develop"
# Config key to store merged branch name
MERGENAME_CFG_KEY=mantid.workflow.mergebranch

# Set git to merge silently if everything succceeded
# See http://git-blame.blogspot.co.uk/2012/02/anticipating-git-1710.html
export GIT_MERGE_AUTOEDIT=no


# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

usage() {
    echo "Usage: git ${CMD_NAME} [SWITCHES]"
    echo "Check the current branch against the build servers by merging to ${BUILD_BRANCH}"
    echo "and pushing to the remote."
    echo
    echo "The current branch must not be master or ${BUILD_BRANCH}, if it is then the script"
    echo "aborts. "
    echo
    echo "Equivalent to:"
    echo "  git checkout develop"
    echo "  git merge --no-ff <branchname>"
    echo "  git fetch -p"
    echo "  git rebase -p origin/develop"
    echo "  git push origin develop"
    echo "  git checkout <branchname>"
    echo
    echo "Switches:"
    echo "  -h  Prints this help"

}

checkargs() {
    # Can't use getopt cross-platform
    if [ ! $# -eq 0 ]; then
        usage
        exit 1
    fi
}

# Called when we are starting from a clean slate sitting on the feature branch
start_on_feature() {
    # We're starting again so clear out previous saved setting
    remove_config_value ${MERGENAME_CFG_KEY}

    # First publish the changes on the branch so that is is visible publicly
    mergebranch=$(current_branch)
    echo "Publishing branch '${mergebranch}'"
    git_halt_on_error push origin ${mergebranch}

    # Now do the merge. No need to be careful about the state of develop
    # so kill the local branch and recreate it
    local_branch_exists ${BUILD_BRANCH}
    if [ $? -eq 1 ]; then
        echo "Deleting local copy of ${BUILD_BRANCH}"
        git_halt_on_error branch -D ${BUILD_BRANCH}
    fi

    echo "Creating local copy of ${BUILD_BRANCH}"
    git_halt_on_error fetch -p
    git_halt_on_error checkout ${BUILD_BRANCH}
    
    # Do merge
    git_ignore_errors merge --no-ff ${mergebranch}
    if [ $? -gt 0 ]; then
        # Record what was attempted to be merged
        git config ${MERGENAME_CFG_KEY} ${mergebranch}
        echo
        echo "When you have resolved the conflicts with 'git add' then 'git commit' rerun this command from ${BUILD_BRANCH}."
        exit 1
    else
        # Remove any stored name if there was one
        remove_config_value ${MERGENAME_CFG_KEY}
    fi
    
    # Publish changes to develop
    git_ignore_errors push origin ${BUILD_BRANCH}
    if [ $? -gt 0 ]; then
        echo "Could not push to remote. The remote ${BUILD_BRANCH} was probably recreated. Rerun this command to recreate local ${BUILD_BRANCH}"
    fi

    # Put us back where we started
    git_ignore_errors checkout ${mergebranch}
    if [ $? -gt 0 ]; then
        echo "Warning: An error occurred when switching back to ${mergebranch}. Still on ${BUILD_BRANCH}!"
    fi
}

# Assumes a previous failed merge has just been resolved 
start_on_develop() {
    mergebranch=$(git config ${MERGENAME_CFG_KEY})
    if [ -z "${mergebranch}" ]; then
        echo "No failed merge detected. Please run this command from your feature branch."
        exit 1
    fi
    
    # Has previous merge been resolved
    git_dir="$(git rev-parse --show-toplevel)/.git"
    if [ -f ${git_dir}/MERGE_HEAD ]; then
        echo "It looks like there is a merge in progress."
        echo "Resolve any current conflicts with 'git add' & 'git commit' then rerun this command."
        exit 1
    fi

    # Merge as it has already been done, just push. It is likely, given the time spread that origin/develop has been updated and it
    # is possible that develop has been recreated
    prefetch_sha1=$(git rev-parse origin/${BUILD_BRANCH})
    git_halt_on_error fetch -p
    postfetch_sha1=$(git rev-parse origin/${BUILD_BRANCH})

    # Check for forced update. Works by checking if there are commits reachable from the old that are not reachable from the new
    # If this command produces output then an update has been forced and we need to start again
    unreachable_commits=$(git rev-list $prefetch_sha1 ^$postfetch_sha1)
    if [ ! -z "${unreachable_commits}" ]; then
        echo "The remote ${BUILD_BRANCH} has been recreated, 'git checkbuild' needs to be started from scratch."
        echo "On exit you will be back your branch. Please rerun the command."
        git_ignore_errors checkout ${mergebranch}
        exit 1
    else
        git_halt_on_error rebase --preserve-merges origin/${BUILD_BRANCH}
    fi

    git_ignore_errors push origin ${BUILD_BRANCH}
    if [ $? -gt 0 ]; then
        echo "Warning: Could not push to remote."
    fi

    # Put us back where we started
    git_ignore_errors checkout ${mergebranch}
    if [ $? -gt 0 ]; then
        echo "Warning: An error occurred when switching back to ${mergebranch}. Still on ${BUILD_BRANCH}!"
    fi

    # Remove any stored name
    remove_config_value ${MERGENAME_CFG_KEY}
}

main() {
    # Helper functions
    . "${CMDFILE_DIR}/gitworkflow-helpers"
        
    checkargs "$@"

    # Cannot be on master
    currentbranch=$(current_branch)
    if [ ${currentbranch} = "master" ]; then
        echo "Cannot use this command to merge master->${BUILD_BRANCH}"
        exit 1
    fi

    # Require clean slate
    # There could either be local changes or we're in the middle of a merge if there are conflicts
    local_modifications
    if [ $? -eq 1 ]; then
        echo "You have local modifications. Please either:"
        echo " 1) Commit the changes and rerun this command. This will include them in the buildserver check."
        echo " 2) Run 'git stash', rerun this command, then run 'git stash pop'. This will NOT include them in the buildserver check."
        exit 1
    fi

    # Run
    if [ ${currentbranch} = "${BUILD_BRANCH}" ]; then
        start_on_develop
    else
        start_on_feature
    fi
   
}

main "$@"
