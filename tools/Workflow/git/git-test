#!/bin/sh
# 
# Supports the git test command.
#
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Set top-level command name
CMD_NAME="test"
# Branch to merge to for testing
PRODUCTION_BRANCH="master"
# Branch for buildserver support
BUILDER_BRANCH="develop"
# Config section to store key
BRANCH_CFG_SECT=mantid.workflow
# Config key to store tested branch
BRANCH_CFG_KEY=${BRANCH_CFG_SECT}.testbranch
# Number of commits to check for develop in branch history
NCOMMITS_LOG=500

# Set git to merge silently if everything succceeded
# See http://git-blame.blogspot.co.uk/2012/02/anticipating-git-1710.html
export GIT_MERGE_AUTOEDIT=no

# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

usage() {
    echo "Usage: git ${CMD_NAME} start <branchname>"
    echo "       git ${CMD_NAME} review"
    echo "       git ${CMD_NAME} pass|fail"
    echo
    echo "In the first form start testing the given <branchname> by checking out ${PRODUCTION_BRANCH} and merging it."
    echo "The branchname that is actually merged is origin/branchname to save checking out a local copy of the branch."
    echo "The name of the branch is recorded in the config for reuse with the second form so that the branch can be deleted"
    echo "Equivalent to:"
    echo "  git fetch -p"
    echo "  git checkout ${PRODUCTION_BRANCH}"
    echo "  git reset --hard origin/${PRODUCTION_BRANCH} (Ensures it looks exactly like origin/${PRODUCTION_BRANCH})"
    echo "  git merge --no-ff <branchname>"
    echo
    echo "In the second form assume testing has started and open the compare view on github so that the"
    echo "changes can be reviewed"
    echo "Equivalent to:"
    echo "  git web--browse https://github.com/mantidproject/[REPO]/compare/[branchname]"
    echo
    echo "In the third form assume testing has started and indicates success/failure. If they"
    echo "  passed: The commits are pushed to origin --> 'git push origin ${PRODUCTION_BRANCH}'"
    echo "  failed: The merged commits are discarded --> 'git reset --hard origin/${PRODUCTION_BRANCH}'"
    echo
    echo "In both forms a fetch & merge of origin/${PRODUCTION_BRANCH} is performed before merging the test branch."
}

checkargs() {
    # Can't use getopt cross-platform
    # 2 args assumes the word start and then a string
    
    ARG_TEST_BRANCH=""
    START_MODE=0
    RESULT_MODE=0
    REVIEW_MODE=0
    TEST_PASSED=0
    
    if [ $# -eq 2 ]; then
        if [ "$1" != "start" ]; then
            usage
            exit 1
        fi
        START_MODE=1
        ARG_TEST_BRANCH=$2
    elif [ $# -eq 1 ]; then
        if [ "$1" = "review" ]; then
            REVIEW_MODE=1
        elif [ "$1" = "pass" ]; then
            RESULT_MODE=1
            TEST_PASSED=1
        elif [ "$1" = "fail" ]; then
            RESULT_MODE=1
            TEST_PASSED=0
        else
            usage
            exit 1
        fi
    else
        usage
        exit 1
    fi
}

start_testing() {
    # Check we are not in the middle of testing something else that wasn't finished
    testing=$(git config ${BRANCH_CFG_KEY})
    if [ ! -z "${testing}" ]; then
        echo "It looks like you have already run 'git test start' without a corresponding git test pass/fail."
        echo "If you are unsure run 'git test fail'. This will drop any merges and reset master back to origin/${PRODUCTION_BRANCH}."
        exit 1
    fi    

    # We need a clean slate
    local_modifications
    if [ $? -eq 1 ]; then
        echo "You have local modifications. Please either:"
        echo " 1) Commit the changes and rerun this command or"
        echo " 2) Run 'git stash', perform the testing, then run 'git stash pop' when testing has finished"
        exit 1
    fi
    # Ensure we have everything from the remote
    git_halt_on_error fetch -p

    # Reset a merge
    merge_in_progress
    if [ $? -eq 1 ]; then
        git merge --abort
    fi
    # Reset a rebase
    rebase_in_progress
    if [ $? -eq 1 ]; then
        git rebase --abort
    fi
 
    # find the test branch
    remote_testbranch=$(find_branch_on_remote ${ARG_TEST_BRANCH})
    if [ -z "$remote_testbranch" ]; then
        echo "Cannot find branch on remote using hint '${ARG_TEST_BRANCH}'."
        echo "Please give full name (without origin/ prefix)."
        exit 1
    fi

    # Check whether the branch has not been started from develop or had develop merged in
    local_testbranch=${remote_testbranch#"origin/"}
    merges=$(git log -${NCOMMITS_LOG} ${remote_testbranch} | grep Merge.*into.*develop)
    if [ -n "$merges" ]; then
        author_name=$(get_author_name ${remote_testbranch})
        author_email=$(get_author_email ${remote_testbranch})
        echo "ERROR: The branch '${local_testbranch}' appears to have been based off of develop, or has had develop merged into it."
        echo "This needs to be fixed. Reopen the ticket & contact ${author_name} on ${author_email} (or via skype)."
        exit 1
    fi

    # Check if the branch has been fully merged to develop
    branch_is_merged ${remote_testbranch} origin/${BUILDER_BRANCH}
    if [ $? -eq 0 ]; then
        author_name=$(get_author_name ${remote_testbranch})
        author_email=$(get_author_email ${remote_testbranch})
        echo "ERROR: Branch '${local_testbranch}' has not been fully merged to ${BUILDER_BRANCH},"
        echo "meaning it is not possible to know whether the code is valid on all environments."
        echo
        echo "Contact ${author_name} on ${author_email} (or via skype) and ask them to merge the code"
        echo "to ${BUILDER_BRANCH} using 'git checkbuild' from their branch ${local_testbranch} and let you know when"
        echo "it passes testing on the buildservers so you can start testing."
        exit 1
    fi

    startbranch=$(current_branch)
    if [ "${startbranch}" != "${PRODUCTION_BRANCH}" ]; then
        git_ignore_errors checkout ${PRODUCTION_BRANCH}
    fi
    
    # Sanity check
    currentbranch=$(current_branch)
    if [ "${currentbranch}" != "${PRODUCTION_BRANCH}" ]; then
        echo "Error switching to ${PRODUCTION_BRANCH}, cannot continue. Seek help!"
        exit 1
    fi
        
    # Update master
    git_halt_on_error rebase --preserve-merges origin/${PRODUCTION_BRANCH}
    
    # Merge test branch (name includes remote name)
    git_ignore_errors merge --no-ff ${remote_testbranch}
    if [ $? -gt 0 ]; then
        echo
        echo "WARNING: There were conflicts during the merge. If they are trivial please fix them, "
        echo "resolve the merge with 'git add' & 'git commit' and rerun this command."
        echo "If you are unsure fail the ticket, run 'git merge --abort' and talk to the develop about solving the issues."
        exit 1
    fi

    # Prompt user to examine changes
    changes_url=$(github_compare_url ${local_testbranch})

    # Record what we are testing for later pass/fail
    git config ${BRANCH_CFG_KEY} ${local_testbranch}

    echo
    echo "To review the changes that have been made on this branch run 'git test review'"
    echo "(This will open the default browser & point it to: ${changes_url} "
    echo
    echo "Along with the review the code should now be built & the feature tested."
    echo "When complete if:"
    echo "  success: run 'git test pass'"
    echo "  failure: run 'git test fail'"
    echo
 
}

end_testing() {
    # We only deal with production here
    startbranch=$(current_branch)
    if [ "${startbranch}" != "${PRODUCTION_BRANCH}" ]; then
        git_halt_on_error checkout ${PRODUCTION_BRANCH}
    fi

    if [ $TEST_PASSED -eq 1 ]; then
        local_testbranch=$(git config ${BRANCH_CFG_KEY})
        if [ -z ${local_testbranch} ]; then
            echo "The name of the test branch has not been recorded in the config. Was the testing started with 'git test start'?"
            exit 1
        fi

        publish=""
        while [ "$publish" != "y" -a "$publish" != "n" ];
        do
            echo -n "Testing passed on ${local_testbranch}. Push master to remote (y/n): "
            read publish
        done
        if [ "${publish}" = "y" ]; then
            update_branch_from_remote ${PRODUCTION_BRANCH}
            publish_branch ${PRODUCTION_BRANCH}
            delete_remote_branch ${local_testbranch}
            delete_local_branch ${local_testbranch}
        else
            echo "Warning: Branch is still merged locally but has NOT been pushed to the remote."
            exit 0
        fi
    else
        echo "Resetting ${PRODUCTION_BRANCH} reset to origin/${PRODUCTION_BRANCH}"
        reset_to_remote_production  
    fi

    # Clear any saved config
    remove_config_value ${BRANCH_CFG_KEY}
}

reset_to_remote_production() {
    # reset will only work if we are not in the middle of a failed merge or rebase
    git_dir="$(git rev-parse --show-toplevel)/.git"
    
    # Abort a merge in progress
    merge_in_progress
    if [ $? -eq 1 ]; then
        git_halt_on_error merge --abort
    fi

    # Abort a rebase if in progress
    rebase_in_progress
    if [ $? -eq 1 ]; then
        git_halt_on_error rebase --abort
    fi
    # The reset should succeed now
    git_halt_on_error reset --hard origin/${PRODUCTION_BRANCH}
}

review_changes() {
    local_testbranch=$(git config ${BRANCH_CFG_KEY})
    if [ -z ${local_testbranch} ]; then
        echo "The name of the test branch has not been recorded in the config. Was the testing started with 'git test start'?"
        exit 1
    fi
    changes_url=$(github_compare_url ${local_testbranch})
    git_halt_on_error web--browse ${changes_url}
}

main() {
    # Helper functions
    . "${CMDFILE_DIR}/gitworkflow-helpers"
    
    checkargs "$@"

    if [ $START_MODE -eq 1 ]; then
        start_testing
    elif [ $REVIEW_MODE -eq 1 ]; then
        review_changes
    elif [ $RESULT_MODE -eq 1 ]; then
        end_testing
    fi
}

main "$@"
