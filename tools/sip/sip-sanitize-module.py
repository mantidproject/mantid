#!/usr/bin/env python
# Mantid Repository : https://github.com/mantidproject/mantid
#
# Copyright &copy; 2019 ISIS Rutherford Appleton Laboratory UKRI,
#   NScD Oak Ridge National Laboratory, European Spallation Source,
#   Institut Laue - Langevin & CSNS, Institute of High Energy Physics, CAS
# SPDX - License - Identifier: GPL - 3.0 +
"""
Accepts the output of sip code generation and sanitizes it ready for compilation.
See sanitize_generated_module docs for changes that are made.
"""
# system imports
import argparse
import re
from typing import Sequence
import sys

THROW_SPEC_RE = re.compile(r'throw\(.*?\)')


def main(argv: Sequence[str]) -> int:
    """
    Main entry point for the program.

    :param argv: Command-line arguments. The first
    argument is expected to be full path to the sip
    program. Any subsequent arguments are passed
    directly to sip invocation
    """
    args = parse_arguments(argv)

    for sourcefile in args.sourcefiles:
        print(f"Sanitizing sip sourcefile: {sourcefile}")
        sanitize_generated_module(sourcefile)

    return 0


def parse_arguments(argv: Sequence[str]) -> argparse.Namespace:
    """
    Process command-line arguments
    :return: A argparse.Namespace containing the arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('sourcefiles',
                        type=str,
                        nargs='+',
                        help='The sourcefiles assumed to have been produced by the sip or sip-build programs')

    return parser.parse_args()


def sanitize_generated_module(generated_module_filepath: str):
    """
    Takes the module code as generated by sip and sanitizes it to be compatible
    with the current standard. It replaces the original file.

    Currently:
      - removes all throw() specifications as they are not supported in C++ 17

    :param generated_module_filepath:
    """
    with open(generated_module_filepath, 'r') as sip_module_orig:
        module_code_orig = sip_module_orig.readlines()

    sanitized_code = []
    for line_orig in module_code_orig:
        sanitized_code.append(THROW_SPEC_RE.sub('noexcept(false)', line_orig))

    with open(generated_module_filepath, 'w') as sanitized_module:
        sanitized_module.write(''.join(sanitized_code))


if __name__ == '__main__':
    sys.exit(main(sys.argv))
