--- configure.py.orig	2020-01-09 15:07:19.231636923 +0000
+++ configure.py	2020-01-09 15:10:28.159688544 +0000
@@ -1,19 +1,19 @@
 # This script generates the PyQt configuration and generates the Makefiles.
 #
 # Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
-# 
+#
 # This file is part of PyQt4.
-# 
+#
 # This file may be used under the terms of the GNU General Public License
 # version 3.0 as published by the Free Software Foundation and appearing in
 # the file LICENSE included in the packaging of this file.  Please review the
 # following information to ensure the GNU General Public License version 3.0
 # requirements will be met: http://www.gnu.org/copyleft/gpl.html.
-# 
+#
 # If you do not wish to use this file under the terms of the GPL version 3.0
 # then you may purchase a commercial license.  For more information contact
 # info@riverbankcomputing.com.
-# 
+#
 # This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 # WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 
@@ -90,7 +90,7 @@ def find_default_qmake():
 
     for d in path.split(os.pathsep):
         qmake = os.path.join(d, base_qmake)
-  
+
         if os.access(qmake, os.X_OK):
             return qmake
 
@@ -109,7 +109,7 @@ def create_optparser():
         if not os.path.isdir(value):
             raise optparse.OptionValueError("'%s' is not a directory" % value)
         setattr(parser.values, option.dest, os.path.abspath(value))
-        
+
     def store_abspath_file(option, opt_str, value, parser):
         if not os.path.isfile(value):
             raise optparse.OptionValueError("'%s' is not a file" % value)
@@ -342,8 +342,8 @@ class ConfigurePyQt4:
 
         check_module("QtGui", "qwidget.h", "new QWidget()")
         check_module("QtHelp", "qhelpengine.h", "new QHelpEngine(\"foo\")")
-        check_module("QtMultimedia", "QAudioDeviceInfo",
-                "new QAudioDeviceInfo()")
+        # check_module("QtMultimedia", "QAudioDeviceInfo",
+        #         "new QAudioDeviceInfo()")
         check_module("QtNetwork", "qhostaddress.h", "new QHostAddress()")
 
         # Qt v4.7 was current when we added support for QtDBus and we didn't
@@ -364,14 +364,14 @@ class ConfigurePyQt4:
                 extra_libs=sql_libs)
         check_module("QtSvg", "qsvgwidget.h", "new QSvgWidget()")
         check_module("QtTest", "QtTest", "QTest::qSleep(0)")
-        check_module("QtWebKit", "qwebpage.h", "new QWebPage()")
+        # check_module("QtWebKit", "qwebpage.h", "new QWebPage()")
         check_module("QtXml", "qdom.h", "new QDomDocument()")
         check_module("QtXmlPatterns", "qxmlname.h", "new QXmlName()")
         check_module("phonon", "phonon/videowidget.h",
                 "new Phonon::VideoWidget()")
-        check_module("QtAssistant", "qassistantclient.h",
-                "new QAssistantClient(\"foo\")", extra_lib_dirs=ass_lib_dirs,
-                extra_libs=ass_libs)
+        # check_module("QtAssistant", "qassistantclient.h",
+        #         "new QAssistantClient(\"foo\")", extra_lib_dirs=ass_lib_dirs,
+        #         extra_libs=ass_libs)
 
         if qt_shared == '':
             sipconfig.inform("QtDesigner module disabled with static Qt libraries.")
@@ -503,8 +503,8 @@ class ConfigurePyQt4:
         if "QtTest" in pyqt_modules:
             generate_code("QtTest")
 
-        if "QtWebKit" in pyqt_modules:
-            generate_code("QtWebKit")
+        # if "QtWebKit" in pyqt_modules:
+        #     generate_code("QtWebKit")
 
         if "QtXml" in pyqt_modules:
             generate_code("QtXml")
@@ -1511,7 +1511,7 @@ def needed_qt_libs(mname, qt_libs):
         "QtSql": ["QtGui"],
         "QtSvg": ["QtGui"],
         "QtTest": ["QtGui"],
-        "QtWebKit": ["QtNetwork", "QtGui"],
+        # "QtWebKit": ["QtNetwork", "QtGui"],
         "QtXml": ["QtCore"],
         "QtXmlPatterns": ["QtNetwork", "QtCore"],
         "phonon": ["QtGui"],
