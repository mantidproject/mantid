#!/bin/bash
# Check that the source conforms to the pre-commit framework
# Args are expected as GIT_SHA1 as $1, PROJECT_SOURCE as $2, JOB_TYPE as $3

if [ $# -ne 3 ]; then
  echo "Usage: ./pre-commit branch-sha1 project-root job-type"
  echo "  job_type=master|pull-request  "
  exit 1
fi

GIT_SHA=$1
PROJECT_SOURCE=$2
JOB_TYPE=$3

cd "$PROJECT_SOURCE" || exit 127

if [[ $JOB_TYPE == "pull-request" ]]; then
  # Find the HEAD of the commit sha
  BASE_SHA=$(git merge-base HEAD^2 HEAD^1)

  PRE_COMMIT_VERSION=$(pre-commit --version)
  # If using the snap version (No longer updated but it doesn't use pip on ubuntu, so it's better to be outdated here) run
  # Using the older source
  if [[ ${PRE_COMMIT_VERSION} < "pre-commit 1.22.0" ]]; then
    pre-commit run --origin "${BASE_SHA}" --source "${GIT_SHA}" --show-diff-on-failure --verbose
  else
    pre-commit run --from-ref "${BASE_SHA}" --to-ref "${GIT_SHA}" --show-diff-on-failure --verbose
  fi
elif [[ $JOB_TYPE == "master" ]]; then
  pre-commit run --all-files
else
  echo "JOB_TYPE not set, add a 3rd argument (e.g. master or pull-request)"
  exit 1
fi

# Define exit code so can be copied later
EXIT_CODE=$?

# git needs to have a minimal configuration for git commit to work
if [ "$(git config user.name)" == "" ]; then
  git config user.name mantid-builder
fi
if [ "$(git config user.email)" == "" ]; then
  git config user.email "mantid-buildserver@mantidproject.org"
fi

git add -A
if git diff --cached --quiet
then
    echo "code is formatted correctly"
else
    echo "code is not formatted correctly!"
    echo ".cpp/.h files are required to be formatted with clang-format"
    echo ".py files are required to be formatted with yapf"
    git commit --no-verify --quiet -m "formatting PR${PR} ${sha}"
    git format-patch --quiet HEAD~
    echo
    echo "To fix download ${BUILD_URL}artifact/0001-formatting-PR${PR}-${sha}.patch"
    echo "then run the following in your mantid directory:"
    echo "'git apply /path/to/0001-formatting-PR${PR}-${sha}.patch'"
    echo "and commit the changes."
fi

# Perform cleanup of unused commit repos.
pre-commit gc

exit $EXIT_CODE
