#!/bin/bash -ex
###############################################################################
# LINUX/MAC SCRIPT TO DRIVE THE JENKINS BUILDS OF MANTID.
#
# Notes:
#
# WORKSPACE, JOB_NAME, NODE_LABEL, PACKAGE_SUFFIX, GIT_COMMIT are
# environment variables that are set by Jenkins. The last one
# corresponds to any labels set on a slave.  BUILD_THREADS should
# be set in the configuration of each slave.
###############################################################################
# Set all string comparisons to case insensitive (i.e. Release == release)
shopt -s nocasematch

SCRIPT_DIR=$(dirname "$0")
XVFB_SERVER_NUM=101
ULIMIT_CORE_ORIG=$(ulimit -c)

###############################################################################
# Functions
###############################################################################

function onexit {
    if [[ ${USE_CORE_DUMPS} == true ]]; then
        ulimit -c $ULIMIT_CORE_ORIG
    fi
}

function run_with_xvfb {
    if [ $(command -v xvfb-run) ]; then
        # -e=--error-file. A bug in Xvfb on RHEL7 means --error-file
        # produces an error: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=337703;msg=2
        xvfb-run --server-args="-screen 0 640x480x24" \
        --server-num=${XVFB_SERVER_NUM} $@
    else
        eval $@
    fi
}


###############################################################################
# Terminate existing Xvfb sessions
###############################################################################
if [ $(command -v xvfb-run) ]; then
    echo "Terminating existing Xvfb sessions"

    # Kill Xvfb processes
    killall Xvfb || true

    # Remove Xvfb X server lock files
    rm -f /tmp/.X${XVFB_SERVER_NUM}-lock
fi

###############################################################################
# System discovery
###############################################################################
USE_CORE_DUMPS=true
if [[ ${NODE_LABELS} == *rhel7* ]] || [[ ${NODE_LABELS} == *centos7* ]] || [[ ${NODE_LABELS} == *scilin7* ]]; then
    ON_RHEL7=true
    elif [[ ${NODE_LABELS} == *ubuntu* ]]; then
    ON_UBUNTU=true
    elif [[ ${NODE_LABELS} == *osx* ]]; then
    ON_MACOS=true
    USE_CORE_DUMPS=false
fi

# Setup software collections on rhel7 to allow using gcc7
if [[ $ON_RHEL7 ]]; then
    SCL_ENABLE="scl enable devtoolset-7"
else
    SCL_ENABLE="eval"
fi


###############################################################################
# Script cleanup
###############################################################################
trap onexit INT TERM EXIT

###############################################################################
# Some preprocessing steps on the workspace
###############################################################################
BUILD_DIR_REL=build
BUILD_DIR=$WORKSPACE/$BUILD_DIR_REL

# Clean the source tree to remove stale configured files but make sure to
# leave external/ and the BUILD_DIR directory intact.
# There is a later check to see if this is a clean build and remove BUILD_DIR.
git clean -d -x --force --exclude=${BUILD_DIR_REL} --exclude=".Xauthority-*"

###############################################################################
# Print out the versions of things we are using
###############################################################################
# we use cmake3 on rhel because cmake is too old
if [ $(command -v cmake3) ]; then
    CMAKE_EXE=cmake3
    CPACK_EXE=cpack3
    CTEST_EXE=ctest3
else
    CMAKE_EXE=cmake
    CPACK_EXE=cpack
    CTEST_EXE=ctest
fi
$CMAKE_EXE --version

###############################################################################
# Check job requirements from the name and changes
###############################################################################
if [[ ${JOB_NAME} == *clean* || ${JOB_NAME} == *clang_tidy* ]]; then
    CLEANBUILD=true
fi

if [[ ${JOB_NAME} == *pull_requests* ]]; then
    PRBUILD=true
fi

if [[ ${JOB_NAME} == *debug* ]]; then
    BUILD_CONFIG="Debug"
    elif [[ ${JOB_NAME} == *relwithdbg* ]]; then
    BUILD_CONFIG="RelWithDbg"
else
    BUILD_CONFIG="Release"
fi

# Setup software collections on rhel7 to allow using gcc7
if [[ $ON_RHEL7 ]]; then
    SCL_ENABLE="scl enable devtoolset-7"
else
    SCL_ENABLE="eval"
fi

# For pull requests decide on what to build based on changeset and Jenkins
# parameters.
DO_BUILD_CODE=true
DO_UNITTESTS=true
DO_DOCTESTS_USER=true
DO_BUILD_DEVDOCS=true
DO_BUILD_PKG=true
DO_SYSTEMTESTS=false

if [[ ${PRBUILD} == true ]]; then
    if ${SCRIPT_DIR}/check_for_changes dev-docs-only || ${SCRIPT_DIR}/check_for_changes user-docs-only; then
        DO_BUILD_CODE=false
        DO_UNITTESTS=false
    fi
    DO_DOCTESTS_USER=false
    DO_BUILD_DEVDOCS=false
    DO_BUILD_PKG=${BUILD_PACKAGE:-false}
    DO_SYSTEMTESTS=false

    if [[ ${ON_RHEL7} == true ]]; then
        # rhel does system testing if there are any non-doc or gui changes
        if ! ${SCRIPT_DIR}/check_for_changes docs-gui-only; then
            DO_BUILD_PKG=true
            DO_SYSTEMTESTS=true
        fi
        elif [[ ${ON_UBUNTU} == true ]]; then
        # ubuntu does the docs build
        if ${SCRIPT_DIR}/check_for_changes dev-docs-only; then
            DO_BUILD_CODE=false
            DO_DOCTESTS_USER=false
        else
            DO_BUILD_CODE=true # code needs to be up to date
            DO_DOCTESTS_USER=true
        fi
    fi
fi

###############################################################################
# Setup the build directory
# For a clean build the entire thing is removed to guarantee it is clean. All
# other build types are assumed to be incremental and the following items
# are removed to ensure stale build objects don't interfere with each other:
#   - build/bin/**: if libraries are removed from cmake they are not deleted
#                   from bin and can cause random failures
#   - build/ExternalData/**: data files will change over time and removing
#                            the links helps keep it fresh
#   - build/Testing/**: old ctest xml files will change over time and removing
#                       the links helps keep it fresh
###############################################################################
if [ -z "$BUILD_DIR" ]; then
    echo "Build directory not set. Cannot continue"
    exit 1
fi

if [[ "$CLEANBUILD" == true ]]; then
    rm -rf $BUILD_DIR
fi

mkdir -p $BUILD_DIR

# Tidy build dir
rm -rf ${BUILD_DIR:?}/bin ${BUILD_DIR:?}/ExternalData ${BUILD_DIR:?}/Testing
find ${BUILD_DIR:?} \( -name 'TEST-*.xml' -o -name 'Test.xml' \) -delete

if [[ -n ${CLEAN_EXTERNAL_PROJECTS} && "${CLEAN_EXTERNAL_PROJECTS}" == true ]]; then
    rm -rf $BUILD_DIR/eigen-*
    rm -rf $BUILD_DIR/googletest-*
fi

###############################################################################
# Setup clang
###############################################################################
if [[ ${JOB_NAME} == *clang* ]]; then
    USE_CLANG=true
    elif [[ ${ON_MACOS} == true ]] ; then
    if [[ ! $(command -v icpc) ]] ; then
        USE_CLANG=true
    fi
fi

if [[ $USE_CLANG ]]; then
    # Assuming we are using the clang compiler
    echo "Using clang/llvm compiler."
    clang --version
    export CC=clang
    export CXX=clang++
    # check if this is also a clang-tidy build
    if [[ ${JOB_NAME} == *clang_tidy* ]]; then
        CLANGTIDYVAR="-DENABLE_CLANG_TIDY=ON"
    fi
    #check if CMakeCache.txt exists and if so that the cxx compiler is clang++
    #only needed with incremental builds. Clean builds delete this directory in a later step.
    if [[ -e $BUILD_DIR/CMakeCache.txt ]] && [[ ${JOB_NAME} != *clean* ]]; then
        COMPILERFILEPATH=$(grep 'CMAKE_CXX_COMPILER:FILEPATH' $BUILD_DIR/CMakeCache.txt)
        if [[ $COMPILERFILEPATH != *clang++* ]]; then
            # Removing the build directory entirely guarantees clang is used.
            rm -rf $BUILD_DIR
        fi
    fi
fi

#for openmp support on OS X run
# `brew install llvm`
# `ln -s /usr/local/opt/llvm/lib/libomp.dylib /usr/local/lib/libomp.dylib`
if [[ ${ON_MACOS} == true ]] ; then
    if [[ ${JOB_NAME} == *openmp* ]]; then
        export CC=/usr/local/opt/llvm/bin/clang
        export CXX=/usr/local/opt/llvm/bin/clang++
    fi
fi

###############################################################################
# Set up the location for the local object store outside of the build and
# source tree, which can be shared by multiple builds.
# It defaults to a MantidExternalData directory within the HOME directory.
# It can be overridden by setting the MANTID_DATA_STORE environment variable.
###############################################################################
if [ -z "$MANTID_DATA_STORE" ]; then
    export MANTID_DATA_STORE=$HOME/MantidExternalData
fi

###############################################################################
# Packaging options
###############################################################################
if [[ ${DO_BUILD_PKG} == true ]]; then
    PACKAGINGVARS="-DPACKAGE_DOCS=ON -DDOCS_DOTDIAGRAMS=ON -DDOCS_SCREENSHOTS=ON -DDOCS_MATH_EXT=sphinx.ext.imgmath -DDOCS_PLOTDIRECTIVE=ON"
    # Use different suffix if parameter is not defined
    if [[ -n "${PACKAGE_SUFFIX}" ]]; then
        echo "Using PACKAGE_SUFFIX=${PACKAGE_SUFFIX} from job parameter"
    elif [[ ${JOB_NAME} == release* ]]; then  # starts with "release"
        PACKAGE_SUFFIX=""
    elif [[ ${JOB_NAME} == ornl-stable ]]; then
        PACKAGE_SUFFIX=""
    elif [[ ${JOB_NAME} == ornl-qa ]]; then
        PACKAGE_SUFFIX="qa"
    elif [[ ${JOB_NAME} == master* ]]; then
        PACKAGE_SUFFIX="nightly"
    else
        PACKAGE_SUFFIX="unstable"
    fi
    if [[ "${ON_MACOS}" == true ]]; then
        PACKAGINGVARS="${PACKAGINGVARS} -DCPACK_PACKAGE_SUFFIX=${PACKAGE_SUFFIX}"
    else
        if [[ ${JOB_NAME} == release* ]] && [[ -z "${PACKAGE_SUFFIX}" ]]; then
            # Traditional install path for release build
            PACKAGINGVARS="${PACKAGINGVARS} -DCMAKE_INSTALL_PREFIX=/opt/Mantid -DCPACK_PACKAGE_SUFFIX="
        elif [[ ${JOB_NAME} == ornl-stable ]] && [[ -z "${PACKAGE_SUFFIX}" ]]; then
            # Traditional install path for release build
            PACKAGINGVARS="${PACKAGINGVARS} -DCMAKE_INSTALL_PREFIX=/opt/Mantid -DCPACK_PACKAGE_SUFFIX="
        else
            # everything else uses lower-case values
            PACKAGINGVARS="${PACKAGINGVARS} -DCMAKE_INSTALL_PREFIX=/opt/mantid${PACKAGE_SUFFIX} -DCPACK_PACKAGE_SUFFIX=${PACKAGE_SUFFIX}"
        fi

        if [[ ${ON_RHEL7} == true ]]; then
            if [[ -z "${RELEASE_NUMBER}" ]]; then
                RELEASE_NUMBER="1"
            fi
            PACKAGINGVARS="${PACKAGINGVARS} -DCPACK_RPM_PACKAGE_RELEASE=${RELEASE_NUMBER}"
        fi

        if [[ -n "${GITHUB_AUTHORIZATION_TOKEN}" ]]; then
            PACKAGINGVARS="${PACKAGINGVARS} -DGITHUB_AUTHORIZATION_TOKEN=${GITHUB_AUTHORIZATION_TOKEN}"
        fi
    fi
fi

###############################################################################
# Figure out if were doing a sanitizer build and setup any steps we need
###############################################################################

if [[ ${JOB_NAME} == *address* ]]; then
    SANITIZER_FLAGS="-DUSE_SANITIZER=Address"

elif [[ ${JOB_NAME} == *memory* ]]; then
    SANITIZER_FLAGS="-DUSE_SANITIZER=memory"

elif [[ ${JOB_NAME} == *thread* ]]; then
    SANITIZER_FLAGS="-DUSE_SANITIZER=thread"

elif [[ ${JOB_NAME} == *undefined* ]]; then
    SANITIZER_FLAGS="-DUSE_SANITIZER=undefined"
fi

if [[ -n "${SANITIZER_FLAGS}" ]]; then
    # Force build to RelWithDebInfo
    BUILD_CONFIG="RelWithDebInfo"
fi

###############################################################################
# Generator
###############################################################################
if [ "$(command -v ninja)" ]; then
    CMAKE_GENERATOR="-G Ninja"
    elif [ "$(command -v ninja-build)" ]; then
    CMAKE_GENERATOR="-G Ninja"
fi

if [ -e $BUILD_DIR/CMakeCache.txt ]; then
    CMAKE_GENERATOR=""
fi

###############################################################################
# Work in the build directory
###############################################################################
cd $BUILD_DIR

###############################################################################
# Clean up any artifacts from last build so that if it fails
# they don't get archived again
###############################################################################
rm -f -- *.dmg *.rpm *.deb *.tar.gz *.tar.xz

###############################################################################
# CMake configuration
###############################################################################
$SCL_ENABLE "${CMAKE_EXE} ${CMAKE_GENERATOR} -DCMAKE_BUILD_TYPE=${BUILD_CONFIG} -DENABLE_CPACK=ON -DENABLE_MANTIDPLOT=OFF -DMANTID_DATA_STORE=${MANTID_DATA_STORE} -DDOCS_HTML=ON -DENABLE_CONDA=ON -DCOLORED_COMPILER_OUTPUT=OFF ${DIST_FLAGS} ${PACKAGINGVARS} ${CLANGTIDYVAR} ${SANITIZER_FLAGS} .."

###############################################################################
# Coverity build should exit early
###############################################################################
if [[ ${JOB_NAME} == *coverity_build_and_submit* ]]; then
    ${COVERITY_DIR}/cov-build --dir cov-int ${CMAKE_EXE} --build . -- -j ${BUILD_THREADS:?}
    tar czvf mantid.tgz cov-int
    status=$(curl --form token=$COVERITY_TOKEN --form email=mantidproject@gmail.com \
        --form file=@mantid.tgz --form version=$GIT_COMMIT \
    https://scan.coverity.com/builds?project=mantidproject%2Fmantid)
    status=$(echo ${status} | sed -e 's/^ *//' -e 's/ *$//')
    if [[ -z $status ]] || [[ ${status} == "Build successfully submitted." ]]; then
        exit 0
    else
        echo "$status"
        exit 1
    fi
fi

###############################################################################
# Build step
###############################################################################
if [[ ${DO_BUILD_CODE} == true ]]; then
    ${CMAKE_EXE} --build . -- -j${BUILD_THREADS:?}
    ${CMAKE_EXE} --build . --target AllTests -- -j${BUILD_THREADS:?}
fi

###############################################################################
# Static analysis builds or stop here
###############################################################################
if [[ $USE_CLANG ]] && [[ ${JOB_NAME} == *clang_tidy* ]]; then
    exit 0
fi

###############################################################################
# Run the unit tests
###############################################################################
# Activate core dumps. They are deactivated by the registered EXIT function
# at the top of this script
if [[ ${USE_CORE_DUMPS} == true ]]; then
    ulimit -c unlimited
fi
# Prevent race conditions when creating the user config directory
userconfig_dir=$HOME/.mantid
rm -fr $userconfig_dir
# Remove GUI qsettings files
if [[ ${ON_MACOS} == true ]] ; then
    rm -f $HOME/Library/Preferences/com.mantid.MantidPlot.plist
    rm -f $HOME/Library/Preferences/org.mantidproject.MantidPlot.plist
    rm -f "$HOME/Library/Saved Application State/org.mantidproject.MantidPlot.savedState/windows.plist"
else
    rm -f ~/.config/Mantid/MantidPlot.conf
fi
rm -f ~/.config/mantidproject/mantidworkbench.ini

mkdir -p $userconfig_dir
# use a fixed number of openmp threads to avoid overloading the system
userprops_file=$userconfig_dir/Mantid.user.properties
echo MultiThreaded.MaxCores=2 > $userprops_file

if [[ ${DO_UNITTESTS} == true ]]; then
    run_with_xvfb $CTEST_EXE --no-compress-output -T Test -j${BUILD_THREADS:?} --schedule-random --output-on-failure
fi

###############################################################################
# User Documentation
###############################################################################
if [[ ${DO_DOCTESTS_USER} == true ]]; then
    # use default configuration
    rm -f $userprops_file
    # Remove doctrees directory so it forces a full reparse. It seems that
    # without this newly added doctests are not executed
    if [ -d $BUILD_DIR/docs/doctrees ]; then
        rm -fr $BUILD_DIR/docs/doctrees/*
    fi
    # Build HTML to verify that no referencing errors have crept in.
    run_with_xvfb ${CMAKE_EXE} --build . --target docs-html
    run_with_xvfb ${CMAKE_EXE} --build . --target docs-doctest
fi

###############################################################################
# Developer Documentation
###############################################################################
# Uncomment this when the dev-docs are ready to build without warnings
# if [[ ${DO_BUILD_DEVDOCS} == true ]]; then
#   if [ -d $BUILD_DIR/dev-docs/doctree ]; then
#     rm -fr $BUILD_DIR/dev-docs/doctree/*
#   fi
#   ${CMAKE_EXE} --build . --target dev-docs-html
# fi

###############################################################################
# Create the install kit if required. This includes building the Qt help
# documentation
###############################################################################
if [[ ${DO_BUILD_PKG} == true ]]; then
    run_with_xvfb ${CMAKE_EXE} --build . --target docs-qthelp
    ${CPACK_EXE}

    # Source tarball on clean build (arbitrarily choose Ubuntu)
    # Also, parcel up the documentation into a tar file that is easier to move around
    # and labelled by the commit id it was built with. This assumes the Jenkins git plugin
    # has set the GIT_COMMIT environment variable
    if [[ ${CLEANBUILD} == true && ${ON_UBUNTU} == true ]]; then
        run_with_xvfb ${CMAKE_EXE} --build . --target docs-html
        tar -cjf mantiddocs-g${GIT_COMMIT:0:7}.tar.bz2 --exclude='*.buildinfo' --exclude="MantidProject.q*" docs/html
        # The ..._PREFIX argument avoids opt/Mantid directories at the top of the tree
        ${CPACK_EXE} --config CPackSourceConfig.cmake -D CPACK_PACKAGING_INSTALL_PREFIX=
    fi
fi

###############################################################################
# Run the system tests if required. Run from a package to have at least one
# Linux checks it install okay
###############################################################################
if [[ ${DO_SYSTEMTESTS} == true ]]; then
    if [[ ${PRBUILD} == true ]]; then
        EXTRA_ARGS="--exclude-in-pull-requests" $SCRIPT_DIR/systemtests
    else
        $SCRIPT_DIR/systemtests
    fi
fi
