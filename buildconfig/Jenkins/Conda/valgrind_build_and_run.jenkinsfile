// This script expects the following environment variables to be set by the Jenkins job:

GIT_BRANCH = git_branch_name()
CHECKOUT_DIR = 'source'
CISCRIPT_DIR = "${CHECKOUT_DIR}/buildconfig/Jenkins/Conda"
pipeline {
  agent { label 'linux-64' }
  options { checkoutToSubdirectory(CHECKOUT_DIR) }
  stages {
    stage('Store git commit') {
      steps {
        script {
          env.GIT_SHA = GIT_COMMIT
        }
        echo "Git SHA is:${env.GIT_SHA}"
      }
    }
    stage('Build and run Valgrind: linux-64') {
      options { timestamps () }
      steps {
        checkoutSource("${GIT_SHA}")
        build_and_run_valgrind()
      }
      post {
        always {
          archive_test_logs()
          // publish_test_reports()
        }
      }
    }
    // stage ('Copy artifacts') {
    //   options {
    //     timestamps ()
    //     retry(3)
    //   }
    //   steps {
    //     checkoutSource("${GIT_SHA}")
    //     copyArtifacts filter: '**/conda-bld/**/*.tar.bz2',
    //       fingerprintArtifacts: true,
    //       projectName: '${JOB_NAME}',
    //       selector: specific('${BUILD_NUMBER}'),
    //       target: 'conda-packages',
    //       flatten: true
    //   }
    // }
  }
}

// ------------------- Functions -------------------

def git_branch_name() {
  def name = scm.branches[0].name
  // Some jobs define a BRANCH_NAME parameter to allow customisable builds.
  // In this case the value of scm.branches[0].name will literally be
  // $BRANCH_NAME and instead we have to get it from the environment.
  if(name.contains('$BRANCH_NAME')) {
    name = env.BRANCH_NAME
  }
  else if(name.contains("*/")) {
    name = name.split("\\*/")[1]
  }
  println "This is the branch name: $name"
  return name
}

def checkoutSource(sha) {
  dir(CHECKOUT_DIR) {
    checkout scm: [
      $class: 'GitSCM',
      branches: [[name: sha]],
      extensions: [
        [$class: 'CheckoutOption', timeout: 20],
        [$class: 'CleanCheckout', deleteUntrackedNestedRepositories: true],
        pruneTags(true)
      ]
    ]
  }
}

def build_and_run_valgrind() {
  platform = 'linux-64'
  buildscript_path = "${CISCRIPT_DIR}/valgrind-build-and-run-script"
  // common_args = "--clean-build --clean-external-projects --extra-cmake-flags -DCMAKE_BUILD_TYPE=RelWithDebInfo --log-file ${WORKSPACE}/${CHECKOUT_DIR}/build/Valgrind_${env.JOB_NAME}_${env.BUILD_NUMBER}.log"
  common_args = "--clean-build --clean-external-projects --extra-cmake-flags -DCMAKE_BUILD_TYPE=RelWithDebInfo"

  cmake_preset = "${platform}-ci"
  doctests = ""
  sh "echo 'common args: ${common_args}'"
  sh "chmod +x ${buildscript_path}"
  sh "${buildscript_path} ${WORKSPACE}/${CHECKOUT_DIR} ${cmake_preset} ${common_args} ${doctests}"

  // run_valgrind_path = "${CISCRIPT_DIR}/run-valgrind"
  // valgrind_common_args = "--log-file ${WORKSPACE}/${CHECKOUT_DIR}/build/test_logs/valgrind.log"
  // sh "chmod +x ${run_valgrind_path}"
  // sh "${run_valgrind_path} ${WORKSPACE}/${CHECKOUT_DIR} ${valgrind_common_args}"
}

def publish_test_reports() {
  xunit thresholds: [failed(failureThreshold: '0')],
    tools: [CTest(excludesPattern: '', pattern: "${CHECKOUT_DIR}/build/Testing/**/*.xml", stopProcessingIfError: true)]
  junit "${CHECKOUT_DIR}/build/Testing/SystemTests/scripts/TEST-*.xml"
}

def archive_test_logs(){
  archiveArtifacts artifacts: "${CHECKOUT_DIR}/build/test_logs/*.log", fingerprint: true
  archiveArtifacts artifacts: "${CHECKOUT_DIR}/build/Valgrind_*.log", fingerprint: true
}
