// This script expects the following environment variables to be set by the Jenkins job:
// GITHUB_USER_NAME - The name of the user, being used with pushing/pulling from git
// GITHUB_USER_EMAIL - The email of the user, being used with pushing/pulling from git
// GITHUB_TOKEN_CREDENTIAL_ID - The name of the credentials token in Jenkins that you want to use for pushing to the mantid repo
// ANACONDA_TOKEN_CREDENTIAL_ID - The name of the credentials token in Jenkins that you want to use for publishing conda packages

import groovy.transform.Field

def gitBranch = git_branch_name()
// Only Publish one of main or release-next by default. BRANCH_TO_PUBLISH is a global
// environment variable set in the Jenkins system configuration global properties.
def publishPackages = (gitBranch == "${BRANCH_TO_PUBLISH}")

// Determine default values of parameters. Some are based on the branch.
def defaults = [
  anacondaChannel : 'mantid',
  githubReleasesRepo: 'mantidproject/mantid',
  platformChoices : ['none', 'all', 'linux-64', 'win-64', 'osx-64', 'osx-arm64', 'all_ARM'],
  publishToAnaconda : publishPackages,
  publishToGithub   : publishPackages,
  packageSuffix     : 'Unstable',
  anacondaLabel     : 'unstable',
  // The github tag is usually only specified for release candidates.
  // If it's left blank a nightly tag is generated.
  githubReleasesTag : ''
]

// If required, switch off the mantiddocs conda package build. This is deliberately not listed in the
// pipeline parameters because it's only switched off for ornl-next anaconda publishing.
@Field Boolean buildMantiddocs = true

// Restrict the parameter choices for certain named branches.
switch(gitBranch) {
  case ['release-next']:
    defaults.packageSuffix = 'Nightly'
    defaults.anacondaLabel = 'nightly'
    defaults.platformChoices = ['all']
    break
  case ['main']:
    defaults.packageSuffix = 'Nightly'
    defaults.anacondaLabel = 'nightly'
    defaults.platformChoices = ['all_ARM']
    break
  case ['ornl-next', 'ornl-qa', 'ornl']:
    defaults.packageSuffix = 'Nightly'
    defaults.anacondaLabel = 'nightly'
    defaults.platformChoices = ['linux-64']
    defaults.publishToGithub = false
    defaults.publishToAnaconda = true
    defaults.anacondaChannel = 'mantid-ornl'
    buildMantiddocs = false
    break
}

// conda-build can't copy a local source if the conda-bld directory is
// also part of the source. Checkout to a subdirectory to avoid this.
@Field String CHECKOUT_DIR = 'source'
@Field String CISCRIPT_DIR = "${CHECKOUT_DIR}/buildconfig/Jenkins/Conda"
pipeline {
  agent none
  options { checkoutToSubdirectory(CHECKOUT_DIR) }
  parameters {
    string(name: 'DESCRIPTION', defaultValue: '',
           description: 'Description to be displayed on the Jenkins build page.')
    // Check these match the PLATFORM matrix values below (without all).
    choice(name: 'BUILD_DEVEL', choices: defaults.platformChoices,
           description: 'Choose a platform to build & test the developer configuration.')
    choice(name: 'BUILD_PACKAGE', choices: defaults.platformChoices,
           description: 'Choose a platform to build just this standalone package')
    string(name: 'PACKAGE_SUFFIX', defaultValue: defaults.packageSuffix,
           description: 'A string to append to the standalone package name')
    booleanParam(name: 'PUBLISH_TO_ANACONDA', defaultValue: defaults.publishToAnaconda,
                 description: 'If true, publish the packages to the specified Anaconda channel')
    booleanParam(name: 'PUBLISH_TO_GITHUB', defaultValue: defaults.publishToGithub,
                 description: 'If true, publish the packages to GitHub')
    string(name: 'ANACONDA_CHANNEL', defaultValue: defaults.anacondaChannel,
           description: 'The Anaconda channel to accept the package')
    string(name: 'ANACONDA_CHANNEL_LABEL', defaultValue: defaults.anacondaLabel,
           description: 'The label attached to package in the Anaconda channel')
    string(name: 'GITHUB_RELEASES_REPO', defaultValue: defaults.githubReleasesRepo,
           description: 'The repository to house the release')
    string(name: 'GITHUB_RELEASES_TAG', defaultValue: defaults.githubReleasesTag,
           description: 'The name of the tag for the release. Use this only for release candidate builds.')
  }
  environment {
    WIN_BASH = "C:\\Program Files\\git\\bin\\bash.exe"
    GIT_AUTHOR_NAME = "${GITHUB_USER_NAME}"
    GIT_AUTHOR_EMAIL = "${GITHUB_USER_EMAIL}"
    GIT_COMMITTER_NAME = "${GITHUB_USER_NAME}"
    GIT_COMMITTER_EMAIL = "${GITHUB_USER_EMAIL}"
  }
  stages {
    // Fail the pipeline early if any parameters are incorrect.
    stage('Check parameters') {
      agent { label 'linux-64' }
      steps {
        script {
          currentBuild.setDescription(params.DESCRIPTION)

          if(params.PUBLISH_TO_ANACONDA) {
            if(!params.ANACONDA_CHANNEL_LABEL?.trim()) {
              error("You must specify an Anaconda label to publish packages.")
            }
            if(!params.ANACONDA_CHANNEL?.trim()) {
              error("You must specify an Anaconda channel to publish packages.")
            }
          }
        }
      }
    }
    // Store the git commit hash in an environment variable so that we can use
    // the same commit for all stages of the pipeline. This is performed by using
    // the following step at the start of each subsequent stage:
    //   checkout scm: [$class: 'GitSCM', branches: [[name: "${GIT_SHA}"]], extensions: [[pruneTags: true]]]
    stage('Store git commit') {
      agent { label 'linux-64' }
      steps {
        script {
          env.GIT_SHA = GIT_COMMIT
        }
      }
    }
    // Generate the git tag only once to avoid issues where tags are not up to date on
    // certain agents. In particular, this can be a problem when the branch being built
    // is on a fork.
    stage('Generate git tag') {
      agent { label 'linux-64' }
      steps {
        checkoutSource("${GIT_SHA}")
        script {
          env.GIT_TAG = generate_git_tag()
        }
        echo "${env.GIT_TAG}"
      }
    }

    // Verify developer environment build/test while also building conda packages
    // in parallel. Running both steps in parallel reduces the overall pipeline
    // time, however if either part breaks then no publishing occurs.
    stage('Build and test, Conda packaging') {
      parallel {
        stage('build and test: linux-64') {
          when {
            beforeAgent true
            beforeOptions true
              anyOf {
                expression { params.BUILD_DEVEL == 'all' }
				expression { params.BUILD_DEVEL == 'all_ARM' }
                expression { params.BUILD_DEVEL == 'linux-64' }
            }
          }
          agent { label 'linux-64' }
          options { timestamps () }
          steps {
            checkoutSource("${GIT_SHA}")
            build_and_test('linux-64')
          }
          post {
            always {
              archive_test_logs()
              publish_test_reports()
            }
          }
        }
        stage('build and test: win-64') {
          when {
            beforeAgent true
            beforeOptions true
            anyOf {
              expression { params.BUILD_DEVEL == 'all' }
			  expression { params.BUILD_DEVEL == 'all_ARM' }
              expression { params.BUILD_DEVEL == 'win-64' }
            }
          }
          agent { label 'win-64' }
          options { timestamps () }
          steps {
            checkoutSource("${GIT_SHA}")
            build_and_test('win-64')
          }
          post {
            always {
              archive_test_logs()
              publish_test_reports()
              // Workaround for Windows so that failing system tests will fail the build
              bat "\"${WIN_BASH}\" -ex -c \"test ${currentBuild.currentResult} != UNSTABLE\""
            }
          }
        }
        stage('build and test: osx-64') {
          when {
            beforeAgent true
            beforeOptions true
              anyOf {
                expression { params.BUILD_DEVEL == 'all' }
                expression { params.BUILD_DEVEL == 'osx-64' }
            }
          }
          agent { label 'osx-64' }
          options { timestamps () }
          steps {
            checkoutSource("${GIT_SHA}")
            build_and_test('osx-64')
          }
          post {
            always {
              archive_test_logs()
              publish_test_reports()
            }
          }
        }
        stage('build and test: osx-arm64') {
          when {
            beforeAgent true
            beforeOptions true
              anyOf {
                expression { params.BUILD_DEVEL == 'all' }
				expression { params.BUILD_DEVEL == 'all_ARM' }
                expression { params.BUILD_DEVEL == 'osx-arm64' }
            }
          }
          agent { label 'osx-arm64' }
          options { timestamps () }
          steps {
            checkoutSource("${GIT_SHA}")
            build_and_test('osx-arm64')
          }
          post {
            always {
              archive_test_logs()
              publish_test_reports()
            }
          }
        }
        stage('package conda: linux-64') {
          when {
            beforeAgent true
            beforeOptions true
            // The mantiddocs package is built on linux so we always need to build the linux
            // conda packages unless 'none' is specified.
            expression { params.BUILD_PACKAGE != 'none' }
          }
          agent { label 'linux-64' }
          options {
              timestamps ()
              retry(3)
          }
          steps {
            // Clean up conda-bld before we start to avoid any
            // confusion with old packages
            dir('conda-bld') {
              deleteDir()
            }
            checkoutSource("${GIT_SHA}")
            // Build the base set of packages (ones not required for mantidworkbench)
            // in parallel
            package_conda('linux-64', 'base')
            archive_conda_packages('linux-64')
            archive_conda_packages('noarch')
          }
          post {
            always {
              archive_env_logs('linux-64')
            }
          }
        }
        stage('package conda: win-64') {
          when {
            beforeAgent true
            beforeOptions true
            anyOf {
              expression { params.BUILD_PACKAGE == 'win-64' }
              expression { params.BUILD_PACKAGE == 'all' }
			  expression { params.BUILD_PACKAGE == 'all_ARM' }
            }
          }
          agent { label 'win-64' }
          options {
              timestamps ()
              retry(3)
          }
          steps {
            // Clean up conda-bld before we start to avoid any
            // confusion with old packages
            dir('conda-bld') {
              deleteDir()
            }
            checkoutSource("${GIT_SHA}")
            // Build the base set of packages (ones not required for mantidworkbench)
            // in parallel
            package_conda('win-64', 'base')
            archive_conda_packages('win-64')
          }
          post {
            always {
              archive_env_logs('win-64')
            }
          }
        }
        stage('package conda: osx-64') {
          when {
            beforeAgent true
            beforeOptions true
            anyOf {
              expression { params.BUILD_PACKAGE == 'osx-64' }
              expression { params.BUILD_PACKAGE == 'all' }
            }
          }
          agent { label 'osx-64' }
          options {
              timestamps ()
              retry(3)
          }
          steps {
            // Clean up conda-bld before we start to avoid any
            // confusion with old packages
            dir('conda-bld') {
              deleteDir()
            }
            checkoutSource("${GIT_SHA}")
            // Build the base set of packages (ones not required for mantidworkbench)
            // in parallel
            package_conda('osx-64', 'base')
            archive_conda_packages('osx-64')
          }
          post {
            always {
              archive_env_logs('osx-64')
            }
          }
        }
        stage('package conda: osx-arm64') {
          when {
            beforeAgent true
            beforeOptions true
            anyOf {
              expression { params.BUILD_PACKAGE == 'osx-arm64' }
              expression { params.BUILD_PACKAGE == 'all' }
			  expression { params.BUILD_PACKAGE == 'all_ARM' }
            }
          }
          agent { label 'osx-arm64' }
          options {
              timestamps ()
              retry(3)
          }
          steps {
            // Clean up conda-bld before we start to avoid any
            // confusion with old packages
            dir('conda-bld') {
              deleteDir()
            }
            checkoutSource("${GIT_SHA}")
            // Build the base set of packages (ones not required for mantidworkbench)
            // in parallel
            package_conda('osx-arm64', 'base')
            archive_conda_packages('osx-arm64')
          }
          post {
            always {
              archive_env_logs('osx-arm64')
            }
          }
        }
      }
    }
    stage('Package workbench') {
      matrix {
        axes {
          axis {
            name 'PLATFORM'
            values 'linux-64', 'win-64', 'osx-64', 'osx-arm64'
          }
        }
        stages {
          stage('package workbench') {
            when {
              beforeAgent true
              beforeOptions true
              anyOf {
                  expression { params.BUILD_PACKAGE == "${PLATFORM}" }
				  expression { params.BUILD_PACKAGE == 'all_ARM' }
                  expression { params.BUILD_PACKAGE == 'all' }
              }
            }
            agent { label "${PLATFORM}" }
            options {
                timestamps()
                retry(3)
            }
            steps {
              // Clean up conda-bld before we start to avoid any
              // confusion with old packages
              dir('conda-bld') {
                deleteDir()
              }
              checkoutSource("${GIT_SHA}")
              // Copy base packages to build workbench
              copyArtifacts filter: "**/conda-bld/noarch/*.tar.bz2, **/conda-bld/${PLATFORM}/*.tar.bz2",
                fingerprintArtifacts: true,
                projectName: '${JOB_NAME}',
                selector: specific('${BUILD_NUMBER}'),
                target: './',
                flatten: false

              package_conda("${PLATFORM}", "workbench")
              archive_conda_packages("${PLATFORM}")
              package_standalone("${PLATFORM}")
              archive_standalone_package("${PLATFORM}")
            }
            post {
              always {
                archive_env_logs("${PLATFORM}")
              }
            }
          }
        }
      }
    }

    stage ('Publishing to Anaconda') {
      when {
        beforeAgent true
        beforeOptions true
        expression { params.PUBLISH_TO_ANACONDA }
      }
      agent { label 'linux-64' } // Use linux for simplicity with shell scripts
      options {
        timestamps ()
        retry(3)
      }
      environment {
        ANACONDA_TOKEN = credentials("${ANACONDA_TOKEN_CREDENTIAL_ID}")
      }
      steps {
        checkoutSource("${GIT_SHA}")
        // Conda first
        sh 'rm -fr ${WORKSPACE}/conda-packages'
        copyArtifacts filter: '**/conda-bld/**/*.tar.bz2',
          fingerprintArtifacts: true,
          projectName: '${JOB_NAME}',
          selector: specific('${BUILD_NUMBER}'),
          target: 'conda-packages',
          flatten: true
        // Single quotes are required for token variables to avoid them leaking
        sh "${CISCRIPT_DIR}/publish-to-anaconda ${WORKSPACE}" + ' ${ANACONDA_TOKEN} ' +\
          "${ANACONDA_CHANNEL} ${ANACONDA_CHANNEL_LABEL} ${WORKSPACE}/conda-packages/*.tar.bz2"
      }
    }

    stage ('Delete old nightly packages from Anaconda') {
      when {
        beforeAgent true
        beforeOptions true
        allOf {
            expression { params.PUBLISH_TO_ANACONDA }
            expression { params.ANACONDA_CHANNEL_LABEL.trim() == 'nightly' }
        }
      }
      agent { label 'linux-64' } // Use linux for simplicity with shell scripts
      options { timestamps () }
      environment { ANACONDA_TOKEN = credentials("${ANACONDA_TOKEN_CREDENTIAL_ID}") }
      steps {
        checkoutSource("${GIT_SHA}")
        sh "${CISCRIPT_DIR}/delete-old-packages.sh ${WORKSPACE}" + ' ${ANACONDA_TOKEN} ' +\
          "--channel ${ANACONDA_CHANNEL} --label ${ANACONDA_CHANNEL_LABEL} mantid mantidqt mantiddocs mantidworkbench mantid-developer"
      }
    }

    stage ('Publishing to Github') {
      when {
        beforeAgent true
        beforeOptions true
        allOf {
          expression { params.PUBLISH_TO_GITHUB }
          expression { params.GITHUB_RELEASES_REPO.trim() != '' }
        }
      }
      agent { label 'linux-64' } // Use linux for simplicity with shell scripts
      options {
        timestamps ()
        retry(3)
      }
      environment {
        GITHUB_TOKEN = credentials("${GITHUB_TOKEN_CREDENTIAL_ID}")
      }
      steps {
        checkoutSource("${GIT_SHA}")
        // Standalone packages next
        sh 'rm -fr ${WORKSPACE}/standalone-packages'
        copyArtifacts filter: '*.exe, *.dmg, *.tar.xz',
          fingerprintArtifacts: true,
          projectName: '${JOB_NAME}',
          selector: specific('${BUILD_NUMBER}'),
          target: 'standalone-packages',
          flatten: true
        // Copy conda packages and create a tarball to upload to the github release for backup.
        sh 'rm -fr ${WORKSPACE}/conda-packages'
        copyArtifacts filter: '**/conda-bld/**/*.tar.bz2',
          fingerprintArtifacts: true,
          projectName: '${JOB_NAME}',
          selector: specific('${BUILD_NUMBER}'),
          target: 'conda-packages',
          flatten: true
        sh 'tar -cvf conda-packages.tar ${WORKSPACE}/conda-packages/'
        // Publish to github. Single quotes are required for token variables to avoid them leaking
        sh "${CISCRIPT_DIR}/publish-to-github ${WORKSPACE}" + ' ${GITHUB_TOKEN} ' +\
          "${GITHUB_RELEASES_REPO} ${GIT_TAG} ${GIT_SHA} ${prerelease_option()} " +\
          "${WORKSPACE}/standalone-packages/* ${WORKSPACE}/conda-packages.tar"
      }
    }
    stage ('Keep latest successful build') {
      agent { label 'linux-64' } // Use linux for simplicity with shell scripts
      options {
        timestamps ()
      }
      steps {
        script {
          // If a build has a description already, we don't want to overwrite it,
          // and can safely assume it's not a nightly run.
          if(params.DESCRIPTION.isEmpty()) {
            // Keep this build. If it reaches this stage then it passed all other stages.
            currentBuild.keepLog = true

            // Set the keep description to a known value so we know which previous builds to discard.
            // This will allow builds to be manually kept and preserved by setting a custom description.
            def keepDescription = "Automatically preserving the most recent successful nightly"
            currentBuild.setDescription(keepDescription)

            // Remove the "keep" status for all previous successful runs.
            def build = currentBuild.getPreviousSuccessfulBuild()
            while(build != null)
            {
              if(build.build().getDescription() == keepDescription)
              {
                build.build().setDescription("")
                build.build().keepLog(false)
              }
              build = build.getPreviousSuccessfulBuild()
            }
          }
        }
      }
    }
  }
}

// ------------------- Functions -------------------

def git_branch_name() {
  def name = scm.branches[0].name
  // Some jobs define a BRANCH_NAME parameter to allow customisable builds.
  // In this case the value of scm.branches[0].name will literally be
  // $BRANCH_NAME and instead we have to get it from the environment.
  if(name.contains('$BRANCH_NAME')) {
    name = env.BRANCH_NAME
  }
  else if(name.contains("*/")) {
    name = name.split("\\*/")[1]
  }
  return name
}

def toUnixStylePath(path) {
  if(!path.startsWith("C:")) {
    path = "C:" + path
  }
  return path.replaceAll("\\\\", "/")
}

def checkoutSource(sha) {
  dir(CHECKOUT_DIR) {
    checkout scm: [
      $class: 'GitSCM',
      branches: [[name: sha]],
      extensions: [
        [$class: 'CheckoutOption', timeout: 20],
        [$class: 'CleanCheckout', deleteUntrackedNestedRepositories: true],
        pruneTags(true)
      ]
    ]
  }
}

def build_and_test(platform) {
  def buildscript_path = "${CISCRIPT_DIR}/conda-buildscript"
  def common_args = '--clean-build --clean-external-projects --enable-systemtests'
  def cmake_preset = "${platform}-ci"
  if(platform.startsWith('win')) {
    def workspace_unix_style = toUnixStylePath("${WORKSPACE}")
    bat "\"${WIN_BASH}\" -ex -c \"${buildscript_path}\
      ${workspace_unix_style}/${CHECKOUT_DIR} ${cmake_preset} ${common_args}\""
  } else {
    // Only run doctests on Linux
    def doctests = ""
    if(platform.startsWith('linux')) {
      doctests = "--enable-doctests"
    }
    sh "${buildscript_path} ${WORKSPACE}/${CHECKOUT_DIR} ${cmake_preset} ${common_args} ${doctests}"
  }
}

def publish_test_reports() {
  xunit thresholds: [failed(failureThreshold: '0')],
    tools: [CTest(excludesPattern: '', pattern: "${CHECKOUT_DIR}/build/Testing/**/*.xml", stopProcessingIfError: true)]
  junit "${CHECKOUT_DIR}/build/Testing/SystemTests/scripts/TEST-*.xml"
}

def package_conda(platform, base_or_workbench) {
  def packagescript_path = "${CISCRIPT_DIR}/package-conda"
  if(platform.startsWith('win')) {
    def workspace_unix_style = toUnixStylePath("${WORKSPACE}")
    bat "\"${WIN_BASH}\" -ex -c \"${packagescript_path}\
      ${workspace_unix_style} ${package_conda_options(platform, base_or_workbench)}\""
  } else {
    sh "${packagescript_path}\
      ${WORKSPACE} ${package_conda_options(platform, base_or_workbench)}"
  }
}

def package_conda_options(platform, base_or_workbench) {
  def package_flags = ""
  if(base_or_workbench == 'base') {
    def docs_flags = ""
    if(platform.startsWith('linux') && buildMantiddocs) {
      docs_flags = "--build-docs"
    }
    package_flags = "--build-mantid-developer --build-mantid --build-qt ${docs_flags}"
  }
  else if(base_or_workbench == 'workbench') {
    if(buildMantiddocs) {
      package_flags = "--build-workbench"
    } else {
      package_flags = "--build-workbench-without-docs"
    }
  }

  def package_options = "${package_flags} --git-tag ${GIT_TAG} --platform ${platform}"
  return package_options.trim()
}

def generate_git_tag() {
  def git_tag = ""
  if(GITHUB_RELEASES_TAG.trim() != '') {
    git_tag = "${GITHUB_RELEASES_TAG}"
  }
  else {
    def versionscript_path = "${CISCRIPT_DIR}/generate-version-number"
    if(isUnix()) {
      git_tag = sh(
        script: "${versionscript_path}", returnStdout: true
      ).trim()
    } else {
      def workspace_unix_style = toUnixStylePath("${WORKSPACE}")
      // @ suppresses the inclusion of the command itself in the output
      // https://www.jenkins.io/doc/pipeline/steps/workflow-durable-task-step/#bat-windows-batch-script
      git_tag = bat(script: "@\"${WIN_BASH}\" -ex -c \"${versionscript_path}\"", returnStdout: true).trim()
    }
  }
  return git_tag
}

def package_standalone(platform) {
  def packagescript_path = "${CISCRIPT_DIR}/package-standalone"
  if(isUnix()) {
    sh "${packagescript_path} ${WORKSPACE} ${package_standalone_options(platform)}"
  } else {
    def workspace_unix_style = toUnixStylePath("${WORKSPACE}")
    bat "\"${WIN_BASH}\" -ex -c \"${packagescript_path} ${workspace_unix_style}\
      ${package_standalone_options(platform)}\""
  }
}

def package_standalone_options(platform) {
  def package_options = ""
  if(PACKAGE_SUFFIX.trim() != '') {
    package_options += " --package-suffix ${PACKAGE_SUFFIX}"
  }
  return package_options.trim() + " --platform ${platform}"
}

// Determine whether this build should be marked as a prerelease on GitHub.
def prerelease_option() {
  def prerelease_flag = ""
  // If a tag has not been specified, we assume it's for a prerelease version.
  if(GITHUB_RELEASES_TAG.trim() == '') {
    prerelease_flag = "--prerelease"
  }
  return prerelease_flag
}

def archive_conda_packages(platform) {
  // Only archive the mantiddocs package if it was built.
  if(platform != 'noarch' || buildMantiddocs) {
    archiveArtifacts artifacts: "**/conda-bld/${platform}/*.tar.bz2",
      allowEmptyArchive: false,
      fingerprint: true,
      onlyIfSuccessful: true
  }
}

def archive_standalone_package(platform) {
  def pattern = ""
  if(platform.startsWith('linux')) {
    pattern = '*.tar.xz'
  } else if(platform.startsWith('win')) {
    pattern = '*.exe'
  } else if(platform.startsWith('osx')) {
    pattern = '*.dmg'
  }

  if(pattern != '') {
    archiveArtifacts artifacts: "${pattern}",
      allowEmptyArchive: false,
      fingerprint: true,
      onlyIfSuccessful: true
  } else {
    unstable("Unknown platform (${platform}) detected while archiving standalone package. Archiving skipped.")
  }
}

def archive_test_logs(){
  archiveArtifacts artifacts: "${CHECKOUT_DIR}/build/test_logs/*.log", fingerprint: true
}

def archive_env_logs(platform) {
  def env_log_dir = "**/conda-bld/${platform}/env_logs"
  archiveArtifacts artifacts: env_log_dir += "/**/*.txt",
    allowEmptyArchive: false,
    fingerprint: true,
    onlyIfSuccessful: false
}
