def git_clone(){
    // git url: 'https://github.com/mantidproject/mantid.git',
    //     branch: env.GIT_BRANCH
    bash "git clone https://github.com/mantidproject/mantid.git"
    bash "git checkout $GIT_BRANCH"
    bash "echo THIS IS WHERE WE ECHO AFTER THE GIT CLONE PLEASE SEE ME !?!?!??!?!?!?!?!##########################################"
}

def build_and_test_linux() {
    git_clone()
    bash "$WORKSPACE/buildconfig/Jenkins/Conda/conda-buildscript $WORKSPACE linux-ci --enable-systemtests --enable-doctests --clean-build --clean-external-projects"
}

def build_and_test_macos() {
    git_clone()
    bash "$WORKSPACE/buildconfig/Jenkins/Conda/conda-buildscript $WORKSPACE osx-ci --enable-systemtests --enable-doctests --clean-build --clean-external-projects"
}

def build_and_test_win(){
    git_clone()
    bat "\"C:\\Program Files\\git\\bin\\bash.exe\" -c \"C:/Jenkins/workspace/$JOB_NAME/buildconfig/Jenkins/Conda/conda-buildscript C:/Jenkins/workspace/$JOB_NAME win --enable-systemtests --clean-build --clean-external-projects\""
}

def conda_build_UNIX(){
    bash "$WORKSPACE/buildconfig/Jenkins/Conda/conda-build-recipes $WORKSPACE --build-mantid --build-qt --build-workbench"
}

def conda_build_linux() {
    conda_build_UNIX()
    archive:
        includes: "mambaforge/envs/mantid-conda-build-env/conda-bld/linux-64/*.tar.bz2"
}

def conda_build_macos() {
    conda_build_UNIX()
    archive:
        includes: "mambaforge/envs/mantid-conda-build-env/conda-bld/osx-64/*.tar.bz2"
}

def conda_build_win(){
    bat "\"C:\\Program Files\\git\\bin\\bash.exe\" -c \"C:/Jenkins/workspace/$JOB_NAME/buildconfig/Jenkins/Conda/conda-build-recipes C:/Jenkins/workspace/$JOB_NAME --build-mantid --build-qt --build-workbench\""
    archive:
        includes: "mambaforge/envs/mantid-conda-build-env/conda-bld/win-64/*.tar.bz2"
}

pipeline {
    agent none
    stages {
        stage('Build and Test'){
            parallel {
                stage('Build and Test on Ubuntu'){
                    agent { label 'ubuntu-18.04-build' }
                    steps {
                        build_and_test_linux()
                    }
                }
                stage('Build and Test on RHEL7') {
                    agent { label 'rhel7-build' }
                    steps {
                        build_and_test_linux()
                    }
                }
                stage('Build and Test on Windows') {
                    agent { label 'win-build' }
                    steps {
                        build_and_test_win()
                    }
                }
                stage('Build and Test on MacOS') {
                    agent { label 'osx-10.13-build' }
                    steps {
                        build_and_test_macos()
                    }
                }
            }
        }
        stage('Package and Test') {
            parallel {
                stage('conda-build Linux') {
                    agent { label 'conda-build-linux' }
                    steps {
                        conda_build_linux()
                    }
                }
                stage('conda-build Windows') {
                    agent { label 'conda-build-win' }
                    steps {
                        conda_build_win()
                    }
                }
                stage('conda-build MacOSX') {
                    agent { label 'conda-build-osx' }
                    steps {
                        conda_build_macos()
                    }
                }
            }
        }
        stage ('Deploy packages'){
            environment {
                ANACONDA_TOKEN = credentials('Anaconda-Pasarus')
                ANACONDA_CHANNEL = 'Pasarus'
            }
            agent { label 'conda-build-linux' } // Use linux for simplicity with shell scripts
            steps{
                // Copy all artifacts including mantid, ending with .tar.bz2 into $WORKSPACE from the current job, using ${JOB_NAME} and the current ${BUILD_NUMBER}
                copyArtifacts filter: 'mantid*.tar.bz2', fingerprintArtifacts: true, projectName: '${JOB_NAME}', selector: specific('${BUILD_NUMBER}')
                sh "$WORKSPACE/buildconfig/Jenkins/Conda/publish-to-anaconda $WORKSPACE $ANACONDA_TOKEN $ANACONDA_CHANNEL $WORKSPACE/mantid-*.tar.bz2 $WORKSPACE/mantidqt-*.tar.bz2 $WORKSPACE/mantidworkbench-*.tar.bz2"
            }
        }
    }
    post {
        cleanup{
            agent any
            deleteDir()
        }
    }
}
