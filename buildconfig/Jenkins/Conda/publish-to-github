#!/bin/bash -ex
# Expected args:
#   1. WORKSPACE: path to the workspace/source code that this should run inside
#                 (mantid repo). Windows Caveat: Only use / for this argument do
#                 not use \\ or \ in the path.
#   2. TOKEN: Token for uploading to github.com
#   3. RELEASES_REPO: Name, in owner/reponame format, of repository to publish to
#   4. RELEASES_TAG_NAME GitHub tag name. Creates a release with a tag of this name
#   5. RELEASES_TAG_SHA Git tag target SHA.
# Possible flags:
#   --prerelease: Whether this is a prerelease build (e.g. nightly or unstable build).
#   Remainder PACKAGES: A list of args that will be uploaded to github release cloud.
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source $SCRIPT_DIR/mamba-utils

# Parse arguments
WORKSPACE=$1
GITHUB_TOKEN=$2
RELEASES_REPO=$3
RELEASES_TAG_NAME=$4
RELEASES_TAG_SHA=$5
shift 5

PRERELEASE=false
if [[ "$1" = "--prerelease" ]]; then
    PRERELEASE=true
    shift 1
fi

# The remaining arguments should be the packages to upload - is there anything?
if [ $# -eq 0 ]; then
    echo "Expected a list of packages to upload but none were found."
    exit 1
fi

# Shorthand to always set the --repo command for "gh release"
# All other arguments are passed to the command
github_release_cmd() {
  gh release --repo $RELEASES_REPO "$@"
}

# Mamba
setup_mamba $WORKSPACE/mambaforge publish-gh
mamba install --yes gh

# Create a release and attach the given assets.
export GITHUB_TOKEN
if [[ $PRERELEASE == true ]]; then
  title="Nightly $RELEASES_TAG_NAME"
  notes="Nightly build. Use with caution. Not recommended for production use."
  options="--draft=false --prerelease"
  echo "Creating prerelease $RELEASES_TAG_NAME"
else
  title="Release $RELEASES_TAG_NAME"
  notes=$title
  options="--draft=true"
  echo "Creating draft release $RELEASES_TAG_NAME"
fi

# Remove release with the same tag name.
if github_release_cmd view $RELEASES_TAG_NAME >/dev/null; then
    echo "Removing old tag & release $RELEASES_TAG_NAME"
    curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$RELEASES_REPO/git/refs/tags/$RELEASES_TAG_NAME
    github_release_cmd delete $RELEASES_TAG_NAME --yes
fi

github_release_cmd create $RELEASES_TAG_NAME --title "$title" --notes "$notes" --target $RELEASES_TAG_SHA $options
# there is a minor lag in creating the release - wait before we upload
sleep 1

# Provide a custom label for the standalone installers that is a fixed string to better describe
# which package users should select.
for asset in "$@"; do
    if [[ $asset == *.exe ]]; then
      label=MantidWorkbench-Windows
    elif [[ $asset == *.dmg ]]; then
      label=MantidWorkbench-macOS
    elif [[ $asset == *.tar.xz ]]; then
      label=MantidWorkbench-Linux
    # Conda packages are uploaded to the release as a backup for the packages stored on anaconda,
    # they do not need to be relabeled.
    elif [[ $asset == *conda-packages.tar ]]; then
      echo "Uploading $asset to $RELEASES_TAG_NAME tag under $RELEASES_REPO"
      github_release_cmd upload --clobber $RELEASES_TAG_NAME "$asset"
      continue
    else
      echo "Unknown asset type found \"${asset}\" Skipping upload."
      continue
    fi
    echo "Uploading $asset, labelled as $asset#$label, to $RELEASES_TAG_NAME tag under $RELEASES_REPO"
    github_release_cmd upload --clobber $RELEASES_TAG_NAME "$asset#$label"
done
