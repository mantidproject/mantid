#!/bin/bash -ex

# This script expects to be in a POSIX environment, it will run our CI workflow on a POSIX environment depending
# on the flags and args passed. This script will always compile the code, and run the unit tests if a change was
# made to something other than a .rst file.
#
# Script usage:
# buildscript <path-to-workspace> <cmake-preset-name> [options]
#
# Example command to run a PR build on ubuntu:
# buildscript /jenkins/workspace_dir/ linux-ci --enable-systemtests --enable-coverage --enable-docs
#
# Expected args:
#   1. WORKSPACE: path to the workspace/source code that this should run inside, Windows Caveat: Only use / for
#                 this argument do not use \\ or \ in the path.
#   2. CMAKE_PRESET: the CMake preset that should be ran to generate the cmake files for this CI job
#
# Possible flags:
#   --enable-systemtests: Runs the system tests from being compiled or ran
#   --enable-package: Runs a package being produced
#   --enable-docs: Runs the docs from being built
#   --enable-dev-docs: Runs the developer docs from being built
#   --enable-doctests: Runs the documentation tests
#   --enable-coverity: Runs coverity and submits results, ignore all other options and does not run unit tests
#   --clean-build: Clears the build folder and builds from scratch
#   --clean-external-projects: Clear the external projects from the build folder
#   --use-core-dumps: Activate core dumps (Linux only)
#
# Possible parameters:
#   --extra-cmake-flags: Extra flags to pass directly to cmake, enclose in "", defaults to nothing
#   --build-threads: pass the number of threads that can be used to build with, default is 1 thread per logical core
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source $SCRIPT_DIR/mamba-utils
start_time=$(date +%s)

# Check arguments passed are 2 or higher, and aren't optional flags.
if [[ $# < 2 || $1 == "--"* || $2 == "--"* ]]; then
    echo "Pass 2 arguments followed by optional flags usage: buildscript <path-to-workspace> <cmake-preset-name> [options]"
    exit 1
fi

WORKSPACE=$1
shift
CMAKE_PRESET=$1
shift

if [[ -z "$BUILD_THREADS" ]]; then
    if [[ $OSTYPE == 'darwin'* ]]; then
        BUILD_THREADS="$(sysctl -n hw.logicalcpu)"
    else
        BUILD_THREADS="$(grep -c ^processor /proc/cpuinfo)" # Not physical but logical cores, includes hyper threaded.
    fi
fi

XVFB_SERVER_NUM=101
BUILD_DIR=$WORKSPACE/build

ENABLE_BUILD_CODE=true
ENABLE_UNIT_TESTS=true
ENABLE_SYSTEM_TESTS=false
ENABLE_PACKAGE=false
ENABLE_DOCS=false
ENABLE_DOC_TESTS=false
ENABLE_DEV_DOCS=false
ENABLE_COVERITY=false
CLEAN_BUILD=false
CLEAN_EXTERNAL_PROJECTS=false
USE_CORE_DUMPS=false
EXTRA_CMAKE_FLAGS="-DENABLE_PRECOMMIT=OFF"

# Handle flag inputs
while [ ! $# -eq 0 ]
do
    case "$1" in
        --enable-systemtests) ENABLE_SYSTEM_TESTS=true ;;
        --enable-package) ENABLE_PACKAGE=true ;;
        --enable-docs) ENABLE_DOCS=true ;;
        --enable-doctests)
            ENABLE_DOCS=true
            ENABLE_DOC_TESTS=true
            ;;
        --enable-dev-docs) ENABLE_DEV_DOCS=true ;;
        --enable-coverity)
	    ENABLE_COVERITY=true
	    ENABLE_UNIT_TESTS=false
	    ;;
        --clean-build) CLEAN_BUILD=true ;;
        --clean-external-projects) CLEAN_EXTERNAL_PROJECTS=true ;;
        --use-core-dumps) USE_CORE_DUMPS=true ;;
        --extra-cmake-flags)
            EXTRA_CMAKE_FLAGS="$2"
            shift
            ;;
        --build-threads)
            BUILD_THREADS="$2"
            shift
            ;;
        *)
            echo "Argument not accepted: $1"
            exit 1
            ;;
  esac
  shift
done

# Clean the source tree to remove stale configured files. Only remove
# the build and mambaforge directories if this is a clean build
pushd $WORKSPACE
if [[ $CLEAN_BUILD  == true ]]; then
    # git clean will delete most things in build but leave subrepositories such as build/_deps/span-src
    # so we need to remove the whole of build/ by hand
    rm -fr $BUILD_DIR
else
    git_clean_excludes_extra="--exclude=build --exclude=mambaforge"
fi
git clean -d -x --force --exclude=".Xauthority-*" $git_clean_excludes_extra

# Mamba
setup_mamba $WORKSPACE/mambaforge "" $CLEAN_BUILD
create_and_activate_mantid_developer_env

# Check whether this is an incremental build that only changes rst files
if [ -d $BUILD_DIR ]; then
    if ${SCRIPT_DIR}/../check_for_changes dev-docs-only || ${SCRIPT_DIR}/../check_for_changes user-docs-only; then
      ENABLE_BUILD_CODE=false
      ENABLE_UNIT_TESTS=false
      ENABLE_SYSTEM_TESTS=false
    fi
    rm -rf ${BUILD_DIR}/bin ${BUILD_DIR}/ExternalData ${BUILD_DIR}/Testing
    find $WORKSPACE \( -iname 'TEST-*.xml' -o -name 'Test.xml' \) -delete
else
  mkdir -p $BUILD_DIR
fi

if [[ ${CLEAN_EXTERNAL_PROJECTS} == true ]]; then
    rm -rf $BUILD_DIR/eigen-*
    rm -rf $BUILD_DIR/googletest-*
fi

# Clean up artifacts from previous builds
rm -f -- *.dmg *.rpm *.deb *.tar.gz *.tar.xz *.exe
# Remove ctest logs from previous builds
rm -rf  $BUILD_DIR/ctest_log

# Run the script that handles the build
$SCRIPT_DIR/build $WORKSPACE $CMAKE_PRESET $ENABLE_DOCS $ENABLE_DEV_DOCS $ENABLE_BUILD_CODE $ENABLE_UNIT_TESTS $ENABLE_SYSTEM_TESTS $ENABLE_COVERITY "$EXTRA_CMAKE_FLAGS" $BUILD_THREADS

# Run unit and system tests
$SCRIPT_DIR/run-tests $WORKSPACE $ENABLE_SYSTEM_TESTS $ENABLE_UNIT_TESTS $ENABLE_DOCS $ENABLE_DOC_TESTS $BUILD_THREADS $USE_CORE_DUMPS

# elapsed time with second resolution
end_time=$(date +%s)
elapsed=$(( end_time - start_time ))
echo "Build & Test script took $elapsed seconds."
