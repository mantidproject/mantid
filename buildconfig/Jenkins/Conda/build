#!/bin/bash -ex

# This script expects a setup environment with all dependencies available in
# the environment
#
# Expected args:
#   1. WORKSPACE: path to the workspace/source code that this should run inside
#   2. CMAKE_PRESET: the CMake preset that should be ran to generate the cmake files for this CI job
#   3. ENABLE_DOCS: build the user docs
#   4. ENABLE_DEV_DOCS: build the user docs
#   5. ENABLE_BUILD_CODE: whether or not to build the main code target
#   6. ENABLE_UNIT_TESTS: whether or not to build the unit tests target
#   7. ENABLE_SYSTEM_TESTS: whether or not to build the system test data
#   8. EXTRA_CMAKE_FLAGS: Extra flags to pass directly to cmake, enclose in "".
#   9. BUILD_THREADS: Pass the number of threads that can be used to build with

WORKSPACE=$1
CMAKE_PRESET=$2
ENABLE_DOCS=$3
ENABLE_DEV_DOCS=$4
ENABLE_BUILD_CODE=$5
ENABLE_UNIT_TESTS=$6
ENABLE_SYSTEM_TESTS=$7
ENABLE_COVERITY=$8
EXTRA_CMAKE_FLAGS=$9
BUILD_THREADS=${10}

# Only pass MANTID_DATA_STORE to CMake if present in the environment otherwise rely on CMake default
if [[ -n "${MANTID_DATA_STORE}" ]]; then
    MANTID_DATA_STORE_CMAKE="-DMANTID_DATA_STORE=${MANTID_DATA_STORE}"
fi

BUILD_OPTIONS="-j$BUILD_THREADS"
if [[ $OSTYPE == "msys"* ]]; then
    BUILD_OPTIONS="$BUILD_OPTIONS --config Release"
fi

# Run CMake using preset and variables
cmake --preset=${CMAKE_PRESET} ${MANTID_DATA_STORE_CMAKE} ${EXTRA_CMAKE_FLAGS} $WORKSPACE

# Run the actual builds for the code, unit tests, and system tests.
cd $WORKSPACE/build

if [[ $ENABLE_COVERITY == true ]]; then
    ${COVERITY_DIR}/cov-build --dir cov-int cmake --build . $BUILD_OPTIONS
    tar czvf mantid.tgz cov-int
    status=$(curl --form token=$COVERITY_TOKEN --form email=mantidproject@gmail.com \
		  --form file=@mantid.tgz --form version=$GIT_COMMIT \
		  https://scan.coverity.com/builds?project=mantidproject%2Fmantid)
    status=$(echo ${status} | sed -e 's/^ *//' -e 's/ *$//')
    if [[ -z $status ]] || [[ ${status} == "Build successfully submitted." ]]; then
        exit 0
    else
        echo "$status"
        exit 1
    fi
fi

if [[ $ENABLE_BUILD_CODE == true ]]; then
    cmake --build . $BUILD_OPTIONS
fi

if [[ $ENABLE_UNIT_TESTS == true ]]; then
    cmake --build . --target AllTests $BUILD_OPTIONS
fi

if [[ $ENABLE_SYSTEM_TESTS == true ]]; then
    cmake --build . --target StandardTestData $BUILD_OPTIONS
    cmake --build . --target SystemTestData $BUILD_OPTIONS
fi

# Build docs
if [[ $ENABLE_DOCS == true ]]; then
    # Remove doctrees directory so it forces a full reparse. It seems that
    # without this newly added doctests are not executed
    if [ -d $BUILD_DIR/docs/doctrees ]; then
        rm -fr $BUILD_DIR/docs/doctrees/*
    fi
    cmake --build . --target docs-html $BUILD_OPTIONS
fi

# Build dev-docs turned off until dev docs run without error
if [[ $ENABLE_DEV_DOCS == true ]]; then
    rm -fr $BUILD_DIR/dev-docs/doctree/*
    rm -f $BUILD_DIR/dev-docs/dev_docs_warnings.txt
    cmake --build . --target dev-docs-html $BUILD_OPTIONS
fi
