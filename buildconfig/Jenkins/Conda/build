#!/bin/bash -ex

# This script expects a setup environment with all dependencies available in
# the environment
#
# Expected args:
#   1. WORKSPACE: path to the workspace/source code that this should run inside
#   2. CMAKE_PRESET: the CMake preset that should be run to generate the cmake files for this CI job
#   3. ENABLE_DOCS: build the user docs
#   4. ENABLE_DEV_DOCS: build the user docs
#   5. ENABLE_BUILD_CODE: whether or not to build the main code target
#   6. ENABLE_UNIT_TESTS: whether or not to build the unit tests target
#   7. ENABLE_SYSTEM_TESTS: whether or not to build the system test data
#   8. ENABLE_DOC_TESTS: whether or not to build the test data for doc tests
#   9. ENABLE_COVERITY: enables the coverity scan static analysis
#   10. EXTRA_CMAKE_FLAGS: Extra flags to pass directly to cmake, enclose in "".
#   11. BUILD_THREADS: Pass the number of threads that can be used to build with

WORKSPACE=$1
CMAKE_PRESET=$2
ENABLE_DOCS=$3
ENABLE_DEV_DOCS=$4
ENABLE_BUILD_CODE=$5
ENABLE_UNIT_TESTS=$6
ENABLE_SYSTEM_TESTS=$7
ENABLE_DOC_TESTS=$8
ENABLE_COVERITY=$9
EXTRA_CMAKE_FLAGS=${10}
BUILD_THREADS=${11}

# Only pass MANTID_DATA_STORE to CMake if present in the environment otherwise rely on CMake default
if [[ -n "${MANTID_DATA_STORE}" ]]; then
    MANTID_DATA_STORE_CMAKE="-DMANTID_DATA_STORE=${MANTID_DATA_STORE}"
fi

BUILD_OPTIONS=""
if [[ $OSTYPE == "msys"* ]]; then
    BUILD_OPTIONS="$BUILD_OPTIONS --config Release"
fi

# Run CMake using preset and variables
cmake --preset=${CMAKE_PRESET} ${MANTID_DATA_STORE_CMAKE} ${EXTRA_CMAKE_FLAGS} $WORKSPACE

# Run the actual builds for the code, unit tests, and system tests.
cd $WORKSPACE/build

if [ -f build.ninja ]; then
    # if using ninja let ninja control compiling threads
    echo "ninja will control number of threads"
else
    # prepend number of threads to build with
    BUILD_OPTIONS="-j$BUILD_THREADS $BUILD_OPTIONS"
fi

if [[ $ENABLE_COVERITY == true ]]; then
    conda install -y jq curl

    ${COVERITY_DIR}/cov-build --dir cov-int cmake --build . $BUILD_OPTIONS
    tar czvf mantid.tgz cov-int

    curl --fail-with-body -X POST -d version=$GIT_COMMIT -d email=mantidproject@gmail.com -d token=$COVERITY_TOKEN -d file_name="mantid.tgz" https://scan.coverity.com/projects/335/builds/init > response
    cat response
    upload_url=$(jq -r '.url' response)
    build_id=$(jq -r '.build_id' response)
    curl -f -X PUT --header 'Content-Type: application/json' --upload-file mantid.tgz $upload_url
    curl -f -X PUT -d token=$COVERITY_TOKEN https://scan.coverity.com/projects/335/builds/$build_id/enqueue

    exit 0
fi

if [[ $ENABLE_BUILD_CODE == true ]]; then
    cmake --build . $BUILD_OPTIONS
fi

# create a collection of targets to run all at once during main build
if [[ $ENABLE_UNIT_TESTS == true || $ENABLE_SYSTEM_TESTS == true || $ENABLE_DOC_TESTS == true ]]; then
    TARGET_BUILD_AND_DOWNLOAD="$TARGET_BUILD_AND_DOWNLOAD StandardTestData"
    if [[ $ENABLE_UNIT_TESTS == true ]]; then
	TARGET_BUILD_AND_DOWNLOAD="$TARGET_BUILD_AND_DOWNLOAD AllTests"
    fi
    if [[ $ENABLE_SYSTEM_TESTS == true ]]; then
	TARGET_BUILD_AND_DOWNLOAD="$TARGET_BUILD_AND_DOWNLOAD SystemTestData"
    fi

    # compile and download data
    cmake --build . --target $TARGET_BUILD_AND_DOWNLOAD $BUILD_OPTIONS
fi

# Build docs
if [[ $ENABLE_DOCS == true ]]; then
    # Remove doctrees directory so it forces a full reparse. It seems that
    # without this newly added doctests are not executed
    if [ -d $BUILD_DIR/docs/doctrees ]; then
        rm -fr $BUILD_DIR/docs/doctrees/*
    fi
    cmake --build . --target docs-html $BUILD_OPTIONS
fi

# Build dev-docs
if [[ $ENABLE_DEV_DOCS == true ]]; then
    rm -fr $BUILD_DIR/dev-docs/doctree/*
    rm -f $BUILD_DIR/dev-docs/dev_docs_warnings.txt
    cmake --build . --target dev-docs-html $BUILD_OPTIONS
fi
