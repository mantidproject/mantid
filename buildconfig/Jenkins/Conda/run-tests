#!/bin/bash -ex

# This script expects a setup environment with all dependencies available in
# the environment
#
# Expected args:
#   1. WORKSPACE: path to the workspace/source code that this should run inside
#   2. ENABLE_SYSTEM_TESTS: whether or not system tests are being run/built
#   3. ENABLE_UNIT_TESTS: whether or not unit tests are being run/built
#   4. ENABLE_DOCS: Whether or not the docs have been built
#   5. ENABLE_DOC_TESTS: Whether or not the doc tests should be run
#   6. BUILD_THREADS: The number of threads to use during testing

WORKSPACE=$1
ENABLE_SYSTEM_TESTS=$2
ENABLE_UNIT_TESTS=$3
ENABLE_DOCS=$4
ENABLE_DOC_TESTS=$5
BUILD_THREADS=$6

XVFB_SERVER_NUM=101

# If this isn't specified for a Jenkins agent, revert to default value
if [[ -z "$BUILD_THREADS_SYSTEM_TESTS" ]]; then
    # Default to 3 system tests running in parallel, assuming builders have >= 32GB RAM
    BUILD_THREADS_SYSTEM_TESTS=3
fi

# Jenkins nodes may specify the maximum number of unit tests to run in parallel.
# This is useful to prevent test timeouts for machines with limited RAM.
if [[ -z "$UNIT_TEST_THREADS" ]]; then
    # Default is number of build threads.
    UNIT_TEST_THREADS=$BUILD_THREADS
fi

function run_with_xvfb {
    if [ $(command -v xvfb-run) ]; then
        # Use -e because a bug on RHEL7 means --error-file produces an error: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=337703;msg=2
        # Use -noreset because of an X Display bug caused by a race condition in xvfb: https://gitlab.freedesktop.org/xorg/xserver/-/issues/1102
        xvfb-run -e /dev/stderr --server-args="-core -noreset -screen 0 640x480x24" \
        --server-num=${XVFB_SERVER_NUM} $@
        # Remove Xvfb X server lock files after running
        rm -f /tmp/.X${XVFB_SERVER_NUM}-lock
    else
        eval $@
    fi
}

function doctest_onexit {
    echo "Error: DocTests failed. Check 'doctest_${OSTYPE}.log' in the build artifacts."
}

# Clean up prior to testing
# Prevent race conditions when creating the user config directory
if [[ $OSTYPE == "msys"* ]]; then
    userconfig_dir=$APPDATA/mantidproject/mantid
    userprops=$WORKSPACE/build/bin/Mantid.user.properties
    workbench_ini=$APPDATA/mantidproject/mantidworkbench.ini
else
    userconfig_dir=$HOME/.mantid
    userprops=$userconfig_dir/Mantid.user.properties
    workbench_ini=~/.config/mantidproject/mantidworkbench.ini
fi

rm -fr $userconfig_dir
rm -fr $userprops
mkdir -p $userconfig_dir

# Remove GUI qsettings files
rm -f $workbench_ini

# use a fixed number of openmp threads to avoid overloading the system
echo MultiThreaded.MaxCores=2 > $userprops

if [[ $OSTYPE == "msys"* ]]; then
    WINDOWS_UNITTEST_TIMEOUT_OPTIONS="--timeout 500"
    export PYTHONHOME=$CONDA_PREFIX
    SYSTEM_TEST_EXECUTABLE=$WORKSPACE/build/systemtest.bat
else
    SYSTEM_TEST_EXECUTABLE=$WORKSPACE/build/systemtest
fi

# Run unit tests
cd $WORKSPACE/build
# mkdir for test logs
mkdir -p test_logs
if [[ $ENABLE_UNIT_TESTS == true ]]; then
    run_with_xvfb ctest -j$UNIT_TEST_THREADS --no-compress-output -T Test -O test_logs/ctest_$OSTYPE.log --schedule-random --output-on-failure --repeat until-pass:3 $WINDOWS_UNITTEST_TIMEOUT_OPTIONS
fi

if [[ $ENABLE_DOCS == true && $ENABLE_DOC_TESTS == true ]]; then
    # Trap a doctest exit or termination
    trap doctest_onexit INT TERM EXIT

    # Build doctests without using Xvfb for better output when things fail. Output to file due to console memory issues
    QT_QPA_PLATFORM=offscreen cmake --build . --target docs-doctest -j$BUILD_THREADS > test_logs/doctest_$OSTYPE.log

    # Disable the trap if the doctests are successful
    trap - INT TERM EXIT
fi

if [[ $ENABLE_SYSTEM_TESTS == true ]]; then
    rm -fr $userconfig_dir
    rm -f $workbench_ini

    # Turn off any auto updating on startup
    mkdir -p $userconfig_dir
    echo "UpdateInstrumentDefinitions.OnStartup = 0" > $userprops
    echo "usagereports.enabled = 0" >> $userprops
    echo "CheckMantidVersion.OnStartup = 0" >> $userprops

    SYSTEM_TEST_OPTIONS="-j${BUILD_THREADS_SYSTEM_TESTS} -l information --quiet --output-on-failure"

    if [[ ${JOB_NAME} == *pull_requests* ]]; then
        SYSTEM_TEST_OPTIONS+=" --exclude-in-pull-requests"
    fi

    run_with_xvfb $SYSTEM_TEST_EXECUTABLE $SYSTEM_TEST_OPTIONS
fi
