#!/bin/bash -ex
# return 1 if have matches
# return 0 if no matches
FOUND=1
NOTFOUND=0

TYPE=${1}
# Assume the current commit is the merged commit created by GitHub.
# The first and second parents will be the PR target branch & PR branch
# that is being merged, resepectively. We want the files changes between the
# base and tail commits of the branch
BRANCH_TIP=$(git rev-parse HEAD^2)
BRANCH_BASE=$(git merge-base HEAD^2 HEAD^1)
echo "Looking for files changed between ${BRANCH_BASE} and ${BRANCH_TIP}"

case "$TYPE" in
    py)
        exit $(git diff --quiet ${BRANCH_TIP} ${BRANCH_BASE} -- \*\.py)
    ;;
    cpp)
        git diff --quiet ${BRANCH_TIP} ${BRANCH_BASE} -- \*\.h || exit $FOUND
        git diff --quiet ${BRANCH_TIP} ${BRANCH_BASE} -- \*\.cpp || exit $FOUND
        git diff --quiet ${BRANCH_TIP} ${BRANCH_BASE} -- \*\.cxx || exit $FOUND
        git diff --quiet ${BRANCH_TIP} ${BRANCH_BASE} -- \*\.tcc || exit $FOUND
        exit $NOTFOUND
    ;;
    # For the -only cases FOUND=1 means that there were other changes besides the case
    # Note that these checks CANNOT be replaced with "git diff --quiet ... dev-docs" because this only
    # checks if there were changes in a given directory and not if they are the ONLY changes
    dev-docs-only)
        if git diff --name-only ${BRANCH_TIP} ${BRANCH_BASE} -- | grep -q -E -v '^dev-docs/'; then
            exit $FOUND
        else
            exit $NOTFOUND
        fi
    ;;
    user-docs-only)
        if git diff --name-only ${BRANCH_TIP} ${BRANCH_BASE} -- | grep -q -E -v '^docs/'; then
            exit $FOUND
        else
            exit $NOTFOUND
        fi
    ;;
    docs-gui-only)
        if git diff --name-only ${BRANCH_TIP} ${BRANCH_BASE} -- | grep -q -E -v '^docs/|^dev-docs/|^qt/; then
            exit $FOUND
        else
            exit $NOTFOUND
        fi
    ;;
    *)
        echo "do not have case for type \"$TYPE\""
    ;;
esac

# fall-through behavior is that it matches
exit $FOUND
